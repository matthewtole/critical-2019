
/Users/matthewtole/Documents/Projects/critical-2019/wrist/target/wrist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1dd0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a1dd4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000065c  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1e3c  080a1e3c  00021e3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1e64  080a1e64  00021e64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000e1fdb  00000000  00000000  00021e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000149bc  00000000  00000000  00103e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001df90  00000000  00000000  001187ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000021e8  00000000  00000000  0013678f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000047f8  00000000  00000000  00138977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002e030  00000000  00000000  0013d16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00034a4c  00000000  00000000  0016b19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000ab7fb  00000000  00000000  0019fbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bdd0  00000000  00000000  0024b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a4 1a 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcf5 	bl	80a1a1c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fcfa 	bl	80a1a32 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1dd4 	.word	0x080a1dd4
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	200009c4 	.word	0x200009c4
 80a0058:	200009c4 	.word	0x200009c4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fac5 	bl	80a15ec <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1d68 	.word	0x080a1d68
 80a0084:	080a1dc4 	.word	0x080a1dc4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b86a 	b.w	80a0160 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f919 	bl	80a02c4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba6b 	b.w	80a1570 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 be73 	b.w	80a0d84 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE9clearLedsEi>:
    FastPin<DATA_PIN>::setOutput();
    mPinMask = FastPin<DATA_PIN>::mask();
    mPort = FastPin<DATA_PIN>::port();
  }

  virtual void clearLeds(int nLeds) {
 80a00ae:	b513      	push	{r0, r1, r4, lr}
    showColor(CRGB(0, 0, 0), nLeds, 0);
 80a00b0:	6803      	ldr	r3, [r0, #0]
 80a00b2:	460a      	mov	r2, r1
 80a00b4:	681c      	ldr	r4, [r3, #0]
    {
    }

    // allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
 80a00b6:	2300      	movs	r3, #0
 80a00b8:	f88d 3000 	strb.w	r3, [sp]
 80a00bc:	f88d 3001 	strb.w	r3, [sp, #1]
 80a00c0:	f88d 3002 	strb.w	r3, [sp, #2]
    {
    }

    // allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
 80a00c4:	f88d 3004 	strb.w	r3, [sp, #4]
 80a00c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80a00cc:	f88d 3006 	strb.w	r3, [sp, #6]
 80a00d0:	4669      	mov	r1, sp
 80a00d2:	ab01      	add	r3, sp, #4
 80a00d4:	47a0      	blx	r4
  }
 80a00d6:	b002      	add	sp, #8
 80a00d8:	bd10      	pop	{r4, pc}
	...

080a00dc <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE4initEv>:

  data_t mPinMask;
  data_ptr_t mPort;
  CMinWait<WAIT_TIME> mWait;
public:
  virtual void init() {
 80a00dc:	b510      	push	{r4, lr}
 80a00de:	4604      	mov	r4, r0
    }
  }
  inline static void setInput() { /* TODO */ } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }
  #endif

  inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
 80a00e0:	2101      	movs	r1, #1
 80a00e2:	2002      	movs	r0, #2
 80a00e4:	f001 fad2 	bl	80a168c <pinMode>
    FastPin<DATA_PIN>::setOutput();
    mPinMask = FastPin<DATA_PIN>::mask();
 80a00e8:	2320      	movs	r3, #32
 80a00ea:	61a3      	str	r3, [r4, #24]
    mPort = FastPin<DATA_PIN>::port();
 80a00ec:	4b01      	ldr	r3, [pc, #4]	; (80a00f4 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE4initEv+0x18>)
 80a00ee:	61e3      	str	r3, [r4, #28]
 80a00f0:	bd10      	pop	{r4, pc}
 80a00f2:	bf00      	nop
 80a00f4:	40020414 	.word	0x40020414

080a00f8 <_Z14set_status_ledhb>:
    leds[STATUS_LED_WIFI] = CRGB::Red;
  }
  FastLED.show();
}

void set_status_led(uint8_t led, boolean okay) {
 80a00f8:	b410      	push	{r4}
  leds[led] = okay ? CRGB::Green : CRGB::Red;
 80a00fa:	2900      	cmp	r1, #0
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a00fc:	4909      	ldr	r1, [pc, #36]	; (80a0124 <_Z14set_status_ledhb+0x2c>)
 80a00fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a0102:	bf14      	ite	ne
 80a0104:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 80a0108:	f44f 037f 	moveq.w	r3, #16711680	; 0xff0000
 80a010c:	180a      	adds	r2, r1, r0
 80a010e:	0c1c      	lsrs	r4, r3, #16
        g = (colorcode >>  8) & 0xFF;
 80a0110:	0a1b      	lsrs	r3, r3, #8
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a0112:	540c      	strb	r4, [r1, r0]
        g = (colorcode >>  8) & 0xFF;
 80a0114:	7053      	strb	r3, [r2, #1]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
 80a0116:	4804      	ldr	r0, [pc, #16]	; (80a0128 <_Z14set_status_ledhb+0x30>)
        b = (colorcode >>  0) & 0xFF;
 80a0118:	2300      	movs	r3, #0
 80a011a:	7093      	strb	r3, [r2, #2]
 80a011c:	7801      	ldrb	r1, [r0, #0]
  FastLED.show();
}
 80a011e:	bc10      	pop	{r4}
 80a0120:	f000 bc20 	b.w	80a0964 <_ZN9NSFastLED8CFastLED4showEh>
 80a0124:	20000399 	.word	0x20000399
 80a0128:	2000041c 	.word	0x2000041c

080a012c <_Z17init_touch_sensorv>:

void init_touch_sensor()
{
 80a012c:	b570      	push	{r4, r5, r6, lr}
  set_status_led(STATUS_LED_TOUCH, touch_sensor.begin(0x5A));
 80a012e:	215a      	movs	r1, #90	; 0x5a
 80a0130:	4809      	ldr	r0, [pc, #36]	; (80a0158 <_Z17init_touch_sensorv+0x2c>)
 80a0132:	f000 fb5a 	bl	80a07ea <_ZN15Adafruit_MPR1215beginEh>
 80a0136:	2400      	movs	r4, #0
 80a0138:	4601      	mov	r1, r0
 80a013a:	2000      	movs	r0, #0
 80a013c:	f7ff ffdc 	bl	80a00f8 <_Z14set_status_ledhb>
  for (uint8_t s = 0; s < TOUCH_SENSOR_COUNT; s += 1)
  {
    touch_sensors[s].is_touched = false;
 80a0140:	4626      	mov	r6, r4
 80a0142:	4d06      	ldr	r5, [pc, #24]	; (80a015c <_Z17init_touch_sensorv+0x30>)
 80a0144:	5566      	strb	r6, [r4, r5]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0146:	f000 fc97 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
    touch_sensors[s].last_changed = millis();
 80a014a:	192b      	adds	r3, r5, r4
 80a014c:	3408      	adds	r4, #8
}

void init_touch_sensor()
{
  set_status_led(STATUS_LED_TOUCH, touch_sensor.begin(0x5A));
  for (uint8_t s = 0; s < TOUCH_SENSOR_COUNT; s += 1)
 80a014e:	2c60      	cmp	r4, #96	; 0x60
  {
    touch_sensors[s].is_touched = false;
    touch_sensors[s].last_changed = millis();
 80a0150:	6058      	str	r0, [r3, #4]
}

void init_touch_sensor()
{
  set_status_led(STATUS_LED_TOUCH, touch_sensor.begin(0x5A));
  for (uint8_t s = 0; s < TOUCH_SENSOR_COUNT; s += 1)
 80a0152:	d1f7      	bne.n	80a0144 <_Z17init_touch_sensorv+0x18>
  {
    touch_sensors[s].is_touched = false;
    touch_sensors[s].last_changed = millis();
  }
}
 80a0154:	bd70      	pop	{r4, r5, r6, pc}
 80a0156:	bf00      	nop
 80a0158:	20000398 	.word	0x20000398
 80a015c:	200003b4 	.word	0x200003b4

080a0160 <setup>:

CRGB leds[LED_COUNT];
Adafruit_MPR121 touch_sensor = Adafruit_MPR121();
TouchSensor touch_sensors[TOUCH_SENSOR_COUNT];

void setup() {
 80a0160:	b510      	push	{r4, lr}
  Serial.begin();
 80a0162:	f001 f911 	bl	80a1388 <_Z16_fetch_usbserialv>
 80a0166:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a016a:	f001 f8f3 	bl	80a1354 <_ZN9USBSerial5beginEl>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
 80a016e:	4826      	ldr	r0, [pc, #152]	; (80a0208 <setup+0xa8>)
 80a0170:	6804      	ldr	r4, [r0, #0]
 80a0172:	f014 0401 	ands.w	r4, r4, #1
 80a0176:	d11f      	bne.n	80a01b8 <setup+0x58>
 80a0178:	f7ff ff91 	bl	80a009e <__cxa_guard_acquire>
 80a017c:	b1e0      	cbz	r0, 80a01b8 <setup+0x58>
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
 80a017e:	4b23      	ldr	r3, [pc, #140]	; (80a020c <setup+0xac>)
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    {
    }

    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
 80a0180:	22ff      	movs	r2, #255	; 0xff
 80a0182:	731a      	strb	r2, [r3, #12]
 80a0184:	735a      	strb	r2, [r3, #13]
 80a0186:	739a      	strb	r2, [r3, #14]
    {

    }

    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
 80a0188:	73da      	strb	r2, [r3, #15]
 80a018a:	741a      	strb	r2, [r3, #16]
 80a018c:	745a      	strb	r2, [r3, #17]
 80a018e:	2201      	movs	r2, #1
 80a0190:	749a      	strb	r2, [r3, #18]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
 80a0192:	4a1f      	ldr	r2, [pc, #124]	; (80a0210 <setup+0xb0>)
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
 80a0194:	605c      	str	r4, [r3, #4]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
 80a0196:	6811      	ldr	r1, [r2, #0]
#ifdef SUPPORT_ARGB
    // as above, but every 4th uint8_t is assumed to be alpha channel data, and will be skipped
    virtual void show(const struct CARGB *data, int nLeds, CRGB scale) = 0;
#endif
public:
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
 80a0198:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
 80a019a:	609c      	str	r4, [r3, #8]
        if(m_pHead==NULL) { m_pHead = this; }
 80a019c:	b901      	cbnz	r1, 80a01a0 <setup+0x40>
 80a019e:	6013      	str	r3, [r2, #0]
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
 80a01a0:	4a1c      	ldr	r2, [pc, #112]	; (80a0214 <setup+0xb4>)
 80a01a2:	6811      	ldr	r1, [r2, #0]
 80a01a4:	b101      	cbz	r1, 80a01a8 <setup+0x48>
 80a01a6:	608b      	str	r3, [r1, #8]
        m_pTail = this;
 80a01a8:	6013      	str	r3, [r2, #0]
// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
// this should make sure that chipsets that have 
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
 80a01aa:	2200      	movs	r2, #0
 80a01ac:	841a      	strh	r2, [r3, #32]

enum ESM { SMART_MATRIX };
enum OWS2811 { OCTOWS2811 };

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
 80a01ae:	4a1a      	ldr	r2, [pc, #104]	; (80a0218 <setup+0xb8>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
 80a01b0:	4815      	ldr	r0, [pc, #84]	; (80a0208 <setup+0xa8>)

enum ESM { SMART_MATRIX };
enum OWS2811 { OCTOWS2811 };

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
 80a01b2:	601a      	str	r2, [r3, #0]
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
 80a01b4:	f7ff ff78 	bl	80a00a8 <__cxa_guard_release>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
 80a01b8:	2300      	movs	r3, #0
 80a01ba:	2208      	movs	r2, #8
 80a01bc:	4917      	ldr	r1, [pc, #92]	; (80a021c <setup+0xbc>)
 80a01be:	4813      	ldr	r0, [pc, #76]	; (80a020c <setup+0xac>)
 80a01c0:	f000 fb9e 	bl	80a0900 <_ZN9NSFastLED8CFastLED7addLedsEPNS_14CLEDControllerEPNS_4CRGBEii>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
 80a01c4:	4b16      	ldr	r3, [pc, #88]	; (80a0220 <setup+0xc0>)
 80a01c6:	2232      	movs	r2, #50	; 0x32
 80a01c8:	701a      	strb	r2, [r3, #0]
 80a01ca:	2300      	movs	r3, #0
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a01cc:	461a      	mov	r2, r3
 80a01ce:	4813      	ldr	r0, [pc, #76]	; (80a021c <setup+0xbc>)
 80a01d0:	541a      	strb	r2, [r3, r0]
 80a01d2:	18c1      	adds	r1, r0, r3
 80a01d4:	3303      	adds	r3, #3
  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, LED_COUNT);
  FastLED.setBrightness(50);
  for (uint8_t i = 0; i < LED_COUNT; i++)
 80a01d6:	2b18      	cmp	r3, #24
        g = (colorcode >>  8) & 0xFF;
 80a01d8:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
 80a01da:	708a      	strb	r2, [r1, #2]
 80a01dc:	d1f8      	bne.n	80a01d0 <setup+0x70>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
 80a01de:	2132      	movs	r1, #50	; 0x32
 80a01e0:	480f      	ldr	r0, [pc, #60]	; (80a0220 <setup+0xc0>)
 80a01e2:	f000 fbbf 	bl	80a0964 <_ZN9NSFastLED8CFastLED4showEh>
  {
    leds[i] = CRGB::Black;
  }
  FastLED.show();

  init_touch_sensor();
 80a01e6:	f7ff ffa1 	bl	80a012c <_Z17init_touch_sensorv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a01ea:	480e      	ldr	r0, [pc, #56]	; (80a0224 <setup+0xc4>)
 80a01ec:	2300      	movs	r3, #0
 80a01ee:	461a      	mov	r2, r3
 80a01f0:	4619      	mov	r1, r3
 80a01f2:	6840      	ldr	r0, [r0, #4]
 80a01f4:	f000 fd6e 	bl	80a0cd4 <network_connect>
  WiFi.connect();
  Serial.printf("Hello, world!");
 80a01f8:	f001 f8c6 	bl	80a1388 <_Z16_fetch_usbserialv>
}
 80a01fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a0200:	4a09      	ldr	r2, [pc, #36]	; (80a0228 <setup+0xc8>)
 80a0202:	2100      	movs	r1, #0
 80a0204:	f000 bf6f 	b.w	80a10e6 <_ZN5Print11printf_implEbPKcz>
 80a0208:	20000370 	.word	0x20000370
 80a020c:	20000374 	.word	0x20000374
 80a0210:	20000434 	.word	0x20000434
 80a0214:	20000424 	.word	0x20000424
 80a0218:	080a1ac0 	.word	0x080a1ac0
 80a021c:	20000399 	.word	0x20000399
 80a0220:	2000041c 	.word	0x2000041c
 80a0224:	200008c0 	.word	0x200008c0
 80a0228:	080a1ad0 	.word	0x080a1ad0

080a022c <_Z19update_touch_sensorv>:
    touch_sensors[s].last_changed = millis();
  }
}

void update_touch_sensor()
{
 80a022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t touched = touch_sensor.touched();
 80a022e:	480d      	ldr	r0, [pc, #52]	; (80a0264 <_Z19update_touch_sensorv+0x38>)
 80a0230:	f000 faa3 	bl	80a077a <_ZN15Adafruit_MPR1217touchedEv>
 80a0234:	4607      	mov	r7, r0
  for (uint8_t i = 0; i < TOUCH_SENSOR_COUNT; i++)
  {
    bool is_touched = touched & _BV(i);
    if (is_touched != touch_sensors[i].is_touched)
 80a0236:	4d0c      	ldr	r5, [pc, #48]	; (80a0268 <_Z19update_touch_sensorv+0x3c>)
  }
}

void update_touch_sensor()
{
  uint16_t touched = touch_sensor.touched();
 80a0238:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < TOUCH_SENSOR_COUNT; i++)
  {
    bool is_touched = touched & _BV(i);
 80a023a:	fa47 f304 	asr.w	r3, r7, r4
    if (is_touched != touch_sensors[i].is_touched)
 80a023e:	f815 2034 	ldrb.w	r2, [r5, r4, lsl #3]
void update_touch_sensor()
{
  uint16_t touched = touch_sensor.touched();
  for (uint8_t i = 0; i < TOUCH_SENSOR_COUNT; i++)
  {
    bool is_touched = touched & _BV(i);
 80a0242:	f003 0301 	and.w	r3, r3, #1
    if (is_touched != touch_sensors[i].is_touched)
 80a0246:	429a      	cmp	r2, r3
 80a0248:	ea4f 06c4 	mov.w	r6, r4, lsl #3
 80a024c:	d005      	beq.n	80a025a <_Z19update_touch_sensorv+0x2e>
    {
      touch_sensors[i].is_touched = is_touched;
 80a024e:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
 80a0252:	f000 fc11 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
      touch_sensors[i].last_changed = millis();
 80a0256:	442e      	add	r6, r5
 80a0258:	6070      	str	r0, [r6, #4]
 80a025a:	3401      	adds	r4, #1
}

void update_touch_sensor()
{
  uint16_t touched = touch_sensor.touched();
  for (uint8_t i = 0; i < TOUCH_SENSOR_COUNT; i++)
 80a025c:	2c0c      	cmp	r4, #12
 80a025e:	d1ec      	bne.n	80a023a <_Z19update_touch_sensorv+0xe>
    {
      touch_sensors[i].is_touched = is_touched;
      touch_sensors[i].last_changed = millis();
    }
  }
}
 80a0260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0262:	bf00      	nop
 80a0264:	20000398 	.word	0x20000398
 80a0268:	200003b4 	.word	0x200003b4

080a026c <_Z19check_dfu_triggeredv>:

bool check_dfu_triggered()
{
 80a026c:	b510      	push	{r4, lr}
  long ms = millis();
  for (uint8_t s = 0; s < 3; s += 1)
  {
    if (!touch_sensors[s].is_touched)
 80a026e:	4c09      	ldr	r4, [pc, #36]	; (80a0294 <_Z19check_dfu_triggeredv+0x28>)
 80a0270:	f000 fc02 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
  }
}

bool check_dfu_triggered()
{
  long ms = millis();
 80a0274:	2300      	movs	r3, #0
  for (uint8_t s = 0; s < 3; s += 1)
  {
    if (!touch_sensors[s].is_touched)
 80a0276:	5d1a      	ldrb	r2, [r3, r4]
 80a0278:	b152      	cbz	r2, 80a0290 <_Z19check_dfu_triggeredv+0x24>
    {
      return false;
    }
    if (ms - touch_sensors[s].last_changed < 2000)
 80a027a:	18e1      	adds	r1, r4, r3
 80a027c:	6849      	ldr	r1, [r1, #4]
 80a027e:	1a41      	subs	r1, r0, r1
 80a0280:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 80a0284:	db03      	blt.n	80a028e <_Z19check_dfu_triggeredv+0x22>
 80a0286:	3308      	adds	r3, #8
}

bool check_dfu_triggered()
{
  long ms = millis();
  for (uint8_t s = 0; s < 3; s += 1)
 80a0288:	2b18      	cmp	r3, #24
 80a028a:	d1f4      	bne.n	80a0276 <_Z19check_dfu_triggeredv+0xa>
 80a028c:	e000      	b.n	80a0290 <_Z19check_dfu_triggeredv+0x24>
  {
    if (!touch_sensors[s].is_touched)
    {
      return false;
 80a028e:	2200      	movs	r2, #0
    {
      return false;
    }
  }
  return true;
}
 80a0290:	4610      	mov	r0, r2
 80a0292:	bd10      	pop	{r4, pc}
 80a0294:	200003b4 	.word	0x200003b4

080a0298 <_Z22check_reboot_triggeredv>:

bool check_reboot_triggered()
{
 80a0298:	b510      	push	{r4, lr}
 80a029a:	4c09      	ldr	r4, [pc, #36]	; (80a02c0 <_Z22check_reboot_triggeredv+0x28>)
 80a029c:	f000 fbec 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
  long ms = millis();
 80a02a0:	2300      	movs	r3, #0
 80a02a2:	18e1      	adds	r1, r4, r3
  for (uint8_t s = 3; s < 6; s += 1)
  {
    if (!touch_sensors[s].is_touched)
 80a02a4:	7e0a      	ldrb	r2, [r1, #24]
 80a02a6:	b14a      	cbz	r2, 80a02bc <_Z22check_reboot_triggeredv+0x24>
    {
      return false;
    }
    if (ms - touch_sensors[s].last_changed < 2000)
 80a02a8:	69c9      	ldr	r1, [r1, #28]
 80a02aa:	1a41      	subs	r1, r0, r1
 80a02ac:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 80a02b0:	db03      	blt.n	80a02ba <_Z22check_reboot_triggeredv+0x22>
 80a02b2:	3308      	adds	r3, #8
}

bool check_reboot_triggered()
{
  long ms = millis();
  for (uint8_t s = 3; s < 6; s += 1)
 80a02b4:	2b18      	cmp	r3, #24
 80a02b6:	d1f4      	bne.n	80a02a2 <_Z22check_reboot_triggeredv+0xa>
 80a02b8:	e000      	b.n	80a02bc <_Z22check_reboot_triggeredv+0x24>
  {
    if (!touch_sensors[s].is_touched)
    {
      return false;
 80a02ba:	2200      	movs	r2, #0
    {
      return false;
    }
  }
  return true;
}
 80a02bc:	4610      	mov	r0, r2
 80a02be:	bd10      	pop	{r4, pc}
 80a02c0:	200003b4 	.word	0x200003b4

080a02c4 <loop>:
  init_touch_sensor();
  WiFi.connect();
  Serial.printf("Hello, world!");
}

void loop() {
 80a02c4:	b570      	push	{r4, r5, r6, lr}
  update_touch_sensor();
 80a02c6:	f7ff ffb1 	bl	80a022c <_Z19update_touch_sensorv>
  if (check_dfu_triggered())
 80a02ca:	f7ff ffcf 	bl	80a026c <_Z19check_dfu_triggeredv>
 80a02ce:	b118      	cbz	r0, 80a02d8 <loop+0x14>
  {
    System.dfu();
 80a02d0:	2000      	movs	r0, #0
 80a02d2:	f000 ff76 	bl	80a11c2 <_ZN11SystemClass3dfuEb>
 80a02d6:	e004      	b.n	80a02e2 <loop+0x1e>
  }
  else if (check_reboot_triggered())
 80a02d8:	f7ff ffde 	bl	80a0298 <_Z22check_reboot_triggeredv>
 80a02dc:	b108      	cbz	r0, 80a02e2 <loop+0x1e>
  {
    System.reset();
 80a02de:	f000 ff77 	bl	80a11d0 <_ZN11SystemClass5resetEv>
 80a02e2:	4e11      	ldr	r6, [pc, #68]	; (80a0328 <loop+0x64>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a02e4:	2200      	movs	r2, #0
 80a02e6:	4611      	mov	r1, r2
 80a02e8:	6870      	ldr	r0, [r6, #4]
 80a02ea:	f000 fd0b 	bl	80a0d04 <network_ready>
 80a02ee:	4c0f      	ldr	r4, [pc, #60]	; (80a032c <loop+0x68>)
  }
  
  if (WiFi.ready()) {
 80a02f0:	4605      	mov	r5, r0
 80a02f2:	b128      	cbz	r0, 80a0300 <loop+0x3c>
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a02f4:	2300      	movs	r3, #0
        g = (colorcode >>  8) & 0xFF;
 80a02f6:	2280      	movs	r2, #128	; 0x80
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a02f8:	70e3      	strb	r3, [r4, #3]
        g = (colorcode >>  8) & 0xFF;
 80a02fa:	7122      	strb	r2, [r4, #4]
        b = (colorcode >>  0) & 0xFF;
 80a02fc:	7163      	strb	r3, [r4, #5]
 80a02fe:	e00d      	b.n	80a031c <loop+0x58>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0300:	4602      	mov	r2, r0
 80a0302:	4601      	mov	r1, r0
 80a0304:	6870      	ldr	r0, [r6, #4]
 80a0306:	f000 fced 	bl	80a0ce4 <network_connecting>
 80a030a:	23ff      	movs	r3, #255	; 0xff
    }

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
 80a030c:	70e3      	strb	r3, [r4, #3]
    leds[STATUS_LED_WIFI] = CRGB::Green;
  } else if (WiFi.connecting()) {
 80a030e:	b118      	cbz	r0, 80a0318 <loop+0x54>
        g = (colorcode >>  8) & 0xFF;
 80a0310:	23a5      	movs	r3, #165	; 0xa5
 80a0312:	7123      	strb	r3, [r4, #4]
        b = (colorcode >>  0) & 0xFF;
 80a0314:	7165      	strb	r5, [r4, #5]
 80a0316:	e001      	b.n	80a031c <loop+0x58>

    // allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
 80a0318:	7120      	strb	r0, [r4, #4]
        b = (colorcode >>  0) & 0xFF;
 80a031a:	7160      	strb	r0, [r4, #5]
 80a031c:	4804      	ldr	r0, [pc, #16]	; (80a0330 <loop+0x6c>)
    leds[STATUS_LED_WIFI] = CRGB::Orange;
  } else {
    leds[STATUS_LED_WIFI] = CRGB::Red;
  }
  FastLED.show();
}
 80a031e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0322:	7801      	ldrb	r1, [r0, #0]
 80a0324:	f000 bb1e 	b.w	80a0964 <_ZN9NSFastLED8CFastLED4showEh>
 80a0328:	200008c0 	.word	0x200008c0
 80a032c:	20000399 	.word	0x20000399
 80a0330:	2000041c 	.word	0x2000041c

080a0334 <_ZN9NSFastLED8CMinWaitILi50EE4waitEv>:

	void wait() { 
 80a0334:	b510      	push	{r4, lr}
 80a0336:	4604      	mov	r4, r0
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0338:	f000 fb96 	bl	80a0a68 <HAL_Timer_Get_Micro_Seconds>
		uint16_t diff;
		do {
 80a033c:	8823      	ldrh	r3, [r4, #0]
 80a033e:	1ac0      	subs	r0, r0, r3
 80a0340:	b280      	uxth	r0, r0
 80a0342:	2831      	cmp	r0, #49	; 0x31
 80a0344:	d9f8      	bls.n	80a0338 <_ZN9NSFastLED8CMinWaitILi50EE4waitEv+0x4>
			diff = (micros() & 0xFFFF) - mLastMicros;			
		} while(diff < WAIT);
	}
 80a0346:	bd10      	pop	{r4, pc}

080a0348 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE>:
    }
  }

  // This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
  // gcc will use register Y for the this pointer.
  static uint32_t showRGBInternal(PixelController<RGB_ORDER> & pixels) {
 80a0348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Get access to the clock
    CoreDebug->DEMCR  |= CoreDebug_DEMCR_TRCENA_Msk;
 80a034c:	4a8a      	ldr	r2, [pc, #552]	; (80a0578 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x230>)
 80a034e:	68d3      	ldr	r3, [r2, #12]
 80a0350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80a0354:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80a0356:	4b89      	ldr	r3, [pc, #548]	; (80a057c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x234>)
 80a0358:	681a      	ldr	r2, [r3, #0]
 80a035a:	f042 0201 	orr.w	r2, r2, #1
 80a035e:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 80a0360:	2200      	movs	r2, #0
 80a0362:	605a      	str	r2, [r3, #4]

    register data_ptr_t port = FastPin<DATA_PIN>::port();
    register data_t hi = *port | FastPin<DATA_PIN>::mask();;
 80a0364:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80a0368:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80a036c:	695c      	ldr	r4, [r3, #20]
    register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
 80a036e:	695a      	ldr	r2, [r3, #20]
    CoreDebug->DEMCR  |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    DWT->CYCCNT = 0;

    register data_ptr_t port = FastPin<DATA_PIN>::port();
    register data_t hi = *port | FastPin<DATA_PIN>::mask();;
 80a0370:	f044 0420 	orr.w	r4, r4, #32
    register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
 80a0374:	f022 0220 	bic.w	r2, r2, #32
    *port = lo;
 80a0378:	615a      	str	r2, [r3, #20]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
 80a037a:	7a45      	ldrb	r5, [r0, #9]
 80a037c:	7b01      	ldrb	r1, [r0, #12]
 80a037e:	1b49      	subs	r1, r1, r5
 80a0380:	b2c9      	uxtb	r1, r1
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
 80a0382:	6805      	ldr	r5, [r0, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
 80a0384:	7241      	strb	r1, [r0, #9]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
 80a0386:	786d      	ldrb	r5, [r5, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
 80a0388:	b125      	cbz	r5, 80a0394 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x4c>

// qadd8: add one byte to another, saturating at 0xFF
LIB8STATIC uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
 80a038a:	4429      	add	r1, r5
 80a038c:	29ff      	cmp	r1, #255	; 0xff
 80a038e:	bfa8      	it	ge
 80a0390:	21ff      	movge	r1, #255	; 0xff
    if( t > 255) t = 255;
    return t;
 80a0392:	b2cd      	uxtb	r5, r1
//         In other words, it computes i * (scale / 256)
//         4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
 80a0394:	7bc1      	ldrb	r1, [r0, #15]
 80a0396:	4369      	muls	r1, r5
 80a0398:	f3c1 2907 	ubfx	r9, r1, #8, #8
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a039c:	b672      	cpsid	i
    This function disables FIQ interrupts by setting the F-bit in the CPSR.
    Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
{
  __ASM volatile ("cpsid f");
 80a039e:	b671      	cpsid	f

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
 80a03a0:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80a0580 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x238>

    cli();

    uint32_t next_mark = (T1+T2+T3);

    DWT->CYCCNT = 0;
 80a03a4:	4975      	ldr	r1, [pc, #468]	; (80a057c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x234>)
 80a03a6:	2500      	movs	r5, #0

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
 80a03a8:	2604      	movs	r6, #4

    cli();

    uint32_t next_mark = (T1+T2+T3);

    DWT->CYCCNT = 0;
 80a03aa:	604d      	str	r5, [r1, #4]
 80a03ac:	46f0      	mov	r8, lr
 80a03ae:	4675      	mov	r5, lr
 80a03b0:	4671      	mov	r1, lr

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
 80a03b2:	46b4      	mov	ip, r6
    cli();

    uint32_t next_mark = (T1+T2+T3);

    DWT->CYCCNT = 0;
    while(pixels.has(1)) {
 80a03b4:	6847      	ldr	r7, [r0, #4]
 80a03b6:	2f00      	cmp	r7, #0
 80a03b8:	f340 80d7 	ble.w	80a056a <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x222>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
         		// IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
         		// clockless_trinket.h!
                d[0] = e[0] - d[0];
 80a03bc:	f890 a008 	ldrb.w	sl, [r0, #8]
 80a03c0:	7ac7      	ldrb	r7, [r0, #11]
 80a03c2:	ebca 0707 	rsb	r7, sl, r7
 80a03c6:	7207      	strb	r7, [r0, #8]
                d[1] = e[1] - d[1];
 80a03c8:	f890 a009 	ldrb.w	sl, [r0, #9]
 80a03cc:	7b07      	ldrb	r7, [r0, #12]
 80a03ce:	ebca 0707 	rsb	r7, sl, r7
 80a03d2:	7247      	strb	r7, [r0, #9]
                d[2] = e[2] - d[2];
 80a03d4:	f890 a00a 	ldrb.w	sl, [r0, #10]
 80a03d8:	7b47      	ldrb	r7, [r0, #13]
 80a03da:	ebca 0707 	rsb	r7, sl, r7
 80a03de:	7287      	strb	r7, [r0, #10]
 80a03e0:	2707      	movs	r7, #7

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
 80a03e2:	f8de a000 	ldr.w	sl, [lr]
 80a03e6:	f1ba 0f8d 	cmp.w	sl, #141	; 0x8d
 80a03ea:	d9fa      	bls.n	80a03e2 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x9a>
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
      if(b&0x80) {
 80a03ec:	f019 0f80 	tst.w	r9, #128	; 0x80

  inline static void toggle() __attribute__ ((always_inline)) { if(_GPIO::r()->ODR & _MASK) { lo(); } else { hi(); } }

  inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }
  inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }
  inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }
 80a03f0:	615c      	str	r4, [r3, #20]

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
 80a03f2:	602e      	str	r6, [r5, #0]
      if(b&0x80) {
 80a03f4:	d005      	beq.n	80a0402 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xba>
        while(_CYCCNT < (T1+T2-ADJ));
 80a03f6:	f8d8 a000 	ldr.w	sl, [r8]
 80a03fa:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80a03fe:	d9fa      	bls.n	80a03f6 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xae>
 80a0400:	e004      	b.n	80a040c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xc4>
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
 80a0402:	f8d8 a000 	ldr.w	sl, [r8]
 80a0406:	f1ba 0f19 	cmp.w	sl, #25
 80a040a:	d9fa      	bls.n	80a0402 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xba>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a040c:	ea4f 0949 	mov.w	r9, r9, lsl #1
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a0410:	3f01      	subs	r7, #1
 80a0412:	615a      	str	r2, [r3, #20]
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a0414:	fa5f f989 	uxtb.w	r9, r9
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a0418:	d1e3      	bne.n	80a03e2 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x9a>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
 80a041a:	680f      	ldr	r7, [r1, #0]
 80a041c:	2f8d      	cmp	r7, #141	; 0x8d
 80a041e:	d9fc      	bls.n	80a041a <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xd2>
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;

    if(b&0x80) {
 80a0420:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a0424:	615c      	str	r4, [r3, #20]
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;
 80a0426:	602e      	str	r6, [r5, #0]

    if(b&0x80) {
 80a0428:	d003      	beq.n	80a0432 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xea>
      while(_CYCCNT < (T1+T2-ADJ));
 80a042a:	680f      	ldr	r7, [r1, #0]
 80a042c:	2f60      	cmp	r7, #96	; 0x60
 80a042e:	d9fc      	bls.n	80a042a <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xe2>
 80a0430:	e002      	b.n	80a0438 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xf0>
      FastPin<DATA_PIN>::fastset(port, lo);
    } else {
      while(_CYCCNT < (T1-(ADJ/2)));
 80a0432:	680f      	ldr	r7, [r1, #0]
 80a0434:	2f19      	cmp	r7, #25
 80a0436:	d9fc      	bls.n	80a0432 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0xea>
 80a0438:	615a      	str	r2, [r3, #20]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
 80a043a:	6807      	ldr	r7, [r0, #0]
 80a043c:	783f      	ldrb	r7, [r7, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
 80a043e:	b137      	cbz	r7, 80a044e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x106>

// qadd8: add one byte to another, saturating at 0xFF
LIB8STATIC uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
 80a0440:	f890 9008 	ldrb.w	r9, [r0, #8]
 80a0444:	444f      	add	r7, r9
 80a0446:	2fff      	cmp	r7, #255	; 0xff
 80a0448:	bfa8      	it	ge
 80a044a:	27ff      	movge	r7, #255	; 0xff
    if( t > 255) t = 255;
    return t;
 80a044c:	b2ff      	uxtb	r7, r7
//         In other words, it computes i * (scale / 256)
//         4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
 80a044e:	f890 900e 	ldrb.w	r9, [r0, #14]
 80a0452:	fb07 f709 	mul.w	r7, r7, r9
 80a0456:	f04f 0907 	mov.w	r9, #7
 80a045a:	f3c7 2707 	ubfx	r7, r7, #8, #8

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
 80a045e:	f8d1 a000 	ldr.w	sl, [r1]
 80a0462:	f1ba 0f8d 	cmp.w	sl, #141	; 0x8d
 80a0466:	d9fa      	bls.n	80a045e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x116>
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
      if(b&0x80) {
 80a0468:	f017 0f80 	tst.w	r7, #128	; 0x80
 80a046c:	615c      	str	r4, [r3, #20]

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
 80a046e:	f8c5 c000 	str.w	ip, [r5]
      if(b&0x80) {
 80a0472:	d005      	beq.n	80a0480 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x138>
        while(_CYCCNT < (T1+T2-ADJ));
 80a0474:	f8d1 a000 	ldr.w	sl, [r1]
 80a0478:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80a047c:	d9fa      	bls.n	80a0474 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x12c>
 80a047e:	e004      	b.n	80a048a <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x142>
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
 80a0480:	f8d1 a000 	ldr.w	sl, [r1]
 80a0484:	f1ba 0f19 	cmp.w	sl, #25
 80a0488:	d9fa      	bls.n	80a0480 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x138>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a048a:	007f      	lsls	r7, r7, #1
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a048c:	f1b9 0901 	subs.w	r9, r9, #1
 80a0490:	615a      	str	r2, [r3, #20]
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a0492:	b2ff      	uxtb	r7, r7
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a0494:	d1e3      	bne.n	80a045e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x116>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
 80a0496:	f8d1 9000 	ldr.w	r9, [r1]
 80a049a:	f1b9 0f8d 	cmp.w	r9, #141	; 0x8d
 80a049e:	d9fa      	bls.n	80a0496 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x14e>
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;

    if(b&0x80) {
 80a04a0:	063f      	lsls	r7, r7, #24
 80a04a2:	615c      	str	r4, [r3, #20]
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;
 80a04a4:	602e      	str	r6, [r5, #0]

    if(b&0x80) {
 80a04a6:	d503      	bpl.n	80a04b0 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x168>
      while(_CYCCNT < (T1+T2-ADJ));
 80a04a8:	680f      	ldr	r7, [r1, #0]
 80a04aa:	2f60      	cmp	r7, #96	; 0x60
 80a04ac:	d9fc      	bls.n	80a04a8 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x160>
 80a04ae:	e002      	b.n	80a04b6 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x16e>
      FastPin<DATA_PIN>::fastset(port, lo);
    } else {
      while(_CYCCNT < (T1-(ADJ/2)));
 80a04b0:	680f      	ldr	r7, [r1, #0]
 80a04b2:	2f19      	cmp	r7, #25
 80a04b4:	d9fc      	bls.n	80a04b0 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x168>
 80a04b6:	615a      	str	r2, [r3, #20]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
 80a04b8:	6807      	ldr	r7, [r0, #0]
 80a04ba:	78bf      	ldrb	r7, [r7, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
 80a04bc:	b137      	cbz	r7, 80a04cc <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x184>

// qadd8: add one byte to another, saturating at 0xFF
LIB8STATIC uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
 80a04be:	f890 900a 	ldrb.w	r9, [r0, #10]
 80a04c2:	444f      	add	r7, r9
 80a04c4:	2fff      	cmp	r7, #255	; 0xff
 80a04c6:	bfa8      	it	ge
 80a04c8:	27ff      	movge	r7, #255	; 0xff
    if( t > 255) t = 255;
    return t;
 80a04ca:	b2ff      	uxtb	r7, r7
//         In other words, it computes i * (scale / 256)
//         4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
 80a04cc:	f890 9010 	ldrb.w	r9, [r0, #16]
 80a04d0:	fb07 f709 	mul.w	r7, r7, r9
 80a04d4:	f04f 0907 	mov.w	r9, #7
 80a04d8:	f3c7 2707 	ubfx	r7, r7, #8, #8

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
 80a04dc:	f8d1 a000 	ldr.w	sl, [r1]
 80a04e0:	f1ba 0f8d 	cmp.w	sl, #141	; 0x8d
 80a04e4:	d9fa      	bls.n	80a04dc <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x194>
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
      if(b&0x80) {
 80a04e6:	f017 0f80 	tst.w	r7, #128	; 0x80
 80a04ea:	615c      	str	r4, [r3, #20]

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
      while(_CYCCNT < (T1+T2+T3-ADJ));
      FastPin<DATA_PIN>::fastset(port, hi);
      _CYCCNT = 4;
 80a04ec:	f8c5 c000 	str.w	ip, [r5]
      if(b&0x80) {
 80a04f0:	d005      	beq.n	80a04fe <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1b6>
        while(_CYCCNT < (T1+T2-ADJ));
 80a04f2:	f8d1 a000 	ldr.w	sl, [r1]
 80a04f6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80a04fa:	d9fa      	bls.n	80a04f2 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1aa>
 80a04fc:	e004      	b.n	80a0508 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1c0>
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
 80a04fe:	f8d1 a000 	ldr.w	sl, [r1]
 80a0502:	f1ba 0f19 	cmp.w	sl, #25
 80a0506:	d9fa      	bls.n	80a04fe <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1b6>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a0508:	007f      	lsls	r7, r7, #1
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a050a:	f1b9 0901 	subs.w	r9, r9, #1
 80a050e:	615a      	str	r2, [r3, #20]
        FastPin<DATA_PIN>::fastset(port, lo);
      } else {
        while(_CYCCNT < (T1-(ADJ/2)));
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
 80a0510:	b2ff      	uxtb	r7, r7
  #endif

#define _CYCCNT (*(volatile uint32_t*)(0xE0001004UL))

  template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
    for(register uint32_t i = BITS-1; i > 0; i--) {
 80a0512:	d1e3      	bne.n	80a04dc <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x194>
        FastPin<DATA_PIN>::fastset(port, lo);
      }
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
 80a0514:	f8d1 9000 	ldr.w	r9, [r1]
 80a0518:	f1b9 0f8d 	cmp.w	r9, #141	; 0x8d
 80a051c:	d9fa      	bls.n	80a0514 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1cc>
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;

    if(b&0x80) {
 80a051e:	063f      	lsls	r7, r7, #24
 80a0520:	615c      	str	r4, [r3, #20]
      b <<= 1;
    }

    while(_CYCCNT < (T1+T2+T3-ADJ));
    FastPin<DATA_PIN>::fastset(port, hi);
    _CYCCNT = 4;
 80a0522:	602e      	str	r6, [r5, #0]

    if(b&0x80) {
 80a0524:	d503      	bpl.n	80a052e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1e6>
      while(_CYCCNT < (T1+T2-ADJ));
 80a0526:	680f      	ldr	r7, [r1, #0]
 80a0528:	2f60      	cmp	r7, #96	; 0x60
 80a052a:	d9fc      	bls.n	80a0526 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1de>
 80a052c:	e002      	b.n	80a0534 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1ec>
      FastPin<DATA_PIN>::fastset(port, lo);
    } else {
      while(_CYCCNT < (T1-(ADJ/2)));
 80a052e:	680f      	ldr	r7, [r1, #0]
 80a0530:	2f19      	cmp	r7, #25
 80a0532:	d9fc      	bls.n	80a052e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x1e6>
 80a0534:	615a      	str	r2, [r3, #20]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLen--;}
 80a0536:	6807      	ldr	r7, [r0, #0]
 80a0538:	f890 9011 	ldrb.w	r9, [r0, #17]
 80a053c:	44b9      	add	r9, r7
 80a053e:	6847      	ldr	r7, [r0, #4]
 80a0540:	f8c0 9000 	str.w	r9, [r0]
 80a0544:	3f01      	subs	r7, #1
 80a0546:	6047      	str	r7, [r0, #4]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
 80a0548:	f899 7001 	ldrb.w	r7, [r9, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
 80a054c:	b137      	cbz	r7, 80a055c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x214>

// qadd8: add one byte to another, saturating at 0xFF
LIB8STATIC uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
 80a054e:	f890 9009 	ldrb.w	r9, [r0, #9]
 80a0552:	444f      	add	r7, r9
 80a0554:	2fff      	cmp	r7, #255	; 0xff
 80a0556:	bfa8      	it	ge
 80a0558:	27ff      	movge	r7, #255	; 0xff
    if( t > 255) t = 255;
    return t;
 80a055a:	b2ff      	uxtb	r7, r7
//         In other words, it computes i * (scale / 256)
//         4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
    return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
 80a055c:	f890 900f 	ldrb.w	r9, [r0, #15]
 80a0560:	fb07 f909 	mul.w	r9, r7, r9
 80a0564:	f3c9 2907 	ubfx	r9, r9, #8, #8
    cli();

    uint32_t next_mark = (T1+T2+T3);

    DWT->CYCCNT = 0;
    while(pixels.has(1)) {
 80a0568:	e724      	b.n	80a03b4 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x6c>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a056a:	b662      	cpsie	i
    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
    Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
{
  __ASM volatile ("cpsie f");
 80a056c:	b661      	cpsie	f
      sei();
      #endif
    };

    sei();
    return DWT->CYCCNT;
 80a056e:	4b03      	ldr	r3, [pc, #12]	; (80a057c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE+0x234>)
 80a0570:	6858      	ldr	r0, [r3, #4]
  }
 80a0572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0576:	bf00      	nop
 80a0578:	e000edf0 	.word	0xe000edf0
 80a057c:	e0001000 	.word	0xe0001000
 80a0580:	e0001004 	.word	0xe0001004

080a0584 <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv>:
            mData += 1;
            mAdvance = 4;
        }
#endif

        void init_binary_dithering() {
 80a0584:	b530      	push	{r4, r5, lr}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static byte R = 0;
            R++;
 80a0586:	4b17      	ldr	r3, [pc, #92]	; (80a05e4 <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv+0x60>)
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
 80a0588:	f44f 7580 	mov.w	r5, #256	; 0x100
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
 80a058c:	781a      	ldrb	r2, [r3, #0]
 80a058e:	3201      	adds	r2, #1
 80a0590:	f002 0207 	and.w	r2, r2, #7
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
 80a0594:	f012 0f01 	tst.w	r2, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            byte ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
 80a0598:	701a      	strb	r2, [r3, #0]
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            byte Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
 80a059a:	bf0c      	ite	eq
 80a059c:	2300      	moveq	r3, #0
 80a059e:	2380      	movne	r3, #128	; 0x80
                if(R & 0x02) { Q |= 0x40; }
 80a05a0:	0791      	lsls	r1, r2, #30
 80a05a2:	bf44      	itt	mi
 80a05a4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80a05a8:	b2db      	uxtbmi	r3, r3
                if(R & 0x04) { Q |= 0x20; }
 80a05aa:	0752      	lsls	r2, r2, #29
 80a05ac:	bf48      	it	mi
 80a05ae:	f043 0320 	orrmi.w	r3, r3, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
 80a05b2:	3310      	adds	r3, #16
 80a05b4:	f100 010a 	add.w	r1, r0, #10
 80a05b8:	b2da      	uxtb	r2, r3
 80a05ba:	300d      	adds	r0, #13
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
 80a05bc:	790b      	ldrb	r3, [r1, #4]
                    e[i] = s ? (256/s) + 1 : 0;
 80a05be:	b11b      	cbz	r3, 80a05c8 <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv+0x44>
 80a05c0:	fb95 f3f3 	sdiv	r3, r5, r3
 80a05c4:	3301      	adds	r3, #1
 80a05c6:	b2db      	uxtb	r3, r3
                    d[i] = scale8(Q, e[i]);
 80a05c8:	fb03 f402 	mul.w	r4, r3, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    byte s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
 80a05cc:	f801 3f01 	strb.w	r3, [r1, #1]!
                    d[i] = scale8(Q, e[i]);
 80a05d0:	1224      	asrs	r4, r4, #8
 80a05d2:	f801 4c03 	strb.w	r4, [r1, #-3]
                    if(e[i]) e[i]--;
 80a05d6:	b10b      	cbz	r3, 80a05dc <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv+0x58>
 80a05d8:	3b01      	subs	r3, #1
 80a05da:	700b      	strb	r3, [r1, #0]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
 80a05dc:	4288      	cmp	r0, r1
 80a05de:	d1ed      	bne.n	80a05bc <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv+0x38>
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
                    if(e[i]) e[i]--;
            }
#endif
        }
 80a05e0:	bd30      	pop	{r4, r5, pc}
 80a05e2:	bf00      	nop
 80a05e4:	2000036c 	.word	0x2000036c

080a05e8 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE9showColorERKNS_4CRGBEiS3_>:
  }

protected:

  // set all the leds on the controller to a given color
  virtual void showColor(const struct CRGB & rgbdata, int nLeds, CRGB scale) {
 80a05e8:	b510      	push	{r4, lr}
 80a05ea:	b086      	sub	sp, #24
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
 80a05ec:	9202      	str	r2, [sp, #8]
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
 80a05ee:	781a      	ldrb	r2, [r3, #0]
 80a05f0:	4604      	mov	r4, r0
 80a05f2:	7c80      	ldrb	r0, [r0, #18]
 80a05f4:	f88d 2012 	strb.w	r2, [sp, #18]
        g = rhs.g;
 80a05f8:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
 80a05fa:	789b      	ldrb	r3, [r3, #2]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
 80a05fc:	2801      	cmp	r0, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
 80a05fe:	9101      	str	r1, [sp, #4]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
 80a0600:	f88d 2013 	strb.w	r2, [sp, #19]
        b = rhs.b;
 80a0604:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
 80a0608:	d103      	bne.n	80a0612 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE9showColorERKNS_4CRGBEiS3_+0x2a>
                case BINARY_DITHER: init_binary_dithering(); break;
 80a060a:	a801      	add	r0, sp, #4
 80a060c:	f7ff ffba 	bl	80a0584 <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv>
 80a0610:	e00c      	b.n	80a062c <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE9showColorERKNS_4CRGBEiS3_+0x44>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
 80a0612:	2300      	movs	r3, #0
 80a0614:	f88d 3011 	strb.w	r3, [sp, #17]
 80a0618:	f88d 3010 	strb.w	r3, [sp, #16]
 80a061c:	f88d 300f 	strb.w	r3, [sp, #15]
 80a0620:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0624:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0628:	f88d 300c 	strb.w	r3, [sp, #12]
            mAdvance = 3;
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
 80a062c:	2300      	movs	r3, #0
    PixelController<RGB_ORDER> pixels(rgbdata, nLeds, scale, getDither());

    mWait.wait();
 80a062e:	f104 0020 	add.w	r0, r4, #32
 80a0632:	f88d 3015 	strb.w	r3, [sp, #21]
 80a0636:	f7ff fe7d 	bl	80a0334 <_ZN9NSFastLED8CMinWaitILi50EE4waitEv>
    showRGBInternal(pixels);
 80a063a:	a801      	add	r0, sp, #4
 80a063c:	f7ff fe84 	bl	80a0348 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE>
 80a0640:	f000 fa12 	bl	80a0a68 <HAL_Timer_Get_Micro_Seconds>

	void mark() { mLastMicros = micros() & 0xFFFF; }
 80a0644:	8420      	strh	r0, [r4, #32]
    mWait.mark();
  }
 80a0646:	b006      	add	sp, #24
 80a0648:	bd10      	pop	{r4, pc}

080a064a <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE4showEPKNS_4CRGBEiS3_>:

  virtual void show(const struct CRGB *rgbdata, int nLeds, CRGB scale) {
 80a064a:	b510      	push	{r4, lr}
 80a064c:	b086      	sub	sp, #24
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
 80a064e:	9202      	str	r2, [sp, #8]
    }

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
 80a0650:	781a      	ldrb	r2, [r3, #0]
 80a0652:	4604      	mov	r4, r0
 80a0654:	7c80      	ldrb	r0, [r0, #18]
 80a0656:	f88d 2012 	strb.w	r2, [sp, #18]
        g = rhs.g;
 80a065a:	785a      	ldrb	r2, [r3, #1]
        b = rhs.b;
 80a065c:	789b      	ldrb	r3, [r3, #2]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
 80a065e:	2801      	cmp	r0, #1
            enable_dithering(dither);
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
 80a0660:	9101      	str	r1, [sp, #4]

    // allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
 80a0662:	f88d 2013 	strb.w	r2, [sp, #19]
        b = rhs.b;
 80a0666:	f88d 3014 	strb.w	r3, [sp, #20]
            return mLen >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
 80a066a:	d103      	bne.n	80a0674 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE4showEPKNS_4CRGBEiS3_+0x2a>
                case BINARY_DITHER: init_binary_dithering(); break;
 80a066c:	a801      	add	r0, sp, #4
 80a066e:	f7ff ff89 	bl	80a0584 <_ZN9NSFastLED15PixelControllerILNS_6EOrderE66EE21init_binary_ditheringEv>
 80a0672:	e00c      	b.n	80a068e <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE4showEPKNS_4CRGBEiS3_+0x44>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
 80a0674:	2300      	movs	r3, #0
 80a0676:	f88d 3011 	strb.w	r3, [sp, #17]
 80a067a:	f88d 3010 	strb.w	r3, [sp, #16]
 80a067e:	f88d 300f 	strb.w	r3, [sp, #15]
 80a0682:	f88d 300e 	strb.w	r3, [sp, #14]
 80a0686:	f88d 300d 	strb.w	r3, [sp, #13]
 80a068a:	f88d 300c 	strb.w	r3, [sp, #12]
            mAdvance = (advance) ? 3+skip : 0;
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
 80a068e:	2303      	movs	r3, #3
    PixelController<RGB_ORDER> pixels(rgbdata, nLeds, scale, getDither());

    mWait.wait();
 80a0690:	f104 0020 	add.w	r0, r4, #32
 80a0694:	f88d 3015 	strb.w	r3, [sp, #21]
 80a0698:	f7ff fe4c 	bl	80a0334 <_ZN9NSFastLED8CMinWaitILi50EE4waitEv>
    showRGBInternal(pixels);
 80a069c:	a801      	add	r0, sp, #4
 80a069e:	f7ff fe53 	bl	80a0348 <_ZN9NSFastLED19ClocklessControllerILi2ELi30ELi75ELi45ELNS_6EOrderE66ELi0ELb0ELi50EE15showRGBInternalERNS_15PixelControllerILS1_66EEE>
 80a06a2:	f000 f9e1 	bl	80a0a68 <HAL_Timer_Get_Micro_Seconds>
 80a06a6:	8420      	strh	r0, [r4, #32]
    mWait.mark();
  }
 80a06a8:	b006      	add	sp, #24
 80a06aa:	bd10      	pop	{r4, pc}

080a06ac <_GLOBAL__sub_I_SystemMode>:
  return true;
}

void connect_wifi() {
  WiFi.connect();
 80a06ac:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a06ae:	f000 f9eb 	bl	80a0a88 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a06b2:	4b07      	ldr	r3, [pc, #28]	; (80a06d0 <_GLOBAL__sub_I_SystemMode+0x24>)
 80a06b4:	2200      	movs	r2, #0
 80a06b6:	701a      	strb	r2, [r3, #0]
 80a06b8:	805a      	strh	r2, [r3, #2]
 80a06ba:	f64f 72ff 	movw	r2, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06be:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a06c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06c2:	f000 fadb 	bl	80a0c7c <set_system_mode>
 80a06c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bool is_touched;
  long last_changed;
};

CRGB leds[LED_COUNT];
Adafruit_MPR121 touch_sensor = Adafruit_MPR121();
 80a06ca:	4802      	ldr	r0, [pc, #8]	; (80a06d4 <_GLOBAL__sub_I_SystemMode+0x28>)
 80a06cc:	f000 b804 	b.w	80a06d8 <_ZN15Adafruit_MPR121C1Ev>
 80a06d0:	20000414 	.word	0x20000414
 80a06d4:	20000398 	.word	0x20000398

080a06d8 <_ZN15Adafruit_MPR121C1Ev>:
 ****************************************************/

#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}
 80a06d8:	4770      	bx	lr

080a06da <_ZN15Adafruit_MPR12113readRegister8Eh>:
}

/*********************************************************************/


uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
 80a06da:	b538      	push	{r3, r4, r5, lr}
 80a06dc:	4604      	mov	r4, r0
 80a06de:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a06e0:	f000 ffe6 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a06e4:	f994 1000 	ldrsb.w	r1, [r4]
 80a06e8:	f000 fbbe 	bl	80a0e68 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a06ec:	f000 ffe0 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a06f0:	6803      	ldr	r3, [r0, #0]
 80a06f2:	4629      	mov	r1, r5
 80a06f4:	689b      	ldr	r3, [r3, #8]
 80a06f6:	4798      	blx	r3
    Wire.endTransmission(false);
 80a06f8:	f000 ffda 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a06fc:	2100      	movs	r1, #0
 80a06fe:	f000 fbb6 	bl	80a0e6e <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 1) != 1);
 80a0702:	f000 ffd5 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0706:	2201      	movs	r2, #1
 80a0708:	f994 1000 	ldrsb.w	r1, [r4]
 80a070c:	f000 fba3 	bl	80a0e56 <_ZN7TwoWire11requestFromEii>
 80a0710:	2801      	cmp	r0, #1
 80a0712:	d1f6      	bne.n	80a0702 <_ZN15Adafruit_MPR12113readRegister8Eh+0x28>
    return ( Wire.read());
 80a0714:	f000 ffcc 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0718:	6803      	ldr	r3, [r0, #0]
 80a071a:	695b      	ldr	r3, [r3, #20]
 80a071c:	4798      	blx	r3
}
 80a071e:	b2c0      	uxtb	r0, r0
 80a0720:	bd38      	pop	{r3, r4, r5, pc}

080a0722 <_ZN15Adafruit_MPR12114readRegister16Eh>:

uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
 80a0722:	b538      	push	{r3, r4, r5, lr}
 80a0724:	4604      	mov	r4, r0
 80a0726:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0728:	f000 ffc2 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a072c:	f994 1000 	ldrsb.w	r1, [r4]
 80a0730:	f000 fb9a 	bl	80a0e68 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(reg);
 80a0734:	f000 ffbc 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0738:	6803      	ldr	r3, [r0, #0]
 80a073a:	4629      	mov	r1, r5
 80a073c:	689b      	ldr	r3, [r3, #8]
 80a073e:	4798      	blx	r3
    Wire.endTransmission(false);
 80a0740:	f000 ffb6 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0744:	2100      	movs	r1, #0
 80a0746:	f000 fb92 	bl	80a0e6e <_ZN7TwoWire15endTransmissionEh>
    while (Wire.requestFrom(_i2caddr, 2) != 2);
 80a074a:	f000 ffb1 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a074e:	2202      	movs	r2, #2
 80a0750:	f994 1000 	ldrsb.w	r1, [r4]
 80a0754:	f000 fb7f 	bl	80a0e56 <_ZN7TwoWire11requestFromEii>
 80a0758:	2802      	cmp	r0, #2
 80a075a:	d1f6      	bne.n	80a074a <_ZN15Adafruit_MPR12114readRegister16Eh+0x28>
    uint16_t v = Wire.read();
 80a075c:	f000 ffa8 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0760:	6803      	ldr	r3, [r0, #0]
 80a0762:	695b      	ldr	r3, [r3, #20]
 80a0764:	4798      	blx	r3
 80a0766:	4604      	mov	r4, r0
    v |=  ((uint16_t) Wire.read()) << 8;
 80a0768:	f000 ffa2 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a076c:	6803      	ldr	r3, [r0, #0]
 80a076e:	695b      	ldr	r3, [r3, #20]
 80a0770:	4798      	blx	r3
    return v;
 80a0772:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
}
 80a0776:	b280      	uxth	r0, r0
 80a0778:	bd38      	pop	{r3, r4, r5, pc}

080a077a <_ZN15Adafruit_MPR1217touchedEv>:
  if (t > 12) return 0;
  uint16_t bl = readRegister8(MPR121_BASELINE_0 + t);
  return (bl << 2);
}

uint16_t  Adafruit_MPR121::touched(void) {
 80a077a:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
 80a077c:	2100      	movs	r1, #0
 80a077e:	f7ff ffd0 	bl	80a0722 <_ZN15Adafruit_MPR12114readRegister16Eh>
  return t & 0x0FFF;
}
 80a0782:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80a0786:	bd08      	pop	{r3, pc}

080a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
 80a0788:	b570      	push	{r4, r5, r6, lr}
 80a078a:	4606      	mov	r6, r0
 80a078c:	4614      	mov	r4, r2
 80a078e:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
 80a0790:	f000 ff8e 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a0794:	f996 1000 	ldrsb.w	r1, [r6]
 80a0798:	f000 fb66 	bl	80a0e68 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a079c:	f000 ff88 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a07a0:	6803      	ldr	r3, [r0, #0]
 80a07a2:	4629      	mov	r1, r5
 80a07a4:	689b      	ldr	r3, [r3, #8]
 80a07a6:	4798      	blx	r3
    Wire.write((uint8_t)(value));
 80a07a8:	f000 ff82 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a07ac:	6803      	ldr	r3, [r0, #0]
 80a07ae:	4621      	mov	r1, r4
 80a07b0:	689b      	ldr	r3, [r3, #8]
 80a07b2:	4798      	blx	r3
    Wire.endTransmission();
 80a07b4:	f000 ff7c 	bl	80a16b0 <_Z19__fetch_global_Wirev>
}
 80a07b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
    Wire.beginTransmission(_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)(value));
    Wire.endTransmission();
 80a07bc:	f000 bb5b 	b.w	80a0e76 <_ZN7TwoWire15endTransmissionEv>

080a07c0 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
 80a07c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07c2:	4605      	mov	r5, r0
 80a07c4:	460f      	mov	r7, r1
 80a07c6:	4616      	mov	r6, r2
 80a07c8:	2441      	movs	r4, #65	; 0x41
  for (uint8_t i=0; i<12; i++) {
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
 80a07ca:	4621      	mov	r1, r4
 80a07cc:	463a      	mov	r2, r7
 80a07ce:	4628      	mov	r0, r5
 80a07d0:	f7ff ffda 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
 80a07d4:	1c61      	adds	r1, r4, #1
 80a07d6:	3402      	adds	r4, #2
 80a07d8:	4632      	mov	r2, r6
 80a07da:	b2c9      	uxtb	r1, r1
 80a07dc:	4628      	mov	r0, r5
 80a07de:	b2e4      	uxtb	r4, r4
 80a07e0:	f7ff ffd2 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  setThresholds(touch, release);
  }

void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
  for (uint8_t i=0; i<12; i++) {
 80a07e4:	2c59      	cmp	r4, #89	; 0x59
 80a07e6:	d1f0      	bne.n	80a07ca <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
    writeRegister(MPR121_TOUCHTH_0 + 2*i, touch);
    writeRegister(MPR121_RELEASETH_0 + 2*i, release);
  }
}
 80a07e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07ea <_ZN15Adafruit_MPR1215beginEh>:
#include "Adafruit_MPR121.h"

Adafruit_MPR121::Adafruit_MPR121() {
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
 80a07ea:	b538      	push	{r3, r4, r5, lr}
 80a07ec:	4604      	mov	r4, r0
 80a07ee:	460d      	mov	r5, r1
  Wire.begin();
 80a07f0:	f000 ff5e 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a07f4:	f000 fb20 	bl	80a0e38 <_ZN7TwoWire5beginEv>
    
  _i2caddr = i2caddr;

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a07f8:	2263      	movs	r2, #99	; 0x63
 80a07fa:	2180      	movs	r1, #128	; 0x80
 80a07fc:	4620      	mov	r0, r4
}

boolean Adafruit_MPR121::begin(uint8_t i2caddr) {
  Wire.begin();
    
  _i2caddr = i2caddr;
 80a07fe:	7025      	strb	r5, [r4, #0]

  // soft reset
  writeRegister(MPR121_SOFTRESET, 0x63);
 80a0800:	f7ff ffc2 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
 80a0804:	2001      	movs	r0, #1
 80a0806:	f000 facd 	bl	80a0da4 <delay>
  //  Serial.print("$"); Serial.print(i, HEX); 
  //  Serial.print(": 0x"); Serial.println(readRegister8(i));
  }
  

  writeRegister(MPR121_ECR, 0x0);
 80a080a:	2200      	movs	r2, #0
 80a080c:	215e      	movs	r1, #94	; 0x5e
 80a080e:	4620      	mov	r0, r4
 80a0810:	f7ff ffba 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  uint8_t c = readRegister8(MPR121_CONFIG2);
 80a0814:	215d      	movs	r1, #93	; 0x5d
 80a0816:	4620      	mov	r0, r4
 80a0818:	f7ff ff5f 	bl	80a06da <_ZN15Adafruit_MPR12113readRegister8Eh>
  
  if (c != 0x24) return false;
 80a081c:	2824      	cmp	r0, #36	; 0x24
 80a081e:	d151      	bne.n	80a08c4 <_ZN15Adafruit_MPR1215beginEh+0xda>
  return true;
}

void Adafruit_MPR121::setThreshholds(uint8_t touch, uint8_t release) {

  setThresholds(touch, release);
 80a0820:	4620      	mov	r0, r4
 80a0822:	2206      	movs	r2, #6
 80a0824:	210c      	movs	r1, #12
 80a0826:	f7ff ffcb 	bl	80a07c0 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  
  if (c != 0x24) return false;


  setThreshholds(12, 6);
  writeRegister(MPR121_MHDR, 0x01);
 80a082a:	4620      	mov	r0, r4
 80a082c:	2201      	movs	r2, #1
 80a082e:	212b      	movs	r1, #43	; 0x2b
 80a0830:	f7ff ffaa 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
 80a0834:	4620      	mov	r0, r4
 80a0836:	2201      	movs	r2, #1
 80a0838:	212c      	movs	r1, #44	; 0x2c
 80a083a:	f7ff ffa5 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
 80a083e:	4620      	mov	r0, r4
 80a0840:	220e      	movs	r2, #14
 80a0842:	212d      	movs	r1, #45	; 0x2d
 80a0844:	f7ff ffa0 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
 80a0848:	4620      	mov	r0, r4
 80a084a:	2200      	movs	r2, #0
 80a084c:	212e      	movs	r1, #46	; 0x2e
 80a084e:	f7ff ff9b 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_MHDF, 0x01);
 80a0852:	4620      	mov	r0, r4
 80a0854:	2201      	movs	r2, #1
 80a0856:	212f      	movs	r1, #47	; 0x2f
 80a0858:	f7ff ff96 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
 80a085c:	4620      	mov	r0, r4
 80a085e:	2205      	movs	r2, #5
 80a0860:	2130      	movs	r1, #48	; 0x30
 80a0862:	f7ff ff91 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
 80a0866:	4620      	mov	r0, r4
 80a0868:	2201      	movs	r2, #1
 80a086a:	2131      	movs	r1, #49	; 0x31
 80a086c:	f7ff ff8c 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
 80a0870:	4620      	mov	r0, r4
 80a0872:	2200      	movs	r2, #0
 80a0874:	2132      	movs	r1, #50	; 0x32
 80a0876:	f7ff ff87 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_NHDT, 0x00);
 80a087a:	4620      	mov	r0, r4
 80a087c:	2200      	movs	r2, #0
 80a087e:	2133      	movs	r1, #51	; 0x33
 80a0880:	f7ff ff82 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
 80a0884:	4620      	mov	r0, r4
 80a0886:	2200      	movs	r2, #0
 80a0888:	2134      	movs	r1, #52	; 0x34
 80a088a:	f7ff ff7d 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
 80a088e:	4620      	mov	r0, r4
 80a0890:	2200      	movs	r2, #0
 80a0892:	2135      	movs	r1, #53	; 0x35
 80a0894:	f7ff ff78 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  writeRegister(MPR121_DEBOUNCE, 0);
 80a0898:	4620      	mov	r0, r4
 80a089a:	2200      	movs	r2, #0
 80a089c:	215b      	movs	r1, #91	; 0x5b
 80a089e:	f7ff ff73 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
 80a08a2:	4620      	mov	r0, r4
 80a08a4:	2210      	movs	r2, #16
 80a08a6:	215c      	movs	r1, #92	; 0x5c
 80a08a8:	f7ff ff6e 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
 80a08ac:	4620      	mov	r0, r4
 80a08ae:	2220      	movs	r2, #32
 80a08b0:	215d      	movs	r1, #93	; 0x5d
 80a08b2:	f7ff ff69 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

//  writeRegister(MPR121_UPLIMIT, 150);
//  writeRegister(MPR121_TARGETLIMIT, 100); // should be ~400 (100 shifted)
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking
 80a08b6:	4620      	mov	r0, r4
 80a08b8:	228f      	movs	r2, #143	; 0x8f
 80a08ba:	215e      	movs	r1, #94	; 0x5e
 80a08bc:	f7ff ff64 	bl	80a0788 <_ZN15Adafruit_MPR12113writeRegisterEhh>

  return true;
 80a08c0:	2001      	movs	r0, #1
 80a08c2:	bd38      	pop	{r3, r4, r5, pc}

  writeRegister(MPR121_ECR, 0x0);

  uint8_t c = readRegister8(MPR121_CONFIG2);
  
  if (c != 0x24) return false;
 80a08c4:	2000      	movs	r0, #0
//  writeRegister(MPR121_LOWLIMIT, 50);
  // enable all electrodes
  writeRegister(MPR121_ECR, 0x8F);  // start with first 5 bits of baseline tracking

  return true;
}
 80a08c6:	bd38      	pop	{r3, r4, r5, pc}

080a08c8 <_GLOBAL__sub_I__ZN15Adafruit_MPR121C2Ev>:
 80a08c8:	f000 b8de 	b.w	80a0a88 <HAL_Pin_Map>

080a08cc <_ZN9NSFastLED14CLEDController13getAdjustmentEh>:
    {
    }

    // allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
 80a08cc:	2300      	movs	r3, #0

    CLEDController & setTemperature(CRGB temperature) { m_ColorTemperature = temperature; return *this; }
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    CRGB getTemperature() { return m_ColorTemperature; }

    CRGB getAdjustment(uint8_t scale) {
 80a08ce:	b570      	push	{r4, r5, r6, lr}
 80a08d0:	7003      	strb	r3, [r0, #0]
 80a08d2:	7043      	strb	r3, [r0, #1]
 80a08d4:	7083      	strb	r3, [r0, #2]
#if defined(NO_CORRECTION) && (NO_CORRECTION==1)
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
 80a08d6:	b192      	cbz	r2, 80a08fe <_ZN9NSFastLED14CLEDController13getAdjustmentEh+0x32>
 80a08d8:	4605      	mov	r5, r0
 80a08da:	f101 040b 	add.w	r4, r1, #11
 80a08de:	310e      	adds	r1, #14
            for(uint8_t i = 0; i < 3; i++) {
                uint8_t cc = m_ColorCorrection.raw[i];
 80a08e0:	f814 6f01 	ldrb.w	r6, [r4, #1]!
                uint8_t ct = m_ColorTemperature.raw[i];
                if(cc > 0 && ct > 0) {
 80a08e4:	b13e      	cbz	r6, 80a08f6 <_ZN9NSFastLED14CLEDController13getAdjustmentEh+0x2a>
        CRGB adj(0,0,0);

        if(scale > 0) {
            for(uint8_t i = 0; i < 3; i++) {
                uint8_t cc = m_ColorCorrection.raw[i];
                uint8_t ct = m_ColorTemperature.raw[i];
 80a08e6:	78e3      	ldrb	r3, [r4, #3]
                if(cc > 0 && ct > 0) {
 80a08e8:	b12b      	cbz	r3, 80a08f6 <_ZN9NSFastLED14CLEDController13getAdjustmentEh+0x2a>
                    uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
 80a08ea:	3301      	adds	r3, #1
 80a08ec:	fb06 3303 	mla	r3, r6, r3, r3
 80a08f0:	4353      	muls	r3, r2
                    work /= 0x10000L;
                    adj.raw[i] = work & 0xFF;
 80a08f2:	0c1b      	lsrs	r3, r3, #16
 80a08f4:	702b      	strb	r3, [r5, #0]
        return CRGB(scale,scale,scale);
#else
        CRGB adj(0,0,0);

        if(scale > 0) {
            for(uint8_t i = 0; i < 3; i++) {
 80a08f6:	428c      	cmp	r4, r1
 80a08f8:	f105 0501 	add.w	r5, r5, #1
 80a08fc:	d1f0      	bne.n	80a08e0 <_ZN9NSFastLED14CLEDController13getAdjustmentEh+0x14>
            }
        }

        return adj;
#endif
    }
 80a08fe:	bd70      	pop	{r4, r5, r6, pc}

080a0900 <_ZN9NSFastLED8CFastLED7addLedsEPNS_14CLEDControllerEPNS_4CRGBEii>:
	setMaxRefreshRate(400);
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
 80a0900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0902:	4614      	mov	r4, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
 80a0904:	1e1e      	subs	r6, r3, #0
	setMaxRefreshRate(400);
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
 80a0906:	460f      	mov	r7, r1
 80a0908:	4605      	mov	r5, r0
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
 80a090a:	bfd8      	it	le
 80a090c:	4616      	movle	r6, r2

	pLed->init();
 80a090e:	6803      	ldr	r3, [r0, #0]
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
 80a0910:	bfd8      	it	le
 80a0912:	2400      	movle	r4, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
 80a0914:	689b      	ldr	r3, [r3, #8]
        show(data, nLeds, getAdjustment(brightness))
    }
#endif

    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
 80a0916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80a091a:	4798      	blx	r3
 80a091c:	1939      	adds	r1, r7, r4
 80a091e:	6069      	str	r1, [r5, #4]
        m_nLeds = nLeds;
 80a0920:	616e      	str	r6, [r5, #20]
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}
 80a0922:	4628      	mov	r0, r5
 80a0924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0928 <_ZN9NSFastLED8CFastLED8countFPSEi>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
 80a0928:	b570      	push	{r4, r5, r6, lr}
  static int br = 0;
  static uint32_t lastframe = 0; // ::millis();

  if(br++ >= nFrames) {
 80a092a:	4c0c      	ldr	r4, [pc, #48]	; (80a095c <_ZN9NSFastLED8CFastLED8countFPSEi+0x34>)
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
 80a092c:	4606      	mov	r6, r0
  static int br = 0;
  static uint32_t lastframe = 0; // ::millis();

  if(br++ >= nFrames) {
 80a092e:	6823      	ldr	r3, [r4, #0]
 80a0930:	1c5a      	adds	r2, r3, #1
 80a0932:	428b      	cmp	r3, r1
 80a0934:	6022      	str	r2, [r4, #0]
 80a0936:	db10      	blt.n	80a095a <_ZN9NSFastLED8CFastLED8countFPSEi+0x32>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0938:	f000 f89e 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
		uint32_t now = ::millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
 80a093c:	6822      	ldr	r2, [r4, #0]
  static int br = 0;
  static uint32_t lastframe = 0; // ::millis();

  if(br++ >= nFrames) {
		uint32_t now = ::millis();
		now -= lastframe;
 80a093e:	4d08      	ldr	r5, [pc, #32]	; (80a0960 <_ZN9NSFastLED8CFastLED8countFPSEi+0x38>)
		m_nFPS = (br * 1000) / now;
 80a0940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0944:	4353      	muls	r3, r2
 80a0946:	682a      	ldr	r2, [r5, #0]
 80a0948:	1a80      	subs	r0, r0, r2
 80a094a:	fbb3 f3f0 	udiv	r3, r3, r0
 80a094e:	8073      	strh	r3, [r6, #2]
    br = 0;
 80a0950:	2300      	movs	r3, #0
 80a0952:	6023      	str	r3, [r4, #0]
 80a0954:	f000 f890 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
    lastframe = ::millis();
 80a0958:	6028      	str	r0, [r5, #0]
 80a095a:	bd70      	pop	{r4, r5, r6, pc}
 80a095c:	20000428 	.word	0x20000428
 80a0960:	2000042c 	.word	0x2000042c

080a0964 <_ZN9NSFastLED8CFastLED4showEh>:
	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
 80a0964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0968:	4605      	mov	r5, r0
 80a096a:	460f      	mov	r7, r1
 80a096c:	4c19      	ldr	r4, [pc, #100]	; (80a09d4 <_ZN9NSFastLED8CFastLED4showEh+0x70>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
 80a096e:	686b      	ldr	r3, [r5, #4]
 80a0970:	b133      	cbz	r3, 80a0980 <_ZN9NSFastLED8CFastLED4showEh+0x1c>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0972:	f000 f879 	bl	80a0a68 <HAL_Timer_Get_Micro_Seconds>
 80a0976:	6823      	ldr	r3, [r4, #0]
 80a0978:	1ac0      	subs	r0, r0, r3
 80a097a:	686b      	ldr	r3, [r5, #4]
 80a097c:	4298      	cmp	r0, r3
 80a097e:	d3f6      	bcc.n	80a096e <_ZN9NSFastLED8CFastLED4showEh+0xa>
 80a0980:	f000 f872 	bl	80a0a68 <HAL_Timer_Get_Micro_Seconds>
	lastshow = micros();
 80a0984:	4b13      	ldr	r3, [pc, #76]	; (80a09d4 <_ZN9NSFastLED8CFastLED4showEh+0x70>)
    CRGB* leds() { return m_Data; }

    // Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
 80a0986:	2600      	movs	r6, #0
 80a0988:	6018      	str	r0, [r3, #0]
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    // navigating the list of controllers
    static CLEDController *head() { return m_pHead; }
 80a098a:	4b13      	ldr	r3, [pc, #76]	; (80a09d8 <_ZN9NSFastLED8CFastLED4showEh+0x74>)
 80a098c:	681c      	ldr	r4, [r3, #0]

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
 80a098e:	b1d4      	cbz	r4, 80a09c6 <_ZN9NSFastLED8CFastLED4showEh+0x62>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
 80a0990:	886b      	ldrh	r3, [r5, #2]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    // show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
 80a0992:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80a0996:	2b63      	cmp	r3, #99	; 0x63
 80a0998:	f8d4 b014 	ldr.w	fp, [r4, #20]
 80a099c:	6823      	ldr	r3, [r4, #0]
 80a099e:	f894 8012 	ldrb.w	r8, [r4, #18]
 80a09a2:	4621      	mov	r1, r4
    CRGB* leds() { return m_Data; }

    // Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
 80a09a4:	bf98      	it	ls
 80a09a6:	74a6      	strbls	r6, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    // show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
 80a09a8:	463a      	mov	r2, r7
 80a09aa:	a801      	add	r0, sp, #4
 80a09ac:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80a09b0:	f7ff ff8c 	bl	80a08cc <_ZN9NSFastLED14CLEDController13getAdjustmentEh>
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	ab01      	add	r3, sp, #4
 80a09b8:	465a      	mov	r2, fp
 80a09ba:	4651      	mov	r1, sl
 80a09bc:	47c8      	blx	r9
    CRGB* leds() { return m_Data; }

    // Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
 80a09be:	f884 8012 	strb.w	r8, [r4, #18]
 80a09c2:	68a4      	ldr	r4, [r4, #8]
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
 80a09c4:	e7e3      	b.n	80a098e <_ZN9NSFastLED8CFastLED4showEh+0x2a>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
 80a09c6:	2119      	movs	r1, #25
 80a09c8:	4628      	mov	r0, r5
 80a09ca:	f7ff ffad 	bl	80a0928 <_ZN9NSFastLED8CFastLED8countFPSEi>
}
 80a09ce:	b003      	add	sp, #12
 80a09d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a09d4:	20000430 	.word	0x20000430
 80a09d8:	20000434 	.word	0x20000434

080a09dc <_GLOBAL__sub_I__ZN9NSFastLED12pSmartMatrixE>:

	}
}
#endif

FASTLED_NAMESPACE_END
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	f000 f853 	bl	80a0a88 <HAL_Pin_Map>
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
 80a09e2:	4b04      	ldr	r3, [pc, #16]	; (80a09f4 <_GLOBAL__sub_I__ZN9NSFastLED12pSmartMatrixE+0x18>)
 80a09e4:	22ff      	movs	r2, #255	; 0xff
 80a09e6:	701a      	strb	r2, [r3, #0]
	m_nFPS = 0;
 80a09e8:	2200      	movs	r2, #0
 80a09ea:	805a      	strh	r2, [r3, #2]
  }
}

void CFastLED::setMaxRefreshRate(uint16_t refresh) {
		if(refresh > 0) {
			m_nMinMicros = 1000000 / refresh;
 80a09ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80a09f0:	605a      	str	r2, [r3, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	2000041c 	.word	0x2000041c

080a09f8 <_GLOBAL__sub_I__ZN9NSFastLED13CloudColors_pE>:
 80a09f8:	f000 b846 	b.w	80a0a88 <HAL_Pin_Map>

080a09fc <_GLOBAL__sub_I__ZN9NSFastLED10fill_solidEPNS_4CRGBEiRKS0_>:
 80a09fc:	f000 b844 	b.w	80a0a88 <HAL_Pin_Map>

080a0a00 <_GLOBAL__sub_I__ZN9NSFastLED11hsv2rgb_rawERKNS_4CHSVERNS_4CRGBE>:
 80a0a00:	f000 b842 	b.w	80a0a88 <HAL_Pin_Map>

080a0a04 <_GLOBAL__sub_I__ZN9NSFastLED10rand16seedE>:
 80a0a04:	f000 b840 	b.w	80a0a88 <HAL_Pin_Map>

080a0a08 <_GLOBAL__sub_I__ZN9NSFastLED12inoise16_rawEmmm>:
 80a0a08:	f000 b83e 	b.w	80a0a88 <HAL_Pin_Map>

080a0a0c <_GLOBAL__sub_I__ZN9NSFastLED27calculate_unscaled_power_mWEPKNS_4CRGBEt>:
 80a0a0c:	f000 b83c 	b.w	80a0a88 <HAL_Pin_Map>

080a0a10 <_GLOBAL__sub_I_wiring.cpp>:
 80a0a10:	f000 b83a 	b.w	80a0a88 <HAL_Pin_Map>

080a0a14 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	f000 f837 	bl	80a0a88 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0a1a:	f000 f835 	bl	80a0a88 <HAL_Pin_Map>
 80a0a1e:	4b01      	ldr	r3, [pc, #4]	; (80a0a24 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a0a20:	6018      	str	r0, [r3, #0]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	20000438 	.word	0x20000438

080a0a28 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <os_mutex_create+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601d0 	.word	0x080601d0

080a0a38 <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_Core_Enter_Bootloader+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	69db      	ldr	r3, [r3, #28]
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601b8 	.word	0x080601b8

080a0a48 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_Core_System_Reset_Ex+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601b8 	.word	0x080601b8

080a0a58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_RNG_GetRandomNumber+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	685b      	ldr	r3, [r3, #4]
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	0806019c 	.word	0x0806019c

080a0a68 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	691b      	ldr	r3, [r3, #16]
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	0806019c 	.word	0x0806019c

080a0a78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	695b      	ldr	r3, [r3, #20]
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	0806019c 	.word	0x0806019c

080a0a88 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <HAL_Pin_Map+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	681b      	ldr	r3, [r3, #0]
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601b0 	.word	0x080601b0

080a0a98 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <HAL_Pin_Mode+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	689b      	ldr	r3, [r3, #8]
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601b0 	.word	0x080601b0

080a0aa8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <HAL_I2C_Begin+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601ac 	.word	0x080601ac

080a0ab8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <HAL_I2C_Request_Data+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601ac 	.word	0x080601ac

080a0ac8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <HAL_I2C_Begin_Transmission+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601ac 	.word	0x080601ac

080a0ad8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <HAL_I2C_End_Transmission+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601ac 	.word	0x080601ac

080a0ae8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <HAL_I2C_Write_Data+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601ac 	.word	0x080601ac

080a0af8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <HAL_I2C_Available_Data+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601ac 	.word	0x080601ac

080a0b08 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <HAL_I2C_Read_Data+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601ac 	.word	0x080601ac

080a0b18 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <HAL_I2C_Peek_Data+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601ac 	.word	0x080601ac

080a0b28 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <HAL_I2C_Flush_Data+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601ac 	.word	0x080601ac

080a0b38 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <HAL_I2C_Is_Enabled+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601ac 	.word	0x080601ac

080a0b48 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b03      	ldr	r3, [pc, #12]	; (80a0b58 <HAL_I2C_Init+0x10>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0b52:	9301      	str	r3, [sp, #4]
 80a0b54:	bd08      	pop	{r3, pc}
 80a0b56:	0000      	.short	0x0000
 80a0b58:	080601ac 	.word	0x080601ac

080a0b5c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <HAL_SPI_Init+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	69db      	ldr	r3, [r3, #28]
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601b4 	.word	0x080601b4

080a0b6c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <HAL_SPI_Is_Enabled+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	6a1b      	ldr	r3, [r3, #32]
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601b4 	.word	0x080601b4

080a0b7c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <HAL_USART_Init+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	699b      	ldr	r3, [r3, #24]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601c4 	.word	0x080601c4

080a0b8c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_USART_Write_Data+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601c4 	.word	0x080601c4

080a0b9c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <HAL_USART_Available_Data+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601c4 	.word	0x080601c4

080a0bac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <HAL_USART_Read_Data+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601c4 	.word	0x080601c4

080a0bbc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <HAL_USART_Peek_Data+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601c4 	.word	0x080601c4

080a0bcc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <HAL_USART_Flush_Data+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601c4 	.word	0x080601c4

080a0bdc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <HAL_USART_Is_Enabled+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601c4 	.word	0x080601c4

080a0bec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601c4 	.word	0x080601c4

080a0bfc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <HAL_USB_USART_Init+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	681b      	ldr	r3, [r3, #0]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601d8 	.word	0x080601d8

080a0c0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <HAL_USB_USART_Begin+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	685b      	ldr	r3, [r3, #4]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601d8 	.word	0x080601d8

080a0c1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_USB_USART_Available_Data+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	691b      	ldr	r3, [r3, #16]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601d8 	.word	0x080601d8

080a0c2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	695b      	ldr	r3, [r3, #20]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601d8 	.word	0x080601d8

080a0c3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <HAL_USB_USART_Receive_Data+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	699b      	ldr	r3, [r3, #24]
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601d8 	.word	0x080601d8

080a0c4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <HAL_USB_USART_Send_Data+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	69db      	ldr	r3, [r3, #28]
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601d8 	.word	0x080601d8

080a0c5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <HAL_USB_USART_Flush_Data+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6a1b      	ldr	r3, [r3, #32]
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601d8 	.word	0x080601d8

080a0c6c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <inet_gethostbyname+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601c0 	.word	0x080601c0

080a0c7c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <set_system_mode+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	685b      	ldr	r3, [r3, #4]
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601a4 	.word	0x080601a4

080a0c8c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <system_delay_ms+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	695b      	ldr	r3, [r3, #20]
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601a4 	.word	0x080601a4

080a0c9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b03      	ldr	r3, [pc, #12]	; (80a0cac <system_ctrl_set_app_request_handler+0x10>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ca6:	9301      	str	r3, [sp, #4]
 80a0ca8:	bd08      	pop	{r3, pc}
 80a0caa:	0000      	.short	0x0000
 80a0cac:	080601a4 	.word	0x080601a4

080a0cb0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0cb0:	b508      	push	{r3, lr}
 80a0cb2:	4b03      	ldr	r3, [pc, #12]	; (80a0cc0 <system_ctrl_set_result+0x10>)
 80a0cb4:	681b      	ldr	r3, [r3, #0]
 80a0cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0cba:	9301      	str	r3, [sp, #4]
 80a0cbc:	bd08      	pop	{r3, pc}
 80a0cbe:	0000      	.short	0x0000
 80a0cc0:	080601a4 	.word	0x080601a4

080a0cc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601cc 	.word	0x080601cc

080a0cd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <network_connect+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	685b      	ldr	r3, [r3, #4]
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601c8 	.word	0x080601c8

080a0ce4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <network_connecting+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	689b      	ldr	r3, [r3, #8]
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601c8 	.word	0x080601c8

080a0cf4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <network_disconnect+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	68db      	ldr	r3, [r3, #12]
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080601c8 	.word	0x080601c8

080a0d04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <network_ready+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	691b      	ldr	r3, [r3, #16]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601c8 	.word	0x080601c8

080a0d14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <network_on+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	695b      	ldr	r3, [r3, #20]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601c8 	.word	0x080601c8

080a0d24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <network_off+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	699b      	ldr	r3, [r3, #24]
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601c8 	.word	0x080601c8

080a0d34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <network_listen+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	69db      	ldr	r3, [r3, #28]
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601c8 	.word	0x080601c8

080a0d44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <network_listening+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	6a1b      	ldr	r3, [r3, #32]
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601c8 	.word	0x080601c8

080a0d54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <network_set_listen_timeout+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601c8 	.word	0x080601c8

080a0d64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <network_get_listen_timeout+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601c8 	.word	0x080601c8

080a0d74 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <malloc+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	681b      	ldr	r3, [r3, #0]
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601a0 	.word	0x080601a0

080a0d84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <free+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	685b      	ldr	r3, [r3, #4]
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601a0 	.word	0x080601a0

080a0d94 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <vsnprintf+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601a0 	.word	0x080601a0

080a0da4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0da4:	2100      	movs	r1, #0
 80a0da6:	f7ff bf71 	b.w	80a0c8c <system_delay_ms>

080a0daa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0daa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0dac:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0dae:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0db0:	b113      	cbz	r3, 80a0db8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0db2:	2203      	movs	r2, #3
 80a0db4:	4601      	mov	r1, r0
 80a0db6:	4798      	blx	r3
    }
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	bd10      	pop	{r4, pc}

080a0dbc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0dbc:	4770      	bx	lr

080a0dbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0dc0:	4606      	mov	r6, r0
 80a0dc2:	4615      	mov	r5, r2
 80a0dc4:	460c      	mov	r4, r1
 80a0dc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0dc8:	42bc      	cmp	r4, r7
 80a0dca:	d006      	beq.n	80a0dda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0dcc:	6833      	ldr	r3, [r6, #0]
 80a0dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0dd2:	689b      	ldr	r3, [r3, #8]
 80a0dd4:	4630      	mov	r0, r6
 80a0dd6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0dd8:	e7f6      	b.n	80a0dc8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0dda:	4628      	mov	r0, r5
 80a0ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0dde <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0dde:	2200      	movs	r2, #0
 80a0de0:	7c00      	ldrb	r0, [r0, #16]
 80a0de2:	f7ff be81 	b.w	80a0ae8 <HAL_I2C_Write_Data>

080a0de6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0de6:	2100      	movs	r1, #0
 80a0de8:	7c00      	ldrb	r0, [r0, #16]
 80a0dea:	f7ff be85 	b.w	80a0af8 <HAL_I2C_Available_Data>

080a0dee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0dee:	2100      	movs	r1, #0
 80a0df0:	7c00      	ldrb	r0, [r0, #16]
 80a0df2:	f7ff be89 	b.w	80a0b08 <HAL_I2C_Read_Data>

080a0df6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0df6:	2100      	movs	r1, #0
 80a0df8:	7c00      	ldrb	r0, [r0, #16]
 80a0dfa:	f7ff be8d 	b.w	80a0b18 <HAL_I2C_Peek_Data>

080a0dfe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0dfe:	2100      	movs	r1, #0
 80a0e00:	7c00      	ldrb	r0, [r0, #16]
 80a0e02:	f7ff be91 	b.w	80a0b28 <HAL_I2C_Flush_Data>

080a0e06 <_ZN7TwoWireD0Ev>:
 80a0e06:	b510      	push	{r4, lr}
 80a0e08:	4604      	mov	r4, r0
 80a0e0a:	f7ff f946 	bl	80a009a <_ZdlPv>
 80a0e0e:	4620      	mov	r0, r4
 80a0e10:	bd10      	pop	{r4, pc}
	...

080a0e14 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e14:	b510      	push	{r4, lr}
 80a0e16:	4604      	mov	r4, r0
 80a0e18:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e1e:	60a3      	str	r3, [r4, #8]
 80a0e20:	4b04      	ldr	r3, [pc, #16]	; (80a0e34 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e22:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0e24:	7420      	strb	r0, [r4, #16]
 80a0e26:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e28:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0e2a:	f7ff fe8d 	bl	80a0b48 <HAL_I2C_Init>

}
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	bd10      	pop	{r4, pc}
 80a0e32:	bf00      	nop
 80a0e34:	080a1ae8 	.word	0x080a1ae8

080a0e38 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0e38:	2300      	movs	r3, #0
 80a0e3a:	461a      	mov	r2, r3
 80a0e3c:	4619      	mov	r1, r3
 80a0e3e:	7c00      	ldrb	r0, [r0, #16]
 80a0e40:	f7ff be32 	b.w	80a0aa8 <HAL_I2C_Begin>

080a0e44 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a0e44:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a0e46:	2400      	movs	r4, #0
 80a0e48:	7c00      	ldrb	r0, [r0, #16]
 80a0e4a:	9400      	str	r4, [sp, #0]
 80a0e4c:	f7ff fe34 	bl	80a0ab8 <HAL_I2C_Request_Data>
  return result;
}
 80a0e50:	b2c0      	uxtb	r0, r0
 80a0e52:	b002      	add	sp, #8
 80a0e54:	bd10      	pop	{r4, pc}

080a0e56 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a0e56:	2301      	movs	r3, #1
 80a0e58:	b2d2      	uxtb	r2, r2
 80a0e5a:	b2c9      	uxtb	r1, r1
 80a0e5c:	f7ff bff2 	b.w	80a0e44 <_ZN7TwoWire11requestFromEhhh>

080a0e60 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0e60:	2200      	movs	r2, #0
 80a0e62:	7c00      	ldrb	r0, [r0, #16]
 80a0e64:	f7ff be30 	b.w	80a0ac8 <HAL_I2C_Begin_Transmission>

080a0e68 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a0e68:	b2c9      	uxtb	r1, r1
 80a0e6a:	f7ff bff9 	b.w	80a0e60 <_ZN7TwoWire17beginTransmissionEh>

080a0e6e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0e6e:	2200      	movs	r2, #0
 80a0e70:	7c00      	ldrb	r0, [r0, #16]
 80a0e72:	f7ff be31 	b.w	80a0ad8 <HAL_I2C_End_Transmission>

080a0e76 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0e76:	2101      	movs	r1, #1
 80a0e78:	f7ff bff9 	b.w	80a0e6e <_ZN7TwoWire15endTransmissionEh>

080a0e7c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0e7c:	2100      	movs	r1, #0
 80a0e7e:	7c00      	ldrb	r0, [r0, #16]
 80a0e80:	f7ff be5a 	b.w	80a0b38 <HAL_I2C_Is_Enabled>

080a0e84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0e84:	4770      	bx	lr

080a0e86 <_ZN9IPAddressD0Ev>:
 80a0e86:	b510      	push	{r4, lr}
 80a0e88:	4604      	mov	r4, r0
 80a0e8a:	f7ff f906 	bl	80a009a <_ZdlPv>
 80a0e8e:	4620      	mov	r0, r4
 80a0e90:	bd10      	pop	{r4, pc}

080a0e92 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e94:	460f      	mov	r7, r1
 80a0e96:	f100 0608 	add.w	r6, r0, #8
 80a0e9a:	1d05      	adds	r5, r0, #4
 80a0e9c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0ea2:	220a      	movs	r2, #10
 80a0ea4:	4638      	mov	r0, r7
 80a0ea6:	f000 f91c 	bl	80a10e2 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0eaa:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0eac:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0eae:	d007      	beq.n	80a0ec0 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0eb0:	2c00      	cmp	r4, #0
 80a0eb2:	d0f4      	beq.n	80a0e9e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0eb4:	212e      	movs	r1, #46	; 0x2e
 80a0eb6:	4638      	mov	r0, r7
 80a0eb8:	f000 f8da 	bl	80a1070 <_ZN5Print5printEc>
 80a0ebc:	4404      	add	r4, r0
 80a0ebe:	e7ee      	b.n	80a0e9e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0ec0:	4620      	mov	r0, r4
 80a0ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ec4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0ec4:	b510      	push	{r4, lr}
 80a0ec6:	4604      	mov	r4, r0
 80a0ec8:	4b04      	ldr	r3, [pc, #16]	; (80a0edc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0eca:	2211      	movs	r2, #17
 80a0ecc:	f840 3b04 	str.w	r3, [r0], #4
 80a0ed0:	2100      	movs	r1, #0
 80a0ed2:	f000 fdae 	bl	80a1a32 <memset>
{
    clear();
}
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	bd10      	pop	{r4, pc}
 80a0eda:	bf00      	nop
 80a0edc:	080a1b10 	.word	0x080a1b10

080a0ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ee0:	4603      	mov	r3, r0
 80a0ee2:	4a07      	ldr	r2, [pc, #28]	; (80a0f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0ee4:	b510      	push	{r4, lr}
 80a0ee6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0eea:	f101 0210 	add.w	r2, r1, #16
 80a0eee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0ef2:	4291      	cmp	r1, r2
 80a0ef4:	f843 4b04 	str.w	r4, [r3], #4
 80a0ef8:	d1f9      	bne.n	80a0eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0efa:	780a      	ldrb	r2, [r1, #0]
 80a0efc:	701a      	strb	r2, [r3, #0]
}
 80a0efe:	bd10      	pop	{r4, pc}
 80a0f00:	080a1b10 	.word	0x080a1b10

080a0f04 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0f04:	4a02      	ldr	r2, [pc, #8]	; (80a0f10 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0f06:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0f08:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0f0a:	2204      	movs	r2, #4
 80a0f0c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0f0e:	4770      	bx	lr
 80a0f10:	080a1b10 	.word	0x080a1b10

080a0f14 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0f14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0f1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0f22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0f26:	2304      	movs	r3, #4
 80a0f28:	6041      	str	r1, [r0, #4]
 80a0f2a:	7503      	strb	r3, [r0, #20]
 80a0f2c:	bd10      	pop	{r4, pc}
	...

080a0f30 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f32:	4d04      	ldr	r5, [pc, #16]	; (80a0f44 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0f34:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0f36:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f3a:	9500      	str	r5, [sp, #0]
 80a0f3c:	f7ff ffea 	bl	80a0f14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0f40:	b003      	add	sp, #12
 80a0f42:	bd30      	pop	{r4, r5, pc}
 80a0f44:	080a1b10 	.word	0x080a1b10

080a0f48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0f48:	4a01      	ldr	r2, [pc, #4]	; (80a0f50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0f4c:	601a      	str	r2, [r3, #0]
 80a0f4e:	4770      	bx	lr
 80a0f50:	080a1bd7 	.word	0x080a1bd7
 80a0f54:	2000043c 	.word	0x2000043c

080a0f58 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0f58:	2300      	movs	r3, #0
 80a0f5a:	461a      	mov	r2, r3
 80a0f5c:	6840      	ldr	r0, [r0, #4]
 80a0f5e:	f7ff beb9 	b.w	80a0cd4 <network_connect>

080a0f62 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0f62:	2200      	movs	r2, #0
 80a0f64:	2102      	movs	r1, #2
 80a0f66:	6840      	ldr	r0, [r0, #4]
 80a0f68:	f7ff bec4 	b.w	80a0cf4 <network_disconnect>

080a0f6c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0f6c:	2200      	movs	r2, #0
 80a0f6e:	4611      	mov	r1, r2
 80a0f70:	6840      	ldr	r0, [r0, #4]
 80a0f72:	f7ff beb7 	b.w	80a0ce4 <network_connecting>

080a0f76 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0f76:	2200      	movs	r2, #0
 80a0f78:	4611      	mov	r1, r2
 80a0f7a:	6840      	ldr	r0, [r0, #4]
 80a0f7c:	f7ff bec2 	b.w	80a0d04 <network_ready>

080a0f80 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0f80:	2300      	movs	r3, #0
 80a0f82:	461a      	mov	r2, r3
 80a0f84:	4619      	mov	r1, r3
 80a0f86:	6840      	ldr	r0, [r0, #4]
 80a0f88:	f7ff bec4 	b.w	80a0d14 <network_on>

080a0f8c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0f8c:	2300      	movs	r3, #0
 80a0f8e:	461a      	mov	r2, r3
 80a0f90:	4619      	mov	r1, r3
 80a0f92:	6840      	ldr	r0, [r0, #4]
 80a0f94:	f7ff bec6 	b.w	80a0d24 <network_off>

080a0f98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0f98:	2200      	movs	r2, #0
 80a0f9a:	f081 0101 	eor.w	r1, r1, #1
 80a0f9e:	6840      	ldr	r0, [r0, #4]
 80a0fa0:	f7ff bec8 	b.w	80a0d34 <network_listen>

080a0fa4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0fa4:	2200      	movs	r2, #0
 80a0fa6:	6840      	ldr	r0, [r0, #4]
 80a0fa8:	f7ff bed4 	b.w	80a0d54 <network_set_listen_timeout>

080a0fac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0fac:	2200      	movs	r2, #0
 80a0fae:	4611      	mov	r1, r2
 80a0fb0:	6840      	ldr	r0, [r0, #4]
 80a0fb2:	f7ff bed7 	b.w	80a0d64 <network_get_listen_timeout>

080a0fb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0fb6:	2200      	movs	r2, #0
 80a0fb8:	4611      	mov	r1, r2
 80a0fba:	6840      	ldr	r0, [r0, #4]
 80a0fbc:	f7ff bec2 	b.w	80a0d44 <network_listening>

080a0fc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0fc0:	b570      	push	{r4, r5, r6, lr}
 80a0fc2:	4616      	mov	r6, r2
 80a0fc4:	b08e      	sub	sp, #56	; 0x38
 80a0fc6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0fc8:	a808      	add	r0, sp, #32
 80a0fca:	f7ff ff7b 	bl	80a0ec4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0fce:	2211      	movs	r2, #17
 80a0fd0:	2100      	movs	r1, #0
 80a0fd2:	a803      	add	r0, sp, #12
 80a0fd4:	f000 fd2d 	bl	80a1a32 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0fd8:	4630      	mov	r0, r6
 80a0fda:	f000 fd5b 	bl	80a1a94 <strlen>
 80a0fde:	2500      	movs	r5, #0
 80a0fe0:	4b0a      	ldr	r3, [pc, #40]	; (80a100c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0fe2:	9500      	str	r5, [sp, #0]
 80a0fe4:	b281      	uxth	r1, r0
 80a0fe6:	685b      	ldr	r3, [r3, #4]
 80a0fe8:	aa03      	add	r2, sp, #12
 80a0fea:	4630      	mov	r0, r6
 80a0fec:	f7ff fe3e 	bl	80a0c6c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ff0:	b120      	cbz	r0, 80a0ffc <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0ff2:	4629      	mov	r1, r5
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	f7ff ff85 	bl	80a0f04 <_ZN9IPAddressC1Em>
 80a0ffa:	e003      	b.n	80a1004 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0ffc:	a903      	add	r1, sp, #12
 80a0ffe:	4620      	mov	r0, r4
 80a1000:	f7ff ff6e 	bl	80a0ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1004:	4620      	mov	r0, r4
 80a1006:	b00e      	add	sp, #56	; 0x38
 80a1008:	bd70      	pop	{r4, r5, r6, pc}
 80a100a:	bf00      	nop
 80a100c:	200008c0 	.word	0x200008c0

080a1010 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1010:	4b02      	ldr	r3, [pc, #8]	; (80a101c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1012:	4a03      	ldr	r2, [pc, #12]	; (80a1020 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1014:	601a      	str	r2, [r3, #0]
 80a1016:	2200      	movs	r2, #0
 80a1018:	605a      	str	r2, [r3, #4]
 80a101a:	4770      	bx	lr
 80a101c:	20000440 	.word	0x20000440
 80a1020:	080a1c08 	.word	0x080a1c08

080a1024 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1026:	4606      	mov	r6, r0
 80a1028:	460d      	mov	r5, r1
 80a102a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a102c:	2400      	movs	r4, #0
  while (size--) {
 80a102e:	42bd      	cmp	r5, r7
 80a1030:	d00c      	beq.n	80a104c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1032:	6833      	ldr	r3, [r6, #0]
 80a1034:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1038:	689b      	ldr	r3, [r3, #8]
 80a103a:	4630      	mov	r0, r6
 80a103c:	4798      	blx	r3
     if (chunk>=0)
 80a103e:	2800      	cmp	r0, #0
 80a1040:	db01      	blt.n	80a1046 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1042:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1044:	e7f3      	b.n	80a102e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1046:	2c00      	cmp	r4, #0
 80a1048:	bf08      	it	eq
 80a104a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a104c:	4620      	mov	r0, r4
 80a104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1050 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1050:	b570      	push	{r4, r5, r6, lr}
 80a1052:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1054:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1056:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1058:	b149      	cbz	r1, 80a106e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a105a:	f000 fd1b 	bl	80a1a94 <strlen>
 80a105e:	682b      	ldr	r3, [r5, #0]
 80a1060:	4602      	mov	r2, r0
 80a1062:	4621      	mov	r1, r4
 80a1064:	4628      	mov	r0, r5
    }
 80a1066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a106a:	68db      	ldr	r3, [r3, #12]
 80a106c:	4718      	bx	r3
    }
 80a106e:	bd70      	pop	{r4, r5, r6, pc}

080a1070 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1070:	6803      	ldr	r3, [r0, #0]
 80a1072:	689b      	ldr	r3, [r3, #8]
 80a1074:	4718      	bx	r3

080a1076 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1076:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1078:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a107a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a107c:	f7ff fff8 	bl	80a1070 <_ZN5Print5printEc>
  n += print('\n');
 80a1080:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1082:	4604      	mov	r4, r0
  n += print('\n');
 80a1084:	4628      	mov	r0, r5
 80a1086:	f7ff fff3 	bl	80a1070 <_ZN5Print5printEc>
  return n;
}
 80a108a:	4420      	add	r0, r4
 80a108c:	bd38      	pop	{r3, r4, r5, pc}

080a108e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a108e:	2a01      	cmp	r2, #1
 80a1090:	bf98      	it	ls
 80a1092:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1094:	b530      	push	{r4, r5, lr}
 80a1096:	460b      	mov	r3, r1
 80a1098:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a109a:	2100      	movs	r1, #0
 80a109c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a10a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a10a4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a10a8:	fb05 3312 	mls	r3, r5, r2, r3
 80a10ac:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a10ae:	2b09      	cmp	r3, #9
 80a10b0:	bf94      	ite	ls
 80a10b2:	3330      	addls	r3, #48	; 0x30
 80a10b4:	3337      	addhi	r3, #55	; 0x37
 80a10b6:	b2db      	uxtb	r3, r3
 80a10b8:	4621      	mov	r1, r4
 80a10ba:	f804 3901 	strb.w	r3, [r4], #-1
 80a10be:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a10c0:	2d00      	cmp	r5, #0
 80a10c2:	d1ef      	bne.n	80a10a4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a10c4:	f7ff ffc4 	bl	80a1050 <_ZN5Print5writeEPKc>
}
 80a10c8:	b00b      	add	sp, #44	; 0x2c
 80a10ca:	bd30      	pop	{r4, r5, pc}

080a10cc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a10cc:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a10ce:	b922      	cbnz	r2, 80a10da <_ZN5Print5printEmi+0xe>
 80a10d0:	6803      	ldr	r3, [r0, #0]
 80a10d2:	b2c9      	uxtb	r1, r1
 80a10d4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a10d6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a10d8:	4718      	bx	r3
  else return printNumber(n, base);
 80a10da:	b2d2      	uxtb	r2, r2
}
 80a10dc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a10de:	f7ff bfd6 	b.w	80a108e <_ZN5Print11printNumberEmh>

080a10e2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a10e2:	f7ff bff3 	b.w	80a10cc <_ZN5Print5printEmi>

080a10e6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a10e6:	b40c      	push	{r2, r3}
 80a10e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a10ec:	b087      	sub	sp, #28
 80a10ee:	af00      	add	r7, sp, #0
 80a10f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a10f4:	f854 9b04 	ldr.w	r9, [r4], #4
 80a10f8:	4605      	mov	r5, r0
 80a10fa:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a10fc:	4623      	mov	r3, r4
 80a10fe:	464a      	mov	r2, r9
 80a1100:	2114      	movs	r1, #20
 80a1102:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1104:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1106:	f7ff fe45 	bl	80a0d94 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a110a:	2813      	cmp	r0, #19
 80a110c:	d805      	bhi.n	80a111a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a110e:	1d39      	adds	r1, r7, #4
 80a1110:	4628      	mov	r0, r5
 80a1112:	f7ff ff9d 	bl	80a1050 <_ZN5Print5writeEPKc>
 80a1116:	4604      	mov	r4, r0
 80a1118:	e013      	b.n	80a1142 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a111a:	f100 0308 	add.w	r3, r0, #8
 80a111e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1122:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1124:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1128:	1c41      	adds	r1, r0, #1
 80a112a:	4623      	mov	r3, r4
 80a112c:	464a      	mov	r2, r9
 80a112e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1130:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1132:	f7ff fe2f 	bl	80a0d94 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1136:	4669      	mov	r1, sp
 80a1138:	4628      	mov	r0, r5
 80a113a:	f7ff ff89 	bl	80a1050 <_ZN5Print5writeEPKc>
 80a113e:	4604      	mov	r4, r0
 80a1140:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1142:	b11e      	cbz	r6, 80a114c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1144:	4628      	mov	r0, r5
 80a1146:	f7ff ff96 	bl	80a1076 <_ZN5Print7printlnEv>
 80a114a:	4404      	add	r4, r0
    return n;
}
 80a114c:	4620      	mov	r0, r4
 80a114e:	371c      	adds	r7, #28
 80a1150:	46bd      	mov	sp, r7
 80a1152:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1156:	b002      	add	sp, #8
 80a1158:	4770      	bx	lr

080a115a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a115a:	b510      	push	{r4, lr}
 80a115c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a115e:	f7ff fe24 	bl	80a0daa <_ZNSt14_Function_baseD1Ev>
 80a1162:	4620      	mov	r0, r4
 80a1164:	bd10      	pop	{r4, pc}
	...

080a1168 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1168:	4803      	ldr	r0, [pc, #12]	; (80a1178 <_GLOBAL__sub_I_RGB+0x10>)
 80a116a:	2300      	movs	r3, #0
 80a116c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a116e:	4a03      	ldr	r2, [pc, #12]	; (80a117c <_GLOBAL__sub_I_RGB+0x14>)
 80a1170:	4903      	ldr	r1, [pc, #12]	; (80a1180 <_GLOBAL__sub_I_RGB+0x18>)
 80a1172:	f000 baf7 	b.w	80a1764 <__aeabi_atexit>
 80a1176:	bf00      	nop
 80a1178:	20000448 	.word	0x20000448
 80a117c:	20000368 	.word	0x20000368
 80a1180:	080a115b 	.word	0x080a115b

080a1184 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1184:	4770      	bx	lr

080a1186 <_ZN8SPIClassD0Ev>:
 80a1186:	b510      	push	{r4, lr}
 80a1188:	4604      	mov	r4, r0
 80a118a:	f7fe ff86 	bl	80a009a <_ZdlPv>
 80a118e:	4620      	mov	r0, r4
 80a1190:	bd10      	pop	{r4, pc}
	...

080a1194 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1194:	b570      	push	{r4, r5, r6, lr}
 80a1196:	4604      	mov	r4, r0
 80a1198:	460e      	mov	r6, r1
 80a119a:	4b07      	ldr	r3, [pc, #28]	; (80a11b8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a119c:	2500      	movs	r5, #0
 80a119e:	6003      	str	r3, [r0, #0]
 80a11a0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a11a4:	f7ff fc40 	bl	80a0a28 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a11a8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a11aa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a11ac:	f7ff fcd6 	bl	80a0b5c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a11b0:	60a5      	str	r5, [r4, #8]
}
 80a11b2:	4620      	mov	r0, r4
 80a11b4:	bd70      	pop	{r4, r5, r6, pc}
 80a11b6:	bf00      	nop
 80a11b8:	080a1c3c 	.word	0x080a1c3c

080a11bc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a11bc:	7900      	ldrb	r0, [r0, #4]
 80a11be:	f7ff bcd5 	b.w	80a0b6c <HAL_SPI_Is_Enabled>

080a11c2 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
 80a11c2:	f7ff bc39 	b.w	80a0a38 <HAL_Core_Enter_Bootloader>

080a11c6 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a11c6:	4601      	mov	r1, r0
 80a11c8:	2200      	movs	r2, #0
 80a11ca:	208c      	movs	r0, #140	; 0x8c
 80a11cc:	f7ff bc3c 	b.w	80a0a48 <HAL_Core_System_Reset_Ex>

080a11d0 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a11d0:	2000      	movs	r0, #0
 80a11d2:	f7ff bff8 	b.w	80a11c6 <_ZN11SystemClass5resetEm>
	...

080a11d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a11d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a11dc:	4b03      	ldr	r3, [pc, #12]	; (80a11ec <_GLOBAL__sub_I_System+0x14>)
 80a11de:	2000      	movs	r0, #0
 80a11e0:	7018      	strb	r0, [r3, #0]
 80a11e2:	8058      	strh	r0, [r3, #2]
 80a11e4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a11e6:	f7ff bd49 	b.w	80a0c7c <set_system_mode>
 80a11ea:	bf00      	nop
 80a11ec:	20000458 	.word	0x20000458

080a11f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a11f0:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a11f2:	681a      	ldr	r2, [r3, #0]
 80a11f4:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a11f6:	601a      	str	r2, [r3, #0]
 80a11f8:	4770      	bx	lr
 80a11fa:	bf00      	nop
 80a11fc:	20000300 	.word	0x20000300
 80a1200:	20000460 	.word	0x20000460

080a1204 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1204:	4770      	bx	lr

080a1206 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1206:	7441      	strb	r1, [r0, #17]
 80a1208:	4770      	bx	lr

080a120a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a120a:	7c00      	ldrb	r0, [r0, #16]
 80a120c:	f7ff bcee 	b.w	80a0bec <HAL_USART_Available_Data_For_Write>

080a1210 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1210:	7c00      	ldrb	r0, [r0, #16]
 80a1212:	f7ff bcc3 	b.w	80a0b9c <HAL_USART_Available_Data>

080a1216 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1216:	7c00      	ldrb	r0, [r0, #16]
 80a1218:	f7ff bcd0 	b.w	80a0bbc <HAL_USART_Peek_Data>

080a121c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a121c:	7c00      	ldrb	r0, [r0, #16]
 80a121e:	f7ff bcc5 	b.w	80a0bac <HAL_USART_Read_Data>

080a1222 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1222:	7c00      	ldrb	r0, [r0, #16]
 80a1224:	f7ff bcd2 	b.w	80a0bcc <HAL_USART_Flush_Data>

080a1228 <_ZN11USARTSerialD0Ev>:
 80a1228:	b510      	push	{r4, lr}
 80a122a:	4604      	mov	r4, r0
 80a122c:	f7fe ff35 	bl	80a009a <_ZdlPv>
 80a1230:	4620      	mov	r0, r4
 80a1232:	bd10      	pop	{r4, pc}

080a1234 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1234:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1236:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1238:	4604      	mov	r4, r0
 80a123a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a123c:	b925      	cbnz	r5, 80a1248 <_ZN11USARTSerial5writeEh+0x14>
 80a123e:	7c00      	ldrb	r0, [r0, #16]
 80a1240:	f7ff fcd4 	bl	80a0bec <HAL_USART_Available_Data_For_Write>
 80a1244:	2800      	cmp	r0, #0
 80a1246:	dd05      	ble.n	80a1254 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1248:	4631      	mov	r1, r6
 80a124a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a124c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1250:	f7ff bc9c 	b.w	80a0b8c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1254:	4628      	mov	r0, r5
 80a1256:	bd70      	pop	{r4, r5, r6, pc}

080a1258 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1258:	b510      	push	{r4, lr}
 80a125a:	4604      	mov	r4, r0
 80a125c:	4608      	mov	r0, r1
 80a125e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1260:	2200      	movs	r2, #0
 80a1262:	6062      	str	r2, [r4, #4]
 80a1264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1268:	60a2      	str	r2, [r4, #8]
 80a126a:	4a05      	ldr	r2, [pc, #20]	; (80a1280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a126c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a126e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1270:	2201      	movs	r2, #1
 80a1272:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1274:	461a      	mov	r2, r3
 80a1276:	f7ff fc81 	bl	80a0b7c <HAL_USART_Init>
}
 80a127a:	4620      	mov	r0, r4
 80a127c:	bd10      	pop	{r4, pc}
 80a127e:	bf00      	nop
 80a1280:	080a1c78 	.word	0x080a1c78

080a1284 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1284:	7c00      	ldrb	r0, [r0, #16]
 80a1286:	f7ff bca9 	b.w	80a0bdc <HAL_USART_Is_Enabled>
	...

080a128c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a128c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a128e:	4d0c      	ldr	r5, [pc, #48]	; (80a12c0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1290:	6829      	ldr	r1, [r5, #0]
 80a1292:	f011 0401 	ands.w	r4, r1, #1
 80a1296:	d111      	bne.n	80a12bc <_Z22__fetch_global_Serial1v+0x30>
 80a1298:	4628      	mov	r0, r5
 80a129a:	f7fe ff00 	bl	80a009e <__cxa_guard_acquire>
 80a129e:	b168      	cbz	r0, 80a12bc <_Z22__fetch_global_Serial1v+0x30>
 80a12a0:	4a08      	ldr	r2, [pc, #32]	; (80a12c4 <_Z22__fetch_global_Serial1v+0x38>)
 80a12a2:	4621      	mov	r1, r4
 80a12a4:	4b08      	ldr	r3, [pc, #32]	; (80a12c8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a12a6:	4809      	ldr	r0, [pc, #36]	; (80a12cc <_Z22__fetch_global_Serial1v+0x40>)
 80a12a8:	f7ff ffd6 	bl	80a1258 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a12ac:	4628      	mov	r0, r5
 80a12ae:	f7fe fefb 	bl	80a00a8 <__cxa_guard_release>
 80a12b2:	4a07      	ldr	r2, [pc, #28]	; (80a12d0 <_Z22__fetch_global_Serial1v+0x44>)
 80a12b4:	4907      	ldr	r1, [pc, #28]	; (80a12d4 <_Z22__fetch_global_Serial1v+0x48>)
 80a12b6:	4805      	ldr	r0, [pc, #20]	; (80a12cc <_Z22__fetch_global_Serial1v+0x40>)
 80a12b8:	f000 fa54 	bl	80a1764 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a12bc:	4803      	ldr	r0, [pc, #12]	; (80a12cc <_Z22__fetch_global_Serial1v+0x40>)
 80a12be:	bd38      	pop	{r3, r4, r5, pc}
 80a12c0:	200004fc 	.word	0x200004fc
 80a12c4:	20000500 	.word	0x20000500
 80a12c8:	20000478 	.word	0x20000478
 80a12cc:	20000464 	.word	0x20000464
 80a12d0:	20000368 	.word	0x20000368
 80a12d4:	080a1205 	.word	0x080a1205

080a12d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a12d8:	7441      	strb	r1, [r0, #17]
 80a12da:	4770      	bx	lr

080a12dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a12dc:	4770      	bx	lr

080a12de <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a12de:	2100      	movs	r1, #0
 80a12e0:	7c00      	ldrb	r0, [r0, #16]
 80a12e2:	f7ff bcab 	b.w	80a0c3c <HAL_USB_USART_Receive_Data>

080a12e6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a12e6:	2101      	movs	r1, #1
 80a12e8:	7c00      	ldrb	r0, [r0, #16]
 80a12ea:	f7ff bca7 	b.w	80a0c3c <HAL_USB_USART_Receive_Data>

080a12ee <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a12ee:	7c00      	ldrb	r0, [r0, #16]
 80a12f0:	f7ff bc9c 	b.w	80a0c2c <HAL_USB_USART_Available_Data_For_Write>

080a12f4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a12f4:	7c00      	ldrb	r0, [r0, #16]
 80a12f6:	f7ff bc91 	b.w	80a0c1c <HAL_USB_USART_Available_Data>

080a12fa <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a12fa:	b538      	push	{r3, r4, r5, lr}
 80a12fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a12fe:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1300:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1302:	f7ff fc93 	bl	80a0c2c <HAL_USB_USART_Available_Data_For_Write>
 80a1306:	2800      	cmp	r0, #0
 80a1308:	dc01      	bgt.n	80a130e <_ZN9USBSerial5writeEh+0x14>
 80a130a:	7c60      	ldrb	r0, [r4, #17]
 80a130c:	b120      	cbz	r0, 80a1318 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a130e:	4629      	mov	r1, r5
 80a1310:	7c20      	ldrb	r0, [r4, #16]
 80a1312:	f7ff fc9b 	bl	80a0c4c <HAL_USB_USART_Send_Data>
    return 1;
 80a1316:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1318:	bd38      	pop	{r3, r4, r5, pc}

080a131a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a131a:	7c00      	ldrb	r0, [r0, #16]
 80a131c:	f7ff bc9e 	b.w	80a0c5c <HAL_USB_USART_Flush_Data>

080a1320 <_ZN9USBSerialD0Ev>:
 80a1320:	b510      	push	{r4, lr}
 80a1322:	4604      	mov	r4, r0
 80a1324:	f7fe feb9 	bl	80a009a <_ZdlPv>
 80a1328:	4620      	mov	r0, r4
 80a132a:	bd10      	pop	{r4, pc}

080a132c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a132c:	b510      	push	{r4, lr}
 80a132e:	4604      	mov	r4, r0
 80a1330:	2300      	movs	r3, #0
 80a1332:	6063      	str	r3, [r4, #4]
 80a1334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1338:	60a3      	str	r3, [r4, #8]
 80a133a:	4b05      	ldr	r3, [pc, #20]	; (80a1350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a133c:	4608      	mov	r0, r1
 80a133e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1340:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1342:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1344:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1346:	4611      	mov	r1, r2
 80a1348:	f7ff fc58 	bl	80a0bfc <HAL_USB_USART_Init>
}
 80a134c:	4620      	mov	r0, r4
 80a134e:	bd10      	pop	{r4, pc}
 80a1350:	080a1ca8 	.word	0x080a1ca8

080a1354 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1354:	2200      	movs	r2, #0
 80a1356:	7c00      	ldrb	r0, [r0, #16]
 80a1358:	f7ff bc58 	b.w	80a0c0c <HAL_USB_USART_Begin>

080a135c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a135c:	b510      	push	{r4, lr}
 80a135e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1360:	2214      	movs	r2, #20
 80a1362:	2100      	movs	r1, #0
 80a1364:	f000 fb65 	bl	80a1a32 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1368:	4b05      	ldr	r3, [pc, #20]	; (80a1380 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a136a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a136c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a136e:	4b05      	ldr	r3, [pc, #20]	; (80a1384 <_Z19acquireSerialBufferv+0x28>)
 80a1370:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1372:	f240 1301 	movw	r3, #257	; 0x101
 80a1376:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1378:	2381      	movs	r3, #129	; 0x81
 80a137a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a137c:	bd10      	pop	{r4, pc}
 80a137e:	bf00      	nop
 80a1380:	20000609 	.word	0x20000609
 80a1384:	20000588 	.word	0x20000588

080a1388 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1388:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a138a:	4d0e      	ldr	r5, [pc, #56]	; (80a13c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a138c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a138e:	a801      	add	r0, sp, #4
 80a1390:	f7ff ffe4 	bl	80a135c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1394:	6829      	ldr	r1, [r5, #0]
 80a1396:	f011 0401 	ands.w	r4, r1, #1
 80a139a:	d110      	bne.n	80a13be <_Z16_fetch_usbserialv+0x36>
 80a139c:	4628      	mov	r0, r5
 80a139e:	f7fe fe7e 	bl	80a009e <__cxa_guard_acquire>
 80a13a2:	b160      	cbz	r0, 80a13be <_Z16_fetch_usbserialv+0x36>
 80a13a4:	aa01      	add	r2, sp, #4
 80a13a6:	4621      	mov	r1, r4
 80a13a8:	4807      	ldr	r0, [pc, #28]	; (80a13c8 <_Z16_fetch_usbserialv+0x40>)
 80a13aa:	f7ff ffbf 	bl	80a132c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a13ae:	4628      	mov	r0, r5
 80a13b0:	f7fe fe7a 	bl	80a00a8 <__cxa_guard_release>
 80a13b4:	4a05      	ldr	r2, [pc, #20]	; (80a13cc <_Z16_fetch_usbserialv+0x44>)
 80a13b6:	4906      	ldr	r1, [pc, #24]	; (80a13d0 <_Z16_fetch_usbserialv+0x48>)
 80a13b8:	4803      	ldr	r0, [pc, #12]	; (80a13c8 <_Z16_fetch_usbserialv+0x40>)
 80a13ba:	f000 f9d3 	bl	80a1764 <__aeabi_atexit>
	return _usbserial;
}
 80a13be:	4802      	ldr	r0, [pc, #8]	; (80a13c8 <_Z16_fetch_usbserialv+0x40>)
 80a13c0:	b007      	add	sp, #28
 80a13c2:	bd30      	pop	{r4, r5, pc}
 80a13c4:	20000584 	.word	0x20000584
 80a13c8:	2000070c 	.word	0x2000070c
 80a13cc:	20000368 	.word	0x20000368
 80a13d0:	080a12dd 	.word	0x080a12dd

080a13d4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a13d4:	b510      	push	{r4, lr}
 80a13d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a13d8:	2214      	movs	r2, #20
 80a13da:	2100      	movs	r1, #0
 80a13dc:	f000 fb29 	bl	80a1a32 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a13e0:	4b05      	ldr	r3, [pc, #20]	; (80a13f8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a13e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a13e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a13e6:	4b05      	ldr	r3, [pc, #20]	; (80a13fc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a13e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a13ea:	f240 1301 	movw	r3, #257	; 0x101
 80a13ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a13f0:	2381      	movs	r3, #129	; 0x81
 80a13f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a13f4:	bd10      	pop	{r4, pc}
 80a13f6:	bf00      	nop
 80a13f8:	200007bc 	.word	0x200007bc
 80a13fc:	20000724 	.word	0x20000724

080a1400 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1400:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1402:	4c0e      	ldr	r4, [pc, #56]	; (80a143c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1404:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1406:	a801      	add	r0, sp, #4
 80a1408:	f7ff ffe4 	bl	80a13d4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a140c:	6823      	ldr	r3, [r4, #0]
 80a140e:	07db      	lsls	r3, r3, #31
 80a1410:	d410      	bmi.n	80a1434 <_Z17_fetch_usbserial1v+0x34>
 80a1412:	4620      	mov	r0, r4
 80a1414:	f7fe fe43 	bl	80a009e <__cxa_guard_acquire>
 80a1418:	b160      	cbz	r0, 80a1434 <_Z17_fetch_usbserial1v+0x34>
 80a141a:	aa01      	add	r2, sp, #4
 80a141c:	2101      	movs	r1, #1
 80a141e:	4808      	ldr	r0, [pc, #32]	; (80a1440 <_Z17_fetch_usbserial1v+0x40>)
 80a1420:	f7ff ff84 	bl	80a132c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1424:	4620      	mov	r0, r4
 80a1426:	f7fe fe3f 	bl	80a00a8 <__cxa_guard_release>
 80a142a:	4a06      	ldr	r2, [pc, #24]	; (80a1444 <_Z17_fetch_usbserial1v+0x44>)
 80a142c:	4906      	ldr	r1, [pc, #24]	; (80a1448 <_Z17_fetch_usbserial1v+0x48>)
 80a142e:	4804      	ldr	r0, [pc, #16]	; (80a1440 <_Z17_fetch_usbserial1v+0x40>)
 80a1430:	f000 f998 	bl	80a1764 <__aeabi_atexit>
  return _usbserial1;
}
 80a1434:	4802      	ldr	r0, [pc, #8]	; (80a1440 <_Z17_fetch_usbserial1v+0x40>)
 80a1436:	b006      	add	sp, #24
 80a1438:	bd10      	pop	{r4, pc}
 80a143a:	bf00      	nop
 80a143c:	20000720 	.word	0x20000720
 80a1440:	200007a8 	.word	0x200007a8
 80a1444:	20000368 	.word	0x20000368
 80a1448:	080a12dd 	.word	0x080a12dd

080a144c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a144c:	2200      	movs	r2, #0
 80a144e:	4611      	mov	r1, r2
 80a1450:	6840      	ldr	r0, [r0, #4]
 80a1452:	f7ff bc57 	b.w	80a0d04 <network_ready>

080a1456 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1456:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1458:	4616      	mov	r6, r2
 80a145a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a145c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a145e:	460f      	mov	r7, r1
 80a1460:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1462:	2100      	movs	r1, #0
 80a1464:	a803      	add	r0, sp, #12
 80a1466:	f000 fae4 	bl	80a1a32 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a146a:	4630      	mov	r0, r6
 80a146c:	f000 fb12 	bl	80a1a94 <strlen>
 80a1470:	2500      	movs	r5, #0
 80a1472:	9500      	str	r5, [sp, #0]
 80a1474:	b281      	uxth	r1, r0
 80a1476:	687b      	ldr	r3, [r7, #4]
 80a1478:	aa03      	add	r2, sp, #12
 80a147a:	4630      	mov	r0, r6
 80a147c:	f7ff fbf6 	bl	80a0c6c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1480:	b120      	cbz	r0, 80a148c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1482:	4629      	mov	r1, r5
 80a1484:	4620      	mov	r0, r4
 80a1486:	f7ff fd3d 	bl	80a0f04 <_ZN9IPAddressC1Em>
 80a148a:	e003      	b.n	80a1494 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a148c:	a903      	add	r1, sp, #12
 80a148e:	4620      	mov	r0, r4
 80a1490:	f7ff fd26 	bl	80a0ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1494:	4620      	mov	r0, r4
 80a1496:	b009      	add	sp, #36	; 0x24
 80a1498:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a149a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a149a:	2200      	movs	r2, #0
 80a149c:	4611      	mov	r1, r2
 80a149e:	6840      	ldr	r0, [r0, #4]
 80a14a0:	f7ff bc50 	b.w	80a0d44 <network_listening>

080a14a4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a14a4:	2200      	movs	r2, #0
 80a14a6:	4611      	mov	r1, r2
 80a14a8:	6840      	ldr	r0, [r0, #4]
 80a14aa:	f7ff bc5b 	b.w	80a0d64 <network_get_listen_timeout>

080a14ae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a14ae:	2200      	movs	r2, #0
 80a14b0:	6840      	ldr	r0, [r0, #4]
 80a14b2:	f7ff bc4f 	b.w	80a0d54 <network_set_listen_timeout>

080a14b6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a14b6:	2200      	movs	r2, #0
 80a14b8:	f081 0101 	eor.w	r1, r1, #1
 80a14bc:	6840      	ldr	r0, [r0, #4]
 80a14be:	f7ff bc39 	b.w	80a0d34 <network_listen>

080a14c2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a14c2:	2300      	movs	r3, #0
 80a14c4:	461a      	mov	r2, r3
 80a14c6:	4619      	mov	r1, r3
 80a14c8:	6840      	ldr	r0, [r0, #4]
 80a14ca:	f7ff bc2b 	b.w	80a0d24 <network_off>

080a14ce <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a14ce:	2300      	movs	r3, #0
 80a14d0:	461a      	mov	r2, r3
 80a14d2:	4619      	mov	r1, r3
 80a14d4:	6840      	ldr	r0, [r0, #4]
 80a14d6:	f7ff bc1d 	b.w	80a0d14 <network_on>

080a14da <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a14da:	2200      	movs	r2, #0
 80a14dc:	4611      	mov	r1, r2
 80a14de:	6840      	ldr	r0, [r0, #4]
 80a14e0:	f7ff bc00 	b.w	80a0ce4 <network_connecting>

080a14e4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a14e4:	2200      	movs	r2, #0
 80a14e6:	2102      	movs	r1, #2
 80a14e8:	6840      	ldr	r0, [r0, #4]
 80a14ea:	f7ff bc03 	b.w	80a0cf4 <network_disconnect>

080a14ee <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a14ee:	2300      	movs	r3, #0
 80a14f0:	461a      	mov	r2, r3
 80a14f2:	6840      	ldr	r0, [r0, #4]
 80a14f4:	f7ff bbee 	b.w	80a0cd4 <network_connect>

080a14f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a14f8:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a14fa:	2204      	movs	r2, #4
 80a14fc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a14fe:	4a02      	ldr	r2, [pc, #8]	; (80a1508 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1500:	601a      	str	r2, [r3, #0]
 80a1502:	4770      	bx	lr
 80a1504:	200008c0 	.word	0x200008c0
 80a1508:	080a1cd8 	.word	0x080a1cd8

080a150c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a150c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a150e:	4b14      	ldr	r3, [pc, #80]	; (80a1560 <serialEventRun+0x54>)
 80a1510:	b133      	cbz	r3, 80a1520 <serialEventRun+0x14>
 80a1512:	f7ff ff39 	bl	80a1388 <_Z16_fetch_usbserialv>
 80a1516:	6803      	ldr	r3, [r0, #0]
 80a1518:	691b      	ldr	r3, [r3, #16]
 80a151a:	4798      	blx	r3
 80a151c:	2800      	cmp	r0, #0
 80a151e:	dc16      	bgt.n	80a154e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1520:	4b10      	ldr	r3, [pc, #64]	; (80a1564 <serialEventRun+0x58>)
 80a1522:	b133      	cbz	r3, 80a1532 <serialEventRun+0x26>
 80a1524:	f7ff feb2 	bl	80a128c <_Z22__fetch_global_Serial1v>
 80a1528:	6803      	ldr	r3, [r0, #0]
 80a152a:	691b      	ldr	r3, [r3, #16]
 80a152c:	4798      	blx	r3
 80a152e:	2800      	cmp	r0, #0
 80a1530:	dc10      	bgt.n	80a1554 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1532:	4b0d      	ldr	r3, [pc, #52]	; (80a1568 <serialEventRun+0x5c>)
 80a1534:	b10b      	cbz	r3, 80a153a <serialEventRun+0x2e>
 80a1536:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a153a:	4b0c      	ldr	r3, [pc, #48]	; (80a156c <serialEventRun+0x60>)
 80a153c:	b17b      	cbz	r3, 80a155e <serialEventRun+0x52>
 80a153e:	f7ff ff5f 	bl	80a1400 <_Z17_fetch_usbserial1v>
 80a1542:	6803      	ldr	r3, [r0, #0]
 80a1544:	691b      	ldr	r3, [r3, #16]
 80a1546:	4798      	blx	r3
 80a1548:	2800      	cmp	r0, #0
 80a154a:	dc06      	bgt.n	80a155a <serialEventRun+0x4e>
 80a154c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a154e:	f3af 8000 	nop.w
 80a1552:	e7e5      	b.n	80a1520 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1554:	f3af 8000 	nop.w
 80a1558:	e7eb      	b.n	80a1532 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a155a:	f3af 8000 	nop.w
 80a155e:	bd08      	pop	{r3, pc}
	...

080a1570 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1570:	b508      	push	{r3, lr}
	serialEventRun();
 80a1572:	f7ff ffcb 	bl	80a150c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1576:	f7ff fa7f 	bl	80a0a78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a157a:	4b01      	ldr	r3, [pc, #4]	; (80a1580 <_post_loop+0x10>)
 80a157c:	6018      	str	r0, [r3, #0]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	200008d0 	.word	0x200008d0

080a1584 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1584:	4802      	ldr	r0, [pc, #8]	; (80a1590 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1586:	4a03      	ldr	r2, [pc, #12]	; (80a1594 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1588:	4903      	ldr	r1, [pc, #12]	; (80a1598 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a158a:	1a12      	subs	r2, r2, r0
 80a158c:	f000 ba46 	b.w	80a1a1c <memcpy>
 80a1590:	40024000 	.word	0x40024000
 80a1594:	40024004 	.word	0x40024004
 80a1598:	080a1dd0 	.word	0x080a1dd0

080a159c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a159c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a159e:	2300      	movs	r3, #0
 80a15a0:	9300      	str	r3, [sp, #0]
 80a15a2:	461a      	mov	r2, r3
 80a15a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15a8:	f7ff fb82 	bl	80a0cb0 <system_ctrl_set_result>
}
 80a15ac:	b003      	add	sp, #12
 80a15ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a15b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a15b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a15b6:	8843      	ldrh	r3, [r0, #2]
 80a15b8:	2b0a      	cmp	r3, #10
 80a15ba:	d008      	beq.n	80a15ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a15bc:	2b50      	cmp	r3, #80	; 0x50
 80a15be:	d109      	bne.n	80a15d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a15c0:	4b09      	ldr	r3, [pc, #36]	; (80a15e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a15c2:	681b      	ldr	r3, [r3, #0]
 80a15c4:	b13b      	cbz	r3, 80a15d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a15c6:	b003      	add	sp, #12
 80a15c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a15cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a15ce:	f7ff ffe5 	bl	80a159c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a15d2:	e006      	b.n	80a15e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a15d4:	2300      	movs	r3, #0
 80a15d6:	9300      	str	r3, [sp, #0]
 80a15d8:	461a      	mov	r2, r3
 80a15da:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15de:	f7ff fb67 	bl	80a0cb0 <system_ctrl_set_result>
        break;
    }
}
 80a15e2:	b003      	add	sp, #12
 80a15e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a15e8:	200008c8 	.word	0x200008c8

080a15ec <module_user_init_hook>:

void module_user_init_hook()
{
 80a15ec:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a15ee:	4c10      	ldr	r4, [pc, #64]	; (80a1630 <module_user_init_hook+0x44>)
 80a15f0:	4d10      	ldr	r5, [pc, #64]	; (80a1634 <module_user_init_hook+0x48>)
 80a15f2:	6823      	ldr	r3, [r4, #0]
 80a15f4:	42ab      	cmp	r3, r5
 80a15f6:	4b10      	ldr	r3, [pc, #64]	; (80a1638 <module_user_init_hook+0x4c>)
 80a15f8:	bf0c      	ite	eq
 80a15fa:	2201      	moveq	r2, #1
 80a15fc:	2200      	movne	r2, #0
 80a15fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1600:	d002      	beq.n	80a1608 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1602:	f7ff ffbf 	bl	80a1584 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1606:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1608:	f7ff fa26 	bl	80a0a58 <HAL_RNG_GetRandomNumber>
 80a160c:	4604      	mov	r4, r0
    srand(seed);
 80a160e:	f000 fa19 	bl	80a1a44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1612:	4b0a      	ldr	r3, [pc, #40]	; (80a163c <module_user_init_hook+0x50>)
 80a1614:	b113      	cbz	r3, 80a161c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1616:	4620      	mov	r0, r4
 80a1618:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a161c:	2100      	movs	r1, #0
 80a161e:	4807      	ldr	r0, [pc, #28]	; (80a163c <module_user_init_hook+0x50>)
 80a1620:	f7ff fb50 	bl	80a0cc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1628:	2100      	movs	r1, #0
 80a162a:	4805      	ldr	r0, [pc, #20]	; (80a1640 <module_user_init_hook+0x54>)
 80a162c:	f7ff bb36 	b.w	80a0c9c <system_ctrl_set_app_request_handler>
 80a1630:	40024000 	.word	0x40024000
 80a1634:	9a271c1e 	.word	0x9a271c1e
 80a1638:	200008cc 	.word	0x200008cc
 80a163c:	00000000 	.word	0x00000000
 80a1640:	080a15b5 	.word	0x080a15b5

080a1644 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1644:	b510      	push	{r4, lr}
 80a1646:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1648:	480f      	ldr	r0, [pc, #60]	; (80a1688 <pinAvailable+0x44>)
 80a164a:	f7ff fdb7 	bl	80a11bc <_ZN8SPIClass9isEnabledEv>
 80a164e:	b128      	cbz	r0, 80a165c <pinAvailable+0x18>
 80a1650:	f1a4 030d 	sub.w	r3, r4, #13
 80a1654:	2b02      	cmp	r3, #2
 80a1656:	d801      	bhi.n	80a165c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1658:	2000      	movs	r0, #0
 80a165a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a165c:	f000 f828 	bl	80a16b0 <_Z19__fetch_global_Wirev>
 80a1660:	f7ff fc0c 	bl	80a0e7c <_ZN7TwoWire9isEnabledEv>
 80a1664:	b108      	cbz	r0, 80a166a <pinAvailable+0x26>
 80a1666:	2c01      	cmp	r4, #1
 80a1668:	d9f6      	bls.n	80a1658 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a166a:	f7ff fe0f 	bl	80a128c <_Z22__fetch_global_Serial1v>
 80a166e:	f7ff fe09 	bl	80a1284 <_ZN11USARTSerial9isEnabledEv>
 80a1672:	b118      	cbz	r0, 80a167c <pinAvailable+0x38>
 80a1674:	f1a4 0312 	sub.w	r3, r4, #18
 80a1678:	2b01      	cmp	r3, #1
 80a167a:	d9ed      	bls.n	80a1658 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a167c:	2c17      	cmp	r4, #23
 80a167e:	bf8c      	ite	hi
 80a1680:	2000      	movhi	r0, #0
 80a1682:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1684:	bd10      	pop	{r4, pc}
 80a1686:	bf00      	nop
 80a1688:	20000904 	.word	0x20000904

080a168c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a168c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a168e:	b538      	push	{r3, r4, r5, lr}
 80a1690:	4604      	mov	r4, r0
 80a1692:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1694:	d80a      	bhi.n	80a16ac <pinMode+0x20>
 80a1696:	29ff      	cmp	r1, #255	; 0xff
 80a1698:	d008      	beq.n	80a16ac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a169a:	f7ff ffd3 	bl	80a1644 <pinAvailable>
 80a169e:	b128      	cbz	r0, 80a16ac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a16a0:	4629      	mov	r1, r5
 80a16a2:	4620      	mov	r0, r4
}
 80a16a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a16a8:	f7ff b9f6 	b.w	80a0a98 <HAL_Pin_Mode>
 80a16ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a16b0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a16b0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a16b2:	4d0b      	ldr	r5, [pc, #44]	; (80a16e0 <_Z19__fetch_global_Wirev+0x30>)
 80a16b4:	6829      	ldr	r1, [r5, #0]
 80a16b6:	f011 0401 	ands.w	r4, r1, #1
 80a16ba:	d10f      	bne.n	80a16dc <_Z19__fetch_global_Wirev+0x2c>
 80a16bc:	4628      	mov	r0, r5
 80a16be:	f7fe fcee 	bl	80a009e <__cxa_guard_acquire>
 80a16c2:	b158      	cbz	r0, 80a16dc <_Z19__fetch_global_Wirev+0x2c>
 80a16c4:	4621      	mov	r1, r4
 80a16c6:	4807      	ldr	r0, [pc, #28]	; (80a16e4 <_Z19__fetch_global_Wirev+0x34>)
 80a16c8:	f7ff fba4 	bl	80a0e14 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a16cc:	4628      	mov	r0, r5
 80a16ce:	f7fe fceb 	bl	80a00a8 <__cxa_guard_release>
 80a16d2:	4a05      	ldr	r2, [pc, #20]	; (80a16e8 <_Z19__fetch_global_Wirev+0x38>)
 80a16d4:	4905      	ldr	r1, [pc, #20]	; (80a16ec <_Z19__fetch_global_Wirev+0x3c>)
 80a16d6:	4803      	ldr	r0, [pc, #12]	; (80a16e4 <_Z19__fetch_global_Wirev+0x34>)
 80a16d8:	f000 f844 	bl	80a1764 <__aeabi_atexit>
	return wire;
}
 80a16dc:	4801      	ldr	r0, [pc, #4]	; (80a16e4 <_Z19__fetch_global_Wirev+0x34>)
 80a16de:	bd38      	pop	{r3, r4, r5, pc}
 80a16e0:	200008d4 	.word	0x200008d4
 80a16e4:	200008d8 	.word	0x200008d8
 80a16e8:	20000368 	.word	0x20000368
 80a16ec:	080a0dbd 	.word	0x080a0dbd

080a16f0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a16f0:	b513      	push	{r0, r1, r4, lr}
 80a16f2:	4c08      	ldr	r4, [pc, #32]	; (80a1714 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a16f4:	2300      	movs	r3, #0
 80a16f6:	461a      	mov	r2, r3
 80a16f8:	4619      	mov	r1, r3
 80a16fa:	9300      	str	r3, [sp, #0]
 80a16fc:	4620      	mov	r0, r4
 80a16fe:	f7ff fc17 	bl	80a0f30 <_ZN9IPAddressC1Ehhhh>
 80a1702:	4620      	mov	r0, r4
 80a1704:	4a04      	ldr	r2, [pc, #16]	; (80a1718 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1706:	4905      	ldr	r1, [pc, #20]	; (80a171c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1708:	b002      	add	sp, #8
 80a170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a170e:	f000 b829 	b.w	80a1764 <__aeabi_atexit>
 80a1712:	bf00      	nop
 80a1714:	200008ec 	.word	0x200008ec
 80a1718:	20000368 	.word	0x20000368
 80a171c:	080a0e85 	.word	0x080a0e85

080a1720 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1720:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1722:	4c0c      	ldr	r4, [pc, #48]	; (80a1754 <_GLOBAL__sub_I_SPI+0x34>)
 80a1724:	4e0c      	ldr	r6, [pc, #48]	; (80a1758 <_GLOBAL__sub_I_SPI+0x38>)
 80a1726:	4d0d      	ldr	r5, [pc, #52]	; (80a175c <_GLOBAL__sub_I_SPI+0x3c>)
 80a1728:	2100      	movs	r1, #0
 80a172a:	4620      	mov	r0, r4
 80a172c:	f7ff fd32 	bl	80a1194 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1730:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1732:	4c0b      	ldr	r4, [pc, #44]	; (80a1760 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1734:	4632      	mov	r2, r6
 80a1736:	4629      	mov	r1, r5
 80a1738:	f000 f814 	bl	80a1764 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a173c:	2101      	movs	r1, #1
 80a173e:	4620      	mov	r0, r4
 80a1740:	f7ff fd28 	bl	80a1194 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1744:	4632      	mov	r2, r6
 80a1746:	4629      	mov	r1, r5
 80a1748:	4620      	mov	r0, r4
 80a174a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a174e:	f000 b809 	b.w	80a1764 <__aeabi_atexit>
 80a1752:	bf00      	nop
 80a1754:	20000904 	.word	0x20000904
 80a1758:	20000368 	.word	0x20000368
 80a175c:	080a1185 	.word	0x080a1185
 80a1760:	20000914 	.word	0x20000914

080a1764 <__aeabi_atexit>:
 80a1764:	460b      	mov	r3, r1
 80a1766:	4601      	mov	r1, r0
 80a1768:	4618      	mov	r0, r3
 80a176a:	f000 b949 	b.w	80a1a00 <__cxa_atexit>
	...

080a1770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1770:	4b24      	ldr	r3, [pc, #144]	; (80a1804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1772:	681a      	ldr	r2, [r3, #0]
 80a1774:	07d0      	lsls	r0, r2, #31
 80a1776:	bf5c      	itt	pl
 80a1778:	2201      	movpl	r2, #1
 80a177a:	601a      	strpl	r2, [r3, #0]
 80a177c:	4b22      	ldr	r3, [pc, #136]	; (80a1808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a177e:	681a      	ldr	r2, [r3, #0]
 80a1780:	07d1      	lsls	r1, r2, #31
 80a1782:	bf5c      	itt	pl
 80a1784:	2201      	movpl	r2, #1
 80a1786:	601a      	strpl	r2, [r3, #0]
 80a1788:	4b20      	ldr	r3, [pc, #128]	; (80a180c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a178a:	681a      	ldr	r2, [r3, #0]
 80a178c:	07d2      	lsls	r2, r2, #31
 80a178e:	bf5c      	itt	pl
 80a1790:	2201      	movpl	r2, #1
 80a1792:	601a      	strpl	r2, [r3, #0]
 80a1794:	4b1e      	ldr	r3, [pc, #120]	; (80a1810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1796:	681a      	ldr	r2, [r3, #0]
 80a1798:	07d0      	lsls	r0, r2, #31
 80a179a:	bf5c      	itt	pl
 80a179c:	2201      	movpl	r2, #1
 80a179e:	601a      	strpl	r2, [r3, #0]
 80a17a0:	4b1c      	ldr	r3, [pc, #112]	; (80a1814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a17a2:	681a      	ldr	r2, [r3, #0]
 80a17a4:	07d1      	lsls	r1, r2, #31
 80a17a6:	bf5c      	itt	pl
 80a17a8:	2201      	movpl	r2, #1
 80a17aa:	601a      	strpl	r2, [r3, #0]
 80a17ac:	4b1a      	ldr	r3, [pc, #104]	; (80a1818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a17ae:	681a      	ldr	r2, [r3, #0]
 80a17b0:	07d2      	lsls	r2, r2, #31
 80a17b2:	bf5c      	itt	pl
 80a17b4:	2201      	movpl	r2, #1
 80a17b6:	601a      	strpl	r2, [r3, #0]
 80a17b8:	4b18      	ldr	r3, [pc, #96]	; (80a181c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a17ba:	681a      	ldr	r2, [r3, #0]
 80a17bc:	07d0      	lsls	r0, r2, #31
 80a17be:	bf5c      	itt	pl
 80a17c0:	2201      	movpl	r2, #1
 80a17c2:	601a      	strpl	r2, [r3, #0]
 80a17c4:	4b16      	ldr	r3, [pc, #88]	; (80a1820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a17c6:	681a      	ldr	r2, [r3, #0]
 80a17c8:	07d1      	lsls	r1, r2, #31
 80a17ca:	bf5c      	itt	pl
 80a17cc:	2201      	movpl	r2, #1
 80a17ce:	601a      	strpl	r2, [r3, #0]
 80a17d0:	4b14      	ldr	r3, [pc, #80]	; (80a1824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a17d2:	681a      	ldr	r2, [r3, #0]
 80a17d4:	07d2      	lsls	r2, r2, #31
 80a17d6:	bf5c      	itt	pl
 80a17d8:	2201      	movpl	r2, #1
 80a17da:	601a      	strpl	r2, [r3, #0]
 80a17dc:	4b12      	ldr	r3, [pc, #72]	; (80a1828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a17de:	681a      	ldr	r2, [r3, #0]
 80a17e0:	07d0      	lsls	r0, r2, #31
 80a17e2:	bf5c      	itt	pl
 80a17e4:	2201      	movpl	r2, #1
 80a17e6:	601a      	strpl	r2, [r3, #0]
 80a17e8:	4b10      	ldr	r3, [pc, #64]	; (80a182c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a17ea:	681a      	ldr	r2, [r3, #0]
 80a17ec:	07d1      	lsls	r1, r2, #31
 80a17ee:	bf5c      	itt	pl
 80a17f0:	2201      	movpl	r2, #1
 80a17f2:	601a      	strpl	r2, [r3, #0]
 80a17f4:	4b0e      	ldr	r3, [pc, #56]	; (80a1830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a17f6:	681a      	ldr	r2, [r3, #0]
 80a17f8:	07d2      	lsls	r2, r2, #31
 80a17fa:	bf5c      	itt	pl
 80a17fc:	2201      	movpl	r2, #1
 80a17fe:	601a      	strpl	r2, [r3, #0]
 80a1800:	4770      	bx	lr
 80a1802:	bf00      	nop
 80a1804:	20000950 	.word	0x20000950
 80a1808:	2000094c 	.word	0x2000094c
 80a180c:	20000948 	.word	0x20000948
 80a1810:	20000944 	.word	0x20000944
 80a1814:	20000940 	.word	0x20000940
 80a1818:	2000093c 	.word	0x2000093c
 80a181c:	20000938 	.word	0x20000938
 80a1820:	20000934 	.word	0x20000934
 80a1824:	20000930 	.word	0x20000930
 80a1828:	2000092c 	.word	0x2000092c
 80a182c:	20000928 	.word	0x20000928
 80a1830:	20000924 	.word	0x20000924

080a1834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1834:	4b18      	ldr	r3, [pc, #96]	; (80a1898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d1      	lsls	r1, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b16      	ldr	r3, [pc, #88]	; (80a189c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d2      	lsls	r2, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4b14      	ldr	r3, [pc, #80]	; (80a18a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d0      	lsls	r0, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b12      	ldr	r3, [pc, #72]	; (80a18a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d1      	lsls	r1, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b10      	ldr	r3, [pc, #64]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d2      	lsls	r2, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b0e      	ldr	r3, [pc, #56]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d0      	lsls	r0, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b0c      	ldr	r3, [pc, #48]	; (80a18b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d1      	lsls	r1, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b0a      	ldr	r3, [pc, #40]	; (80a18b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d2      	lsls	r2, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4770      	bx	lr
 80a1896:	bf00      	nop
 80a1898:	20000970 	.word	0x20000970
 80a189c:	2000096c 	.word	0x2000096c
 80a18a0:	20000968 	.word	0x20000968
 80a18a4:	20000964 	.word	0x20000964
 80a18a8:	20000960 	.word	0x20000960
 80a18ac:	2000095c 	.word	0x2000095c
 80a18b0:	20000958 	.word	0x20000958
 80a18b4:	20000954 	.word	0x20000954

080a18b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a18b8:	4b18      	ldr	r3, [pc, #96]	; (80a191c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d1      	lsls	r1, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4b16      	ldr	r3, [pc, #88]	; (80a1920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a18c6:	681a      	ldr	r2, [r3, #0]
 80a18c8:	07d2      	lsls	r2, r2, #31
 80a18ca:	bf5c      	itt	pl
 80a18cc:	2201      	movpl	r2, #1
 80a18ce:	601a      	strpl	r2, [r3, #0]
 80a18d0:	4b14      	ldr	r3, [pc, #80]	; (80a1924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a18d2:	681a      	ldr	r2, [r3, #0]
 80a18d4:	07d0      	lsls	r0, r2, #31
 80a18d6:	bf5c      	itt	pl
 80a18d8:	2201      	movpl	r2, #1
 80a18da:	601a      	strpl	r2, [r3, #0]
 80a18dc:	4b12      	ldr	r3, [pc, #72]	; (80a1928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a18de:	681a      	ldr	r2, [r3, #0]
 80a18e0:	07d1      	lsls	r1, r2, #31
 80a18e2:	bf5c      	itt	pl
 80a18e4:	2201      	movpl	r2, #1
 80a18e6:	601a      	strpl	r2, [r3, #0]
 80a18e8:	4b10      	ldr	r3, [pc, #64]	; (80a192c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a18ea:	681a      	ldr	r2, [r3, #0]
 80a18ec:	07d2      	lsls	r2, r2, #31
 80a18ee:	bf5c      	itt	pl
 80a18f0:	2201      	movpl	r2, #1
 80a18f2:	601a      	strpl	r2, [r3, #0]
 80a18f4:	4b0e      	ldr	r3, [pc, #56]	; (80a1930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a18f6:	681a      	ldr	r2, [r3, #0]
 80a18f8:	07d0      	lsls	r0, r2, #31
 80a18fa:	bf5c      	itt	pl
 80a18fc:	2201      	movpl	r2, #1
 80a18fe:	601a      	strpl	r2, [r3, #0]
 80a1900:	4b0c      	ldr	r3, [pc, #48]	; (80a1934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1902:	681a      	ldr	r2, [r3, #0]
 80a1904:	07d1      	lsls	r1, r2, #31
 80a1906:	bf5c      	itt	pl
 80a1908:	2201      	movpl	r2, #1
 80a190a:	601a      	strpl	r2, [r3, #0]
 80a190c:	4b0a      	ldr	r3, [pc, #40]	; (80a1938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a190e:	681a      	ldr	r2, [r3, #0]
 80a1910:	07d2      	lsls	r2, r2, #31
 80a1912:	bf5c      	itt	pl
 80a1914:	2201      	movpl	r2, #1
 80a1916:	601a      	strpl	r2, [r3, #0]
 80a1918:	4770      	bx	lr
 80a191a:	bf00      	nop
 80a191c:	20000990 	.word	0x20000990
 80a1920:	2000098c 	.word	0x2000098c
 80a1924:	20000988 	.word	0x20000988
 80a1928:	20000984 	.word	0x20000984
 80a192c:	20000980 	.word	0x20000980
 80a1930:	2000097c 	.word	0x2000097c
 80a1934:	20000978 	.word	0x20000978
 80a1938:	20000974 	.word	0x20000974

080a193c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a193c:	4b24      	ldr	r3, [pc, #144]	; (80a19d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d0      	lsls	r0, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4b22      	ldr	r3, [pc, #136]	; (80a19d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a194a:	681a      	ldr	r2, [r3, #0]
 80a194c:	07d1      	lsls	r1, r2, #31
 80a194e:	bf5c      	itt	pl
 80a1950:	2201      	movpl	r2, #1
 80a1952:	601a      	strpl	r2, [r3, #0]
 80a1954:	4b20      	ldr	r3, [pc, #128]	; (80a19d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1956:	681a      	ldr	r2, [r3, #0]
 80a1958:	07d2      	lsls	r2, r2, #31
 80a195a:	bf5c      	itt	pl
 80a195c:	2201      	movpl	r2, #1
 80a195e:	601a      	strpl	r2, [r3, #0]
 80a1960:	4b1e      	ldr	r3, [pc, #120]	; (80a19dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1962:	681a      	ldr	r2, [r3, #0]
 80a1964:	07d0      	lsls	r0, r2, #31
 80a1966:	bf5c      	itt	pl
 80a1968:	2201      	movpl	r2, #1
 80a196a:	601a      	strpl	r2, [r3, #0]
 80a196c:	4b1c      	ldr	r3, [pc, #112]	; (80a19e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a196e:	681a      	ldr	r2, [r3, #0]
 80a1970:	07d1      	lsls	r1, r2, #31
 80a1972:	bf5c      	itt	pl
 80a1974:	2201      	movpl	r2, #1
 80a1976:	601a      	strpl	r2, [r3, #0]
 80a1978:	4b1a      	ldr	r3, [pc, #104]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a197a:	681a      	ldr	r2, [r3, #0]
 80a197c:	07d2      	lsls	r2, r2, #31
 80a197e:	bf5c      	itt	pl
 80a1980:	2201      	movpl	r2, #1
 80a1982:	601a      	strpl	r2, [r3, #0]
 80a1984:	4b18      	ldr	r3, [pc, #96]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	07d0      	lsls	r0, r2, #31
 80a198a:	bf5c      	itt	pl
 80a198c:	2201      	movpl	r2, #1
 80a198e:	601a      	strpl	r2, [r3, #0]
 80a1990:	4b16      	ldr	r3, [pc, #88]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1992:	681a      	ldr	r2, [r3, #0]
 80a1994:	07d1      	lsls	r1, r2, #31
 80a1996:	bf5c      	itt	pl
 80a1998:	2201      	movpl	r2, #1
 80a199a:	601a      	strpl	r2, [r3, #0]
 80a199c:	4b14      	ldr	r3, [pc, #80]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a199e:	681a      	ldr	r2, [r3, #0]
 80a19a0:	07d2      	lsls	r2, r2, #31
 80a19a2:	bf5c      	itt	pl
 80a19a4:	2201      	movpl	r2, #1
 80a19a6:	601a      	strpl	r2, [r3, #0]
 80a19a8:	4b12      	ldr	r3, [pc, #72]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a19aa:	681a      	ldr	r2, [r3, #0]
 80a19ac:	07d0      	lsls	r0, r2, #31
 80a19ae:	bf5c      	itt	pl
 80a19b0:	2201      	movpl	r2, #1
 80a19b2:	601a      	strpl	r2, [r3, #0]
 80a19b4:	4b10      	ldr	r3, [pc, #64]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a19b6:	681a      	ldr	r2, [r3, #0]
 80a19b8:	07d1      	lsls	r1, r2, #31
 80a19ba:	bf5c      	itt	pl
 80a19bc:	2201      	movpl	r2, #1
 80a19be:	601a      	strpl	r2, [r3, #0]
 80a19c0:	4b0e      	ldr	r3, [pc, #56]	; (80a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a19c2:	681a      	ldr	r2, [r3, #0]
 80a19c4:	07d2      	lsls	r2, r2, #31
 80a19c6:	bf5c      	itt	pl
 80a19c8:	2201      	movpl	r2, #1
 80a19ca:	601a      	strpl	r2, [r3, #0]
 80a19cc:	4770      	bx	lr
 80a19ce:	bf00      	nop
 80a19d0:	200009c0 	.word	0x200009c0
 80a19d4:	200009bc 	.word	0x200009bc
 80a19d8:	200009b8 	.word	0x200009b8
 80a19dc:	200009b4 	.word	0x200009b4
 80a19e0:	200009b0 	.word	0x200009b0
 80a19e4:	200009ac 	.word	0x200009ac
 80a19e8:	200009a8 	.word	0x200009a8
 80a19ec:	200009a4 	.word	0x200009a4
 80a19f0:	200009a0 	.word	0x200009a0
 80a19f4:	2000099c 	.word	0x2000099c
 80a19f8:	20000998 	.word	0x20000998
 80a19fc:	20000994 	.word	0x20000994

080a1a00 <__cxa_atexit>:
 80a1a00:	b510      	push	{r4, lr}
 80a1a02:	4c05      	ldr	r4, [pc, #20]	; (80a1a18 <__cxa_atexit+0x18>)
 80a1a04:	4613      	mov	r3, r2
 80a1a06:	b12c      	cbz	r4, 80a1a14 <__cxa_atexit+0x14>
 80a1a08:	460a      	mov	r2, r1
 80a1a0a:	4601      	mov	r1, r0
 80a1a0c:	2002      	movs	r0, #2
 80a1a0e:	f3af 8000 	nop.w
 80a1a12:	bd10      	pop	{r4, pc}
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	bd10      	pop	{r4, pc}
 80a1a18:	00000000 	.word	0x00000000

080a1a1c <memcpy>:
 80a1a1c:	b510      	push	{r4, lr}
 80a1a1e:	1e43      	subs	r3, r0, #1
 80a1a20:	440a      	add	r2, r1
 80a1a22:	4291      	cmp	r1, r2
 80a1a24:	d004      	beq.n	80a1a30 <memcpy+0x14>
 80a1a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1a2e:	e7f8      	b.n	80a1a22 <memcpy+0x6>
 80a1a30:	bd10      	pop	{r4, pc}

080a1a32 <memset>:
 80a1a32:	4603      	mov	r3, r0
 80a1a34:	4402      	add	r2, r0
 80a1a36:	4293      	cmp	r3, r2
 80a1a38:	d002      	beq.n	80a1a40 <memset+0xe>
 80a1a3a:	f803 1b01 	strb.w	r1, [r3], #1
 80a1a3e:	e7fa      	b.n	80a1a36 <memset+0x4>
 80a1a40:	4770      	bx	lr
	...

080a1a44 <srand>:
 80a1a44:	b538      	push	{r3, r4, r5, lr}
 80a1a46:	4b12      	ldr	r3, [pc, #72]	; (80a1a90 <srand+0x4c>)
 80a1a48:	4605      	mov	r5, r0
 80a1a4a:	681c      	ldr	r4, [r3, #0]
 80a1a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a4e:	b9d3      	cbnz	r3, 80a1a86 <srand+0x42>
 80a1a50:	2018      	movs	r0, #24
 80a1a52:	f7ff f98f 	bl	80a0d74 <malloc>
 80a1a56:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1a5a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a5c:	8003      	strh	r3, [r0, #0]
 80a1a5e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a62:	8043      	strh	r3, [r0, #2]
 80a1a64:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a68:	8083      	strh	r3, [r0, #4]
 80a1a6a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1a6e:	80c3      	strh	r3, [r0, #6]
 80a1a70:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1a74:	8103      	strh	r3, [r0, #8]
 80a1a76:	2305      	movs	r3, #5
 80a1a78:	8143      	strh	r3, [r0, #10]
 80a1a7a:	230b      	movs	r3, #11
 80a1a7c:	8183      	strh	r3, [r0, #12]
 80a1a7e:	2201      	movs	r2, #1
 80a1a80:	2300      	movs	r3, #0
 80a1a82:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a88:	2200      	movs	r2, #0
 80a1a8a:	611d      	str	r5, [r3, #16]
 80a1a8c:	615a      	str	r2, [r3, #20]
 80a1a8e:	bd38      	pop	{r3, r4, r5, pc}
 80a1a90:	20000364 	.word	0x20000364

080a1a94 <strlen>:
 80a1a94:	4603      	mov	r3, r0
 80a1a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a9a:	2a00      	cmp	r2, #0
 80a1a9c:	d1fb      	bne.n	80a1a96 <strlen+0x2>
 80a1a9e:	1a18      	subs	r0, r3, r0
 80a1aa0:	3801      	subs	r0, #1
 80a1aa2:	4770      	bx	lr

080a1aa4 <dynalib_user>:
 80a1aa4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1ab4:	0000 0000                                   ....

080a1ab8 <_ZTVN9NSFastLED8NEOPIXELILh2EEE>:
	...
 80a1ac0:	05e9 080a 064b 080a 00dd 080a 00af 080a     ....K...........
 80a1ad0:	6548 6c6c 2c6f 7720 726f 646c 0021 0000     Hello, world!...

080a1ae0 <_ZTV7TwoWire>:
	...
 80a1ae8:	0dbd 080a 0e07 080a 0ddf 080a 0dbf 080a     ................
 80a1af8:	0de7 080a 0def 080a 0df7 080a 0dff 080a     ................

080a1b08 <_ZTV9IPAddress>:
	...
 80a1b10:	0e93 080a 0e85 080a 0e87 080a 0066 6e6c     ............f.ln
 80a1b20:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a1b30:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a1b40:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a1b50:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a1b60:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a1b70:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a1b80:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a1b90:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a1ba0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a1bb0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a1bc0:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a1bd0:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a1be0:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1bf0:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1c00 <_ZTVN5spark12NetworkClassE>:
	...
 80a1c08:	0f59 080a 0f63 080a 0f6d 080a 0f77 080a     Y...c...m...w...
 80a1c18:	0f81 080a 0f8d 080a 0f99 080a 0fa5 080a     ................
 80a1c28:	0fad 080a 0fb7 080a 0fc1 080a               ............

080a1c34 <_ZTV8SPIClass>:
	...
 80a1c3c:	1185 080a 1187 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1c4c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1c5c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1c6c:	0000 0000                                   ....

080a1c70 <_ZTV11USARTSerial>:
	...
 80a1c78:	1205 080a 1229 080a 1235 080a 1025 080a     ....)...5...%...
 80a1c88:	1211 080a 121d 080a 1217 080a 1223 080a     ............#...
 80a1c98:	1207 080a 120b 080a                         ........

080a1ca0 <_ZTV9USBSerial>:
	...
 80a1ca8:	12dd 080a 1321 080a 12fb 080a 1025 080a     ....!.......%...
 80a1cb8:	12f5 080a 12df 080a 12e7 080a 131b 080a     ................
 80a1cc8:	12ef 080a 12d9 080a                         ........

080a1cd0 <_ZTVN5spark9WiFiClassE>:
	...
 80a1cd8:	14ef 080a 14e5 080a 14db 080a 144d 080a     ............M...
 80a1ce8:	14cf 080a 14c3 080a 14b7 080a 14af 080a     ................
 80a1cf8:	14a5 080a 149b 080a 1457 080a               ........W...

080a1d04 <__sf_fake_stdin>:
	...

080a1d24 <__sf_fake_stdout>:
	...

080a1d44 <__sf_fake_stderr>:
	...
 80a1d64:	0043                                        C.

080a1d66 <link_const_variable_data_end>:
	...

080a1d68 <link_constructors_location>:
 80a1d68:	080a06ad 	.word	0x080a06ad
 80a1d6c:	080a08c9 	.word	0x080a08c9
 80a1d70:	080a09dd 	.word	0x080a09dd
 80a1d74:	080a09f9 	.word	0x080a09f9
 80a1d78:	080a09fd 	.word	0x080a09fd
 80a1d7c:	080a0a01 	.word	0x080a0a01
 80a1d80:	080a0a05 	.word	0x080a0a05
 80a1d84:	080a0a09 	.word	0x080a0a09
 80a1d88:	080a0a0d 	.word	0x080a0a0d
 80a1d8c:	080a0a11 	.word	0x080a0a11
 80a1d90:	080a0a15 	.word	0x080a0a15
 80a1d94:	080a0f49 	.word	0x080a0f49
 80a1d98:	080a1011 	.word	0x080a1011
 80a1d9c:	080a1169 	.word	0x080a1169
 80a1da0:	080a11d9 	.word	0x080a11d9
 80a1da4:	080a11f1 	.word	0x080a11f1
 80a1da8:	080a14f9 	.word	0x080a14f9
 80a1dac:	080a16f1 	.word	0x080a16f1
 80a1db0:	080a1721 	.word	0x080a1721
 80a1db4:	080a1771 	.word	0x080a1771
 80a1db8:	080a1835 	.word	0x080a1835
 80a1dbc:	080a18b9 	.word	0x080a18b9
 80a1dc0:	080a193d 	.word	0x080a193d

080a1dc4 <link_constructors_end>:
	...
