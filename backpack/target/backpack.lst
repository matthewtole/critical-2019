
/Users/matthewtole/Documents/Projects/critical-2019/backpack/target/backpack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017264  2**0
                  CONTENTS
  3 .data         00000068  2003e2c0  000d71d0  0000e2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004c8  2003e328  2003e328  0001e328  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7238  000d7238  00017238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7260  000d7260  00017260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bdfc2  00000000  00000000  00017264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000117e7  00000000  00000000  000d5226  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016fae  00000000  00000000  000e6a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002500  00000000  00000000  000fd9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003a80  00000000  00000000  000ffebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00034236  00000000  00000000  0010393b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a23a  00000000  00000000  00137b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d9146  00000000  00000000  00161dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c490  00000000  00000000  0023aef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	d0 6c 0d 00                                         .l..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fdbf 	bl	d6bb0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fdc4 	bl	d6bc6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2c0 	.word	0x2003e2c0
   d4048:	000d71d0 	.word	0x000d71d0
   d404c:	2003e328 	.word	0x2003e328
   d4050:	2003e328 	.word	0x2003e328
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fba3 	bl	d67a4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d71c8 	.word	0x000d71c8
   d4080:	000d718c 	.word	0x000d718c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b99e 	b.w	d43c4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa0f 	bl	d44ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bb55 	b.w	d6740 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b8b5 	b.w	d5204 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b8bb 	b.w	d5214 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b8b9 	b.w	d5214 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 f80e 	bl	d50cc <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4dad 	.word	0x000d4dad

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	4718      	bx	r3

000d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40cc:	2a01      	cmp	r2, #1
   d40ce:	d002      	beq.n	d40d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40d0:	2a02      	cmp	r2, #2
   d40d2:	d002      	beq.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40d4:	e004      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40d6:	6001      	str	r1, [r0, #0]
	      break;
   d40d8:	e002      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40da:	680b      	ldr	r3, [r1, #0]
   d40dc:	b100      	cbz	r0, d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40de:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr

000d40e4 <_Z10next_colorv>:
      server.write(String::format("\nack: %d (%s)\n", str.length(), str.c_str()));

      if (str.length() != 6)
      {
        return;
      }
   d40e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      String command = str.substring(0, 3);
   d40e6:	f44f 7080 	mov.w	r0, #256	; 0x100
   d40ea:	f001 fb95 	bl	d5818 <_Z6randomi>
   d40ee:	4604      	mov	r4, r0
   d40f0:	f44f 7080 	mov.w	r0, #256	; 0x100
   d40f4:	f001 fb90 	bl	d5818 <_Z6randomi>
   d40f8:	4605      	mov	r5, r0
   d40fa:	f44f 7080 	mov.w	r0, #256	; 0x100
   d40fe:	f001 fb8b 	bl	d5818 <_Z6randomi>
   d4102:	b2e9      	uxtb	r1, r5
   d4104:	b2c2      	uxtb	r2, r0
   d4106:	b2e0      	uxtb	r0, r4
   d4108:	f000 fd4c 	bl	d4ba4 <_ZN17Adafruit_NeoPixel5ColorEhhh>
   d410c:	4d14      	ldr	r5, [pc, #80]	; (d4160 <_Z10next_colorv+0x7c>)
   d410e:	6028      	str	r0, [r5, #0]
      if (command == "DFU")
   d4110:	f002 fa5a 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4114:	220a      	movs	r2, #10
   d4116:	4604      	mov	r4, r0
   d4118:	6829      	ldr	r1, [r5, #0]
   d411a:	4668      	mov	r0, sp
   d411c:	f001 fc4f 	bl	d59be <_ZN6StringC1Emh>
   d4120:	9900      	ldr	r1, [sp, #0]
   d4122:	4620      	mov	r0, r4
   d4124:	f001 fb35 	bl	d5792 <_ZN5Print7printlnEPKc>
   d4128:	4668      	mov	r0, sp
   d412a:	f001 fbdd 	bl	d58e8 <_ZN6StringD1Ev>
   d412e:	2400      	movs	r4, #0
      {
        dfu_mode();
        return;
   d4130:	682a      	ldr	r2, [r5, #0]
   d4132:	480c      	ldr	r0, [pc, #48]	; (d4164 <_Z10next_colorv+0x80>)
   d4134:	b2a6      	uxth	r6, r4
   d4136:	4422      	add	r2, r4
   d4138:	4631      	mov	r1, r6
   d413a:	f000 fce8 	bl	d4b0e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      }
   d413e:	682a      	ldr	r2, [r5, #0]
   d4140:	4809      	ldr	r0, [pc, #36]	; (d4168 <_Z10next_colorv+0x84>)
   d4142:	4422      	add	r2, r4
   d4144:	4631      	mov	r1, r6
   d4146:	3401      	adds	r4, #1
   d4148:	f000 fce1 	bl	d4b0e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      {
        return;
      }
      String command = str.substring(0, 3);
      if (command == "DFU")
      {
   d414c:	2c96      	cmp	r4, #150	; 0x96
   d414e:	d1ef      	bne.n	d4130 <_Z10next_colorv+0x4c>
        dfu_mode();
        return;
      }
      if (command == "PAT")
      {
   d4150:	4804      	ldr	r0, [pc, #16]	; (d4164 <_Z10next_colorv+0x80>)
   d4152:	f000 fb0b 	bl	d476c <_ZN17Adafruit_NeoPixel4showEv>
        // uint8_t pattern_id = str.substring(3).toInt();
   d4156:	4804      	ldr	r0, [pc, #16]	; (d4168 <_Z10next_colorv+0x84>)
   d4158:	f000 fb08 	bl	d476c <_ZN17Adafruit_NeoPixel4showEv>
        // Serial.printf("%d", pattern_id);
        // set_pattern();
        return;
   d415c:	b004      	add	sp, #16
   d415e:	bd70      	pop	{r4, r5, r6, pc}
   d4160:	2003e35c 	.word	0x2003e35c
   d4164:	2003e37c 	.word	0x2003e37c
   d4168:	2003e398 	.word	0x2003e398

000d416c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d416c:	6943      	ldr	r3, [r0, #20]
   d416e:	b113      	cbz	r3, d4176 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4170:	6983      	ldr	r3, [r0, #24]
   d4172:	300c      	adds	r0, #12
   d4174:	4718      	bx	r3
   d4176:	4770      	bx	lr

000d4178 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4178:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d417a:	2100      	movs	r1, #0
   d417c:	4604      	mov	r4, r0
   d417e:	4608      	mov	r0, r1
   d4180:	f000 fdc4 	bl	d4d0c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4184:	a902      	add	r1, sp, #8
   d4186:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4188:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d418a:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
   d418e:	f000 fdd5 	bl	d4d3c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4192:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4194:	b10c      	cbz	r4, d419a <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
   d4196:	2301      	movs	r3, #1
   d4198:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d419a:	2100      	movs	r1, #0
   d419c:	2001      	movs	r0, #1
   d419e:	f000 fdb5 	bl	d4d0c <os_thread_scheduling>
            }
        }
        if (t) {
   d41a2:	b12c      	cbz	r4, d41b0 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
   d41a4:	6823      	ldr	r3, [r4, #0]
   d41a6:	4620      	mov	r0, r4
   d41a8:	689b      	ldr	r3, [r3, #8]
   d41aa:	4798      	blx	r3
            t->running = false;
   d41ac:	2300      	movs	r3, #0
   d41ae:	7123      	strb	r3, [r4, #4]
        }
    }
   d41b0:	b002      	add	sp, #8
   d41b2:	bd10      	pop	{r4, pc}

000d41b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.20>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d41b4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d41b6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d41b8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d41ba:	689b      	ldr	r3, [r3, #8]
   d41bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41be:	68a3      	ldr	r3, [r4, #8]
   d41c0:	3b01      	subs	r3, #1
   d41c2:	60a3      	str	r3, [r4, #8]
   d41c4:	b92b      	cbnz	r3, d41d2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.20+0x1e>
            _M_destroy();
   d41c6:	6823      	ldr	r3, [r4, #0]
   d41c8:	4620      	mov	r0, r4
   d41ca:	68db      	ldr	r3, [r3, #12]
        }
    }
   d41cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d41d0:	4718      	bx	r3
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41d4:	b510      	push	{r4, lr}
   d41d6:	4b06      	ldr	r3, [pc, #24]	; (d41f0 <_ZN9TCPClientD1Ev+0x1c>)
   d41d8:	6003      	str	r3, [r0, #0]
   d41da:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41dc:	6980      	ldr	r0, [r0, #24]
   d41de:	b128      	cbz	r0, d41ec <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41e0:	6843      	ldr	r3, [r0, #4]
   d41e2:	3b01      	subs	r3, #1
   d41e4:	6043      	str	r3, [r0, #4]
   d41e6:	b90b      	cbnz	r3, d41ec <_ZN9TCPClientD1Ev+0x18>
   d41e8:	f7ff ffe4 	bl	d41b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.20>
   d41ec:	4620      	mov	r0, r4
   d41ee:	bd10      	pop	{r4, pc}
   d41f0:	000d6f34 	.word	0x000d6f34

000d41f4 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   d41f4:	b538      	push	{r3, r4, r5, lr}
   d41f6:	4604      	mov	r4, r0
   d41f8:	4b05      	ldr	r3, [pc, #20]	; (d4210 <_ZN9TCPServerD1Ev+0x1c>)
   d41fa:	f844 3b14 	str.w	r3, [r4], #20
   d41fe:	4605      	mov	r5, r0
   d4200:	f002 f80e 	bl	d6220 <_ZN9TCPServer4stopEv>
   d4204:	4620      	mov	r0, r4
   d4206:	f7ff ffe5 	bl	d41d4 <_ZN9TCPClientD1Ev>
   d420a:	4628      	mov	r0, r5
   d420c:	bd38      	pop	{r3, r4, r5, pc}
   d420e:	bf00      	nop
   d4210:	000d704c 	.word	0x000d704c

000d4214 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4214:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4216:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4218:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d421a:	b113      	cbz	r3, d4222 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d421c:	2203      	movs	r2, #3
   d421e:	4601      	mov	r1, r0
   d4220:	4798      	blx	r3
    }
   d4222:	4620      	mov	r0, r4
   d4224:	bd10      	pop	{r4, pc}
	...

000d4228 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d4228:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d422a:	4b13      	ldr	r3, [pc, #76]	; (d4278 <_ZN5TimerD1Ev+0x50>)
   d422c:	6003      	str	r3, [r0, #0]
   d422e:	4604      	mov	r4, r0
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
   d4230:	6880      	ldr	r0, [r0, #8]
   d4232:	b1c8      	cbz	r0, d4268 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4234:	2500      	movs	r5, #0
   d4236:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d423a:	e88d 0028 	stmia.w	sp, {r3, r5}
   d423e:	2102      	movs	r1, #2
   d4240:	462b      	mov	r3, r5
   d4242:	462a      	mov	r2, r5
   d4244:	f000 fd82 	bl	d4d4c <os_timer_change>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
   d4248:	4629      	mov	r1, r5
   d424a:	68a0      	ldr	r0, [r4, #8]
   d424c:	f000 fd96 	bl	d4d7c <os_timer_set_id>
            while (running) {
   d4250:	7923      	ldrb	r3, [r4, #4]
   d4252:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4256:	b113      	cbz	r3, d425e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4258:	f000 fd40 	bl	d4cdc <os_thread_yield>
   d425c:	e7f8      	b.n	d4250 <_ZN5TimerD1Ev+0x28>
            }
            os_timer_destroy(handle, nullptr);
   d425e:	4629      	mov	r1, r5
   d4260:	68a0      	ldr	r0, [r4, #8]
   d4262:	f000 fd63 	bl	d4d2c <os_timer_destroy>
            handle = nullptr;
   d4266:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4268:	f104 000c 	add.w	r0, r4, #12
   d426c:	f7ff ffd2 	bl	d4214 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4270:	4620      	mov	r0, r4
   d4272:	b003      	add	sp, #12
   d4274:	bd30      	pop	{r4, r5, pc}
   d4276:	bf00      	nop
   d4278:	000d6cec 	.word	0x000d6cec

000d427c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
   d427c:	b510      	push	{r4, lr}
   d427e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
   d4280:	f7ff ffd2 	bl	d4228 <_ZN5TimerD1Ev>
   d4284:	4620      	mov	r0, r4
   d4286:	f7ff ff08 	bl	d409a <_ZdlPv>
   d428a:	4620      	mov	r0, r4
   d428c:	bd10      	pop	{r4, pc}

000d428e <_ZN5spark9WiFiClass11wifi_configEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d428e:	2200      	movs	r2, #0
   d4290:	4611      	mov	r1, r2
   d4292:	6840      	ldr	r0, [r0, #4]
   d4294:	f000 bf5e 	b.w	d5154 <network_config>

000d4298 <_ZN9TCPClientD0Ev>:
   d4298:	b510      	push	{r4, lr}
   d429a:	4604      	mov	r4, r0
   d429c:	f7ff ff9a 	bl	d41d4 <_ZN9TCPClientD1Ev>
   d42a0:	4620      	mov	r0, r4
   d42a2:	f7ff fefa 	bl	d409a <_ZdlPv>
   d42a6:	4620      	mov	r0, r4
   d42a8:	bd10      	pop	{r4, pc}

000d42aa <_ZN9TCPServerD0Ev>:
   d42aa:	b510      	push	{r4, lr}
   d42ac:	4604      	mov	r4, r0
   d42ae:	f7ff ffa1 	bl	d41f4 <_ZN9TCPServerD1Ev>
   d42b2:	4620      	mov	r0, r4
   d42b4:	f7ff fef1 	bl	d409a <_ZdlPv>
   d42b8:	4620      	mov	r0, r4
   d42ba:	bd10      	pop	{r4, pc}

000d42bc <_Z8dfu_modev>:
TCPServer server = TCPServer(23);
TCPClient client;

void dfu_mode()
{
  System.dfu();
   d42bc:	2000      	movs	r0, #0
   d42be:	f001 bc19 	b.w	d5af4 <_ZN11SystemClass3dfuEb>
	...

000d42c4 <_Z11fadeToBlackih>:
}

Timer timer(5 * 1000, next_color);
   d42c4:	b573      	push	{r0, r1, r4, r5, r6, lr}

uint32_t pattern_color;

void next_color() {
  pattern_color = strip.Color(random(256), random(256), random(256));
   d42c6:	b284      	uxth	r4, r0
void dfu_mode()
{
  System.dfu();
}

Timer timer(5 * 1000, next_color);
   d42c8:	460d      	mov	r5, r1

uint32_t pattern_color;

void next_color() {
  pattern_color = strip.Color(random(256), random(256), random(256));
   d42ca:	481b      	ldr	r0, [pc, #108]	; (d4338 <_Z11fadeToBlackih+0x74>)
   d42cc:	4621      	mov	r1, r4
   d42ce:	f000 fc6e 	bl	d4bae <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
    for (uint16_t l = 0; l < PIXEL_COUNT; l += 1)
   d42d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
  {
    strip.setPixelColor(l, pattern_color);
    strip2.setPixelColor(l, pattern_color);
  }
   d42d6:	2b0a      	cmp	r3, #10
   d42d8:	bf88      	it	hi
   d42da:	fb05 f203 	mulhi.w	r2, r5, r3
uint32_t pattern_color;

void next_color() {
  pattern_color = strip.Color(random(256), random(256), random(256));
    for (uint16_t l = 0; l < PIXEL_COUNT; l += 1)
  {
   d42de:	f3c0 2107 	ubfx	r1, r0, #8, #8
    strip.setPixelColor(l, pattern_color);
    strip2.setPixelColor(l, pattern_color);
  }
   d42e2:	bf81      	itttt	hi
   d42e4:	f44f 7680 	movhi.w	r6, #256	; 0x100
   d42e8:	fb92 f2f6 	sdivhi	r2, r2, r6
   d42ec:	1a9a      	subhi	r2, r3, r2
   d42ee:	b2d2      	uxtbhi	r2, r2
   d42f0:	bf98      	it	ls
   d42f2:	2200      	movls	r2, #0
  strip.show();
   d42f4:	290a      	cmp	r1, #10
   d42f6:	bf88      	it	hi
   d42f8:	fb05 f301 	mulhi.w	r3, r5, r1

void next_color() {
  pattern_color = strip.Color(random(256), random(256), random(256));
    for (uint16_t l = 0; l < PIXEL_COUNT; l += 1)
  {
    strip.setPixelColor(l, pattern_color);
   d42fc:	b2c0      	uxtb	r0, r0
    strip2.setPixelColor(l, pattern_color);
  }
  strip.show();
   d42fe:	bf81      	itttt	hi
   d4300:	f44f 7680 	movhi.w	r6, #256	; 0x100
   d4304:	fb93 f3f6 	sdivhi	r3, r3, r6
   d4308:	1acb      	subhi	r3, r1, r3
   d430a:	b2db      	uxtbhi	r3, r3
   d430c:	bf98      	it	ls
   d430e:	2300      	movls	r3, #0
  strip2.show();
   d4310:	280a      	cmp	r0, #10
   d4312:	bf81      	itttt	hi
   d4314:	fb05 f100 	mulhi.w	r1, r5, r0
   d4318:	f44f 7580 	movhi.w	r5, #256	; 0x100
   d431c:	fb91 f1f5 	sdivhi	r1, r1, r5
   d4320:	1a40      	subhi	r0, r0, r1
   d4322:	bf8c      	ite	hi
   d4324:	b2c0      	uxtbhi	r0, r0
   d4326:	2000      	movls	r0, #0

  timer.start();
   d4328:	9000      	str	r0, [sp, #0]
   d432a:	4621      	mov	r1, r4
   d432c:	4802      	ldr	r0, [pc, #8]	; (d4338 <_Z11fadeToBlackih+0x74>)
   d432e:	f000 fbbf 	bl	d4ab0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
}
   d4332:	b002      	add	sp, #8
   d4334:	bd70      	pop	{r4, r5, r6, pc}
   d4336:	bf00      	nop
   d4338:	2003e37c 	.word	0x2003e37c

000d433c <_Z10meteorRainhhhhhbi>:

void setup()
{
   d433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4340:	b085      	sub	sp, #20
   d4342:	4606      	mov	r6, r0

   d4344:	481e      	ldr	r0, [pc, #120]	; (d43c0 <_Z10meteorRainhhhhhbi+0x84>)

  timer.start();
}

void setup()
{
   d4346:	9203      	str	r2, [sp, #12]
   d4348:	460f      	mov	r7, r1
   d434a:	4699      	mov	r9, r3
   d434c:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   d4350:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c

   d4354:	f000 fcab 	bl	d4cae <_ZN17Adafruit_NeoPixel5clearEv>
  WiFi.connect();
   d4358:	4819      	ldr	r0, [pc, #100]	; (d43c0 <_Z10meteorRainhhhhhbi+0x84>)
   d435a:	f000 fa07 	bl	d476c <_ZN17Adafruit_NeoPixel4showEv>
  server.begin();

   d435e:	2400      	movs	r4, #0
   d4360:	2500      	movs	r5, #0
  // Make sure your Serial Terminal app is closed before powering your device
  Serial.begin(9600);
  // Wait for a USB serial connection for up to 30 seconds
  waitFor(Serial.isConnected, 30000);

   d4362:	f1ba 0f00 	cmp.w	sl, #0
   d4366:	d025      	beq.n	d43b4 <_Z10meteorRainhhhhhbi+0x78>
   d4368:	200a      	movs	r0, #10
   d436a:	f001 fa55 	bl	d5818 <_Z6randomi>
   d436e:	2805      	cmp	r0, #5
   d4370:	dc20      	bgt.n	d43b4 <_Z10meteorRainhhhhhbi+0x78>
  server.begin();

  // Make sure your Serial Terminal app is closed before powering your device
  Serial.begin(9600);
  // Wait for a USB serial connection for up to 30 seconds
  waitFor(Serial.isConnected, 30000);
   d4372:	3501      	adds	r5, #1
   d4374:	2d96      	cmp	r5, #150	; 0x96
   d4376:	d1f4      	bne.n	d4362 <_Z10meteorRainhhhhhbi+0x26>
   d4378:	4625      	mov	r5, r4
   d437a:	ebc9 0b04 	rsb	fp, r9, r4
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.subnetMask());
  Serial.println(WiFi.gatewayIP());
  Serial.println(WiFi.SSID());

  timer.start();
   d437e:	45ab      	cmp	fp, r5
   d4380:	d00b      	beq.n	d439a <_Z10meteorRainhhhhhbi+0x5e>
}
   d4382:	2d95      	cmp	r5, #149	; 0x95
   d4384:	d807      	bhi.n	d4396 <_Z10meteorRainhhhhhbi+0x5a>

   d4386:	9b03      	ldr	r3, [sp, #12]
   d4388:	9300      	str	r3, [sp, #0]
   d438a:	4632      	mov	r2, r6
   d438c:	463b      	mov	r3, r7
   d438e:	b2a9      	uxth	r1, r5
   d4390:	480b      	ldr	r0, [pc, #44]	; (d43c0 <_Z10meteorRainhhhhhbi+0x84>)
   d4392:	f000 fb8d 	bl	d4ab0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d4396:	3d01      	subs	r5, #1
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.subnetMask());
  Serial.println(WiFi.gatewayIP());
  Serial.println(WiFi.SSID());

  timer.start();
   d4398:	e7f1      	b.n	d437e <_Z10meteorRainhhhhhbi+0x42>
}

// // loop() runs over and over again, as quickly as it can execute.
void loop()
{
  if (client.connected())
   d439a:	4809      	ldr	r0, [pc, #36]	; (d43c0 <_Z10meteorRainhhhhhbi+0x84>)
   d439c:	f000 f9e6 	bl	d476c <_ZN17Adafruit_NeoPixel4showEv>
void setup()
{

  WiFi.connect();
  server.begin();

   d43a0:	3401      	adds	r4, #1

// // loop() runs over and over again, as quickly as it can execute.
void loop()
{
  if (client.connected())
  {
   d43a2:	9810      	ldr	r0, [sp, #64]	; 0x40
   d43a4:	f000 ff56 	bl	d5254 <delay>
void setup()
{

  WiFi.connect();
  server.begin();

   d43a8:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   d43ac:	d1d8      	bne.n	d4360 <_Z10meteorRainhhhhhbi+0x24>
void loop()
{
  if (client.connected())
  {
    // echo all available bytes back to the client
    if (client.available())
   d43ae:	b005      	add	sp, #20
   d43b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // Make sure your Serial Terminal app is closed before powering your device
  Serial.begin(9600);
  // Wait for a USB serial connection for up to 30 seconds
  waitFor(Serial.isConnected, 30000);

  Serial.println(WiFi.localIP());
   d43b4:	4641      	mov	r1, r8
   d43b6:	4628      	mov	r0, r5
   d43b8:	f7ff ff84 	bl	d42c4 <_Z11fadeToBlackih>
   d43bc:	e7d9      	b.n	d4372 <_Z10meteorRainhhhhhbi+0x36>
   d43be:	bf00      	nop
   d43c0:	2003e37c 	.word	0x2003e37c

000d43c4 <setup>:
        // Serial.printf("%d", pattern_id);
        // set_pattern();
        return;
      }
    }
  }
   d43c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d43c6:	4836      	ldr	r0, [pc, #216]	; (d44a0 <setup+0xdc>)
   d43c8:	2300      	movs	r3, #0
   d43ca:	4619      	mov	r1, r3
   d43cc:	b087      	sub	sp, #28
   d43ce:	461a      	mov	r2, r3
   d43d0:	6840      	ldr	r0, [r0, #4]
   d43d2:	f000 fec7 	bl	d5164 <network_connect>
  else
  {
    // if no client is yet connected, check for a new connection
   d43d6:	4833      	ldr	r0, [pc, #204]	; (d44a4 <setup+0xe0>)
   d43d8:	f001 ff2e 	bl	d6238 <_ZN9TCPServer5beginEv>
    client = server.available();
  }
}
   d43dc:	f002 f8f4 	bl	d65c8 <_Z16_fetch_usbserialv>
   d43e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43e4:	f002 f8e0 	bl	d65a8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d43e8:	2000      	movs	r0, #0
   d43ea:	f000 fcf7 	bl	d4ddc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43ee:	2500      	movs	r5, #0
   d43f0:	4604      	mov	r4, r0
   d43f2:	f247 562f 	movw	r6, #29999	; 0x752f
   d43f6:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d43f8:	2000      	movs	r0, #0
   d43fa:	f000 fcef 	bl	d4ddc <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43fe:	1b00      	subs	r0, r0, r4
   d4400:	eb61 0105 	sbc.w	r1, r1, r5
   d4404:	428f      	cmp	r7, r1
   d4406:	bf08      	it	eq
   d4408:	4286      	cmpeq	r6, r0
   d440a:	d307      	bcc.n	d441c <setup+0x58>

void set_pattern(uint8_t pattern_id) {
   d440c:	f002 f8dc 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4410:	f002 f8ce 	bl	d65b0 <_ZN9USBSerial11isConnectedEv>
   d4414:	b910      	cbnz	r0, d441c <setup+0x58>
            spark_process();
   d4416:	f000 fe8d 	bl	d5134 <spark_process>
   d441a:	e7ed      	b.n	d43f8 <setup+0x34>
   d441c:	f002 f8d4 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4420:	f002 f8c6 	bl	d65b0 <_ZN9USBSerial11isConnectedEv>
  pattern_color = (pattern_id == 0 ? strip.Color(255, 0, 0) : strip.Color(0, 0, 255));
   d4424:	f002 f8d0 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4428:	4604      	mov	r4, r0
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d442a:	481d      	ldr	r0, [pc, #116]	; (d44a0 <setup+0xdc>)
   d442c:	f7ff ff2f 	bl	d428e <_ZN5spark9WiFiClass11wifi_configEv>
   d4430:	1c81      	adds	r1, r0, #2
   d4432:	4668      	mov	r0, sp
   d4434:	f000 ffda 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4438:	4669      	mov	r1, sp
   d443a:	4620      	mov	r0, r4
   d443c:	f001 f9b3 	bl	d57a6 <_ZN5Print7printlnERK9Printable>
   d4440:	f002 f8c2 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4444:	4604      	mov	r4, r0
    }

    IPAddress subnetMask() {
        return IPAddress(wifi_config()->nw.aucSubnetMask);
   d4446:	4816      	ldr	r0, [pc, #88]	; (d44a0 <setup+0xdc>)
   d4448:	f7ff ff21 	bl	d428e <_ZN5spark9WiFiClass11wifi_configEv>
   d444c:	f100 0113 	add.w	r1, r0, #19
   d4450:	4668      	mov	r0, sp
   d4452:	f000 ffcb 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4456:	4669      	mov	r1, sp
   d4458:	4620      	mov	r0, r4
   d445a:	f001 f9a4 	bl	d57a6 <_ZN5Print7printlnERK9Printable>
   d445e:	f002 f8b3 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4462:	4604      	mov	r4, r0
    }

    IPAddress gatewayIP() {
        return IPAddress(wifi_config()->nw.aucDefaultGateway);
   d4464:	480e      	ldr	r0, [pc, #56]	; (d44a0 <setup+0xdc>)
   d4466:	f7ff ff12 	bl	d428e <_ZN5spark9WiFiClass11wifi_configEv>
   d446a:	f100 0124 	add.w	r1, r0, #36	; 0x24
   d446e:	4668      	mov	r0, sp
   d4470:	f000 ffbc 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4474:	4669      	mov	r1, sp
   d4476:	4620      	mov	r0, r4
   d4478:	f001 f995 	bl	d57a6 <_ZN5Print7printlnERK9Printable>
   d447c:	f002 f8a4 	bl	d65c8 <_Z16_fetch_usbserialv>
   d4480:	4604      	mov	r4, r0
    		memcpy(bssid, wifi_config()->BSSID, 6);
    		return bssid;
    }

    const char *SSID() {
        return (const char *) wifi_config()->uaSSID;
   d4482:	4807      	ldr	r0, [pc, #28]	; (d44a0 <setup+0xdc>)
   d4484:	f7ff ff03 	bl	d428e <_ZN5spark9WiFiClass11wifi_configEv>
   d4488:	f100 015d 	add.w	r1, r0, #93	; 0x5d
   d448c:	4620      	mov	r0, r4
   d448e:	f001 f980 	bl	d5792 <_ZN5Print7printlnEPKc>
   d4492:	2164      	movs	r1, #100	; 0x64
   d4494:	4804      	ldr	r0, [pc, #16]	; (d44a8 <setup+0xe4>)
   d4496:	f000 fbe4 	bl	d4c62 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
   d449a:	b007      	add	sp, #28
   d449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d449e:	bf00      	nop
   d44a0:	2003e708 	.word	0x2003e708
   d44a4:	2003e32c 	.word	0x2003e32c
   d44a8:	2003e37c 	.word	0x2003e37c

000d44ac <loop>:
   d44ac:	b530      	push	{r4, r5, lr}
   d44ae:	2140      	movs	r1, #64	; 0x40
   d44b0:	b091      	sub	sp, #68	; 0x44
   d44b2:	2201      	movs	r2, #1
   d44b4:	231e      	movs	r3, #30
   d44b6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d44ba:	4d34      	ldr	r5, [pc, #208]	; (d458c <loop+0xe0>)
   d44bc:	22ff      	movs	r2, #255	; 0xff
   d44be:	4610      	mov	r0, r2
   d44c0:	230a      	movs	r3, #10
   d44c2:	4611      	mov	r1, r2
   d44c4:	f7ff ff3a 	bl	d433c <_Z10meteorRainhhhhhbi>
   d44c8:	4628      	mov	r0, r5
   d44ca:	f001 fb44 	bl	d5b56 <_ZN9TCPClient9connectedEv>
   d44ce:	462c      	mov	r4, r5
   d44d0:	2800      	cmp	r0, #0
   d44d2:	d037      	beq.n	d4544 <loop+0x98>
   d44d4:	4628      	mov	r0, r5
   d44d6:	f001 fd29 	bl	d5f2c <_ZN9TCPClient9availableEv>
   d44da:	2800      	cmp	r0, #0
   d44dc:	d054      	beq.n	d4588 <loop+0xdc>
   d44de:	4629      	mov	r1, r5
   d44e0:	a805      	add	r0, sp, #20
   d44e2:	f001 f9ed 	bl	d58c0 <_ZN6Stream10readStringEv>
   d44e6:	9b05      	ldr	r3, [sp, #20]
   d44e8:	9a07      	ldr	r2, [sp, #28]
   d44ea:	4929      	ldr	r1, [pc, #164]	; (d4590 <loop+0xe4>)
   d44ec:	a809      	add	r0, sp, #36	; 0x24
   d44ee:	f001 fad9 	bl	d5aa4 <_ZN6String6formatEPKcz>
   d44f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d44f4:	b13c      	cbz	r4, d4506 <loop+0x5a>
      return write((const uint8_t *)str, strlen(str));
   d44f6:	4620      	mov	r0, r4
   d44f8:	f002 fbe2 	bl	d6cc0 <strlen>
   d44fc:	4621      	mov	r1, r4
   d44fe:	4602      	mov	r2, r0
   d4500:	4824      	ldr	r0, [pc, #144]	; (d4594 <loop+0xe8>)
   d4502:	f001 fde3 	bl	d60cc <_ZN9TCPServer5writeEPKhj>
   d4506:	a809      	add	r0, sp, #36	; 0x24
   d4508:	f001 f9ee 	bl	d58e8 <_ZN6StringD1Ev>
   d450c:	9b07      	ldr	r3, [sp, #28]
   d450e:	2b06      	cmp	r3, #6
   d4510:	d114      	bne.n	d453c <loop+0x90>
   d4512:	a905      	add	r1, sp, #20
   d4514:	a809      	add	r0, sp, #36	; 0x24
   d4516:	2303      	movs	r3, #3
   d4518:	2200      	movs	r2, #0
   d451a:	f001 fa9b 	bl	d5a54 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d451e:	491e      	ldr	r1, [pc, #120]	; (d4598 <loop+0xec>)
   d4520:	a809      	add	r0, sp, #36	; 0x24
   d4522:	f001 fa84 	bl	d5a2e <_ZNK6String6equalsEPKc>
   d4526:	b110      	cbz	r0, d452e <loop+0x82>
   d4528:	f7ff fec8 	bl	d42bc <_Z8dfu_modev>
   d452c:	e003      	b.n	d4536 <loop+0x8a>
   d452e:	491b      	ldr	r1, [pc, #108]	; (d459c <loop+0xf0>)
   d4530:	a809      	add	r0, sp, #36	; 0x24
   d4532:	f001 fa7c 	bl	d5a2e <_ZNK6String6equalsEPKc>
   d4536:	a809      	add	r0, sp, #36	; 0x24
   d4538:	f001 f9d6 	bl	d58e8 <_ZN6StringD1Ev>
   d453c:	a805      	add	r0, sp, #20
   d453e:	f001 f9d3 	bl	d58e8 <_ZN6StringD1Ev>
   d4542:	e021      	b.n	d4588 <loop+0xdc>
   d4544:	4913      	ldr	r1, [pc, #76]	; (d4594 <loop+0xe8>)
   d4546:	a809      	add	r0, sp, #36	; 0x24
   d4548:	f001 ff1e 	bl	d6388 <_ZN9TCPServer9availableEv>
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d454c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d454e:	606b      	str	r3, [r5, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4552:	60ab      	str	r3, [r5, #8]
   d4554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4556:	60eb      	str	r3, [r5, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d4558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d455a:	612b      	str	r3, [r5, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d455c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d455e:	616b      	str	r3, [r5, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4560:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	if (__tmp != _M_pi)
   d4562:	69a3      	ldr	r3, [r4, #24]
   d4564:	429d      	cmp	r5, r3
   d4566:	d00c      	beq.n	d4582 <loop+0xd6>
	  {
	    if (__tmp != 0)
   d4568:	b115      	cbz	r5, d4570 <loop+0xc4>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d456a:	686b      	ldr	r3, [r5, #4]
   d456c:	3301      	adds	r3, #1
   d456e:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4570:	69a0      	ldr	r0, [r4, #24]
   d4572:	b128      	cbz	r0, d4580 <loop+0xd4>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4574:	6843      	ldr	r3, [r0, #4]
   d4576:	3b01      	subs	r3, #1
   d4578:	6043      	str	r3, [r0, #4]
   d457a:	b90b      	cbnz	r3, d4580 <loop+0xd4>
   d457c:	f7ff fe1a 	bl	d41b4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.7.constprop.20>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4580:	61a5      	str	r5, [r4, #24]
   d4582:	a809      	add	r0, sp, #36	; 0x24
   d4584:	f7ff fe26 	bl	d41d4 <_ZN9TCPClientD1Ev>
   d4588:	b011      	add	sp, #68	; 0x44
   d458a:	bd30      	pop	{r4, r5, pc}
   d458c:	2003e360 	.word	0x2003e360
   d4590:	000d6cf8 	.word	0x000d6cf8
   d4594:	2003e32c 	.word	0x2003e32c
   d4598:	000d6d07 	.word	0x000d6d07
   d459c:	000d6d0b 	.word	0x000d6d0b

000d45a0 <_GLOBAL__sub_I_SystemMode>:
   d45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d45a2:	b089      	sub	sp, #36	; 0x24

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45a4:	f000 fc22 	bl	d4dec <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d45a8:	4b34      	ldr	r3, [pc, #208]	; (d467c <_GLOBAL__sub_I_SystemMode+0xdc>)
#define PIXEL_PIN D2
#define PIXEL_PIN2 D3
#define PIXEL_COUNT 50
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d45aa:	4c35      	ldr	r4, [pc, #212]	; (d4680 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d45ac:	4e35      	ldr	r6, [pc, #212]	; (d4684 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d45ae:	4f36      	ldr	r7, [pc, #216]	; (d4688 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d45b0:	2500      	movs	r5, #0
   d45b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d45b6:	701d      	strb	r5, [r3, #0]
   d45b8:	805d      	strh	r5, [r3, #2]
   d45ba:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45bc:	2003      	movs	r0, #3
   d45be:	f000 fd95 	bl	d50ec <set_system_mode>
   d45c2:	2302      	movs	r3, #2
   d45c4:	461a      	mov	r2, r3
   d45c6:	2196      	movs	r1, #150	; 0x96
   d45c8:	4620      	mov	r0, r4
   d45ca:	f000 f8be 	bl	d474a <_ZN17Adafruit_NeoPixelC1Ethh>
   d45ce:	4620      	mov	r0, r4
Adafruit_NeoPixel strip2(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d45d0:	4c2e      	ldr	r4, [pc, #184]	; (d468c <_GLOBAL__sub_I_SystemMode+0xec>)
#define PIXEL_PIN D2
#define PIXEL_PIN2 D3
#define PIXEL_COUNT 50
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   d45d2:	4632      	mov	r2, r6
   d45d4:	4639      	mov	r1, r7
   d45d6:	f002 f98f 	bl	d68f8 <__aeabi_atexit>
Adafruit_NeoPixel strip2(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d45da:	2302      	movs	r3, #2
   d45dc:	2203      	movs	r2, #3
   d45de:	2196      	movs	r1, #150	; 0x96
   d45e0:	4620      	mov	r0, r4
   d45e2:	f000 f8b2 	bl	d474a <_ZN17Adafruit_NeoPixelC1Ethh>
   d45e6:	4620      	mov	r0, r4

TCPServer server = TCPServer(23);
   d45e8:	4c29      	ldr	r4, [pc, #164]	; (d4690 <_GLOBAL__sub_I_SystemMode+0xf0>)
#define PIXEL_PIN2 D3
#define PIXEL_COUNT 50
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel strip2(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);
   d45ea:	4632      	mov	r2, r6
   d45ec:	4639      	mov	r1, r7
   d45ee:	f002 f983 	bl	d68f8 <__aeabi_atexit>

TCPServer server = TCPServer(23);
   d45f2:	462a      	mov	r2, r5
   d45f4:	2117      	movs	r1, #23
   d45f6:	4620      	mov	r0, r4
   d45f8:	f001 fde8 	bl	d61cc <_ZN9TCPServerC1Etm>
   d45fc:	4620      	mov	r0, r4
TCPClient client;
   d45fe:	4c25      	ldr	r4, [pc, #148]	; (d4694 <_GLOBAL__sub_I_SystemMode+0xf4>)
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
Adafruit_NeoPixel strip2(PIXEL_COUNT, PIXEL_PIN2, PIXEL_TYPE);

TCPServer server = TCPServer(23);
   d4600:	4925      	ldr	r1, [pc, #148]	; (d4698 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d4602:	4632      	mov	r2, r6
   d4604:	f002 f978 	bl	d68f8 <__aeabi_atexit>
TCPClient client;
   d4608:	4620      	mov	r0, r4
   d460a:	f001 fd2b 	bl	d6064 <_ZN9TCPClientC1Ev>
   d460e:	4632      	mov	r2, r6
   d4610:	4922      	ldr	r1, [pc, #136]	; (d469c <_GLOBAL__sub_I_SystemMode+0xfc>)
   d4612:	4620      	mov	r0, r4
   d4614:	f002 f970 	bl	d68f8 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4618:	4b21      	ldr	r3, [pc, #132]	; (d46a0 <_GLOBAL__sub_I_SystemMode+0x100>)
   d461a:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d461c:	af04      	add	r7, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d461e:	4c21      	ldr	r4, [pc, #132]	; (d46a4 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4620:	4b21      	ldr	r3, [pc, #132]	; (d46a8 <_GLOBAL__sub_I_SystemMode+0x108>)
   d4622:	6023      	str	r3, [r4, #0]
   d4624:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4628:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d462a:	f104 030c 	add.w	r3, r4, #12
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d462e:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4632:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4636:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d463a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d463e:	e883 0003 	stmia.w	r3, {r0, r1}
   d4642:	4b1a      	ldr	r3, [pc, #104]	; (d46ac <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4644:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4646:	69a3      	ldr	r3, [r4, #24]
   d4648:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d464a:	4b19      	ldr	r3, [pc, #100]	; (d46b0 <_GLOBAL__sub_I_SystemMode+0x110>)
   d464c:	61a3      	str	r3, [r4, #24]
   d464e:	7125      	strb	r5, [r4, #4]
   d4650:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4652:	4623      	mov	r3, r4
   d4654:	4a17      	ldr	r2, [pc, #92]	; (d46b4 <_GLOBAL__sub_I_SystemMode+0x114>)
   d4656:	9501      	str	r5, [sp, #4]
   d4658:	f241 3188 	movw	r1, #5000	; 0x1388
   d465c:	9500      	str	r5, [sp, #0]
   d465e:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4662:	9506      	str	r5, [sp, #24]
   d4664:	f000 fb5a 	bl	d4d1c <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4668:	4638      	mov	r0, r7
   d466a:	f7ff fdd3 	bl	d4214 <_ZNSt14_Function_baseD1Ev>
  {
    // echo all available bytes back to the client
    if (client.available())
    {
      String str = client.readString();
      server.write(String::format("\nack: %d (%s)\n", str.length(), str.c_str()));
   d466e:	4632      	mov	r2, r6
   d4670:	4911      	ldr	r1, [pc, #68]	; (d46b8 <_GLOBAL__sub_I_SystemMode+0x118>)
   d4672:	4620      	mov	r0, r4
   d4674:	f002 f940 	bl	d68f8 <__aeabi_atexit>
   d4678:	b009      	add	sp, #36	; 0x24
   d467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d467c:	2003e390 	.word	0x2003e390
   d4680:	2003e37c 	.word	0x2003e37c
   d4684:	2003e328 	.word	0x2003e328
   d4688:	000d46c5 	.word	0x000d46c5
   d468c:	2003e398 	.word	0x2003e398
   d4690:	2003e32c 	.word	0x2003e32c
   d4694:	2003e360 	.word	0x2003e360
   d4698:	000d41f5 	.word	0x000d41f5
   d469c:	000d41d5 	.word	0x000d41d5
   d46a0:	000d40e5 	.word	0x000d40e5
   d46a4:	2003e3ac 	.word	0x2003e3ac
   d46a8:	000d6cec 	.word	0x000d6cec
   d46ac:	000d40cd 	.word	0x000d40cd
   d46b0:	000d40c9 	.word	0x000d40c9
   d46b4:	000d4179 	.word	0x000d4179
   d46b8:	000d4229 	.word	0x000d4229

000d46bc <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d46bc:	f000 bb7e 	b.w	d4dbc <HAL_Timer_Get_Micro_Seconds>

000d46c0 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d46c0:	f000 bb74 	b.w	d4dac <HAL_Delay_Microseconds>

000d46c4 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d46c4:	b510      	push	{r4, lr}
   d46c6:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d46c8:	68c0      	ldr	r0, [r0, #12]
   d46ca:	b108      	cbz	r0, d46d0 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d46cc:	f000 fda2 	bl	d5214 <free>
  if (begun) pinMode(pin, INPUT);
   d46d0:	7823      	ldrb	r3, [r4, #0]
   d46d2:	b11b      	cbz	r3, d46dc <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d46d4:	2100      	movs	r1, #0
   d46d6:	79e0      	ldrb	r0, [r4, #7]
   d46d8:	f002 f8a2 	bl	d6820 <pinMode>
}
   d46dc:	4620      	mov	r0, r4
   d46de:	bd10      	pop	{r4, pc}

000d46e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d46e0:	b538      	push	{r3, r4, r5, lr}
   d46e2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d46e4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d46e6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d46e8:	b108      	cbz	r0, d46ee <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d46ea:	f000 fd93 	bl	d5214 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d46ee:	79a3      	ldrb	r3, [r4, #6]
   d46f0:	2b06      	cmp	r3, #6
   d46f2:	bf0c      	ite	eq
   d46f4:	2004      	moveq	r0, #4
   d46f6:	2003      	movne	r0, #3
   d46f8:	fb10 f005 	smulbb	r0, r0, r5
   d46fc:	b280      	uxth	r0, r0
   d46fe:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4700:	f000 fd80 	bl	d5204 <malloc>
   d4704:	60e0      	str	r0, [r4, #12]
   d4706:	b128      	cbz	r0, d4714 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4708:	88a2      	ldrh	r2, [r4, #4]
   d470a:	2100      	movs	r1, #0
   d470c:	f002 fa5b 	bl	d6bc6 <memset>
    numLEDs = n;
   d4710:	8065      	strh	r5, [r4, #2]
   d4712:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4714:	80a0      	strh	r0, [r4, #4]
   d4716:	8060      	strh	r0, [r4, #2]
   d4718:	bd38      	pop	{r3, r4, r5, pc}

000d471a <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d471a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d471c:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d471e:	4605      	mov	r5, r0
   d4720:	460c      	mov	r4, r1
    if (begun) {
   d4722:	b11b      	cbz	r3, d472c <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4724:	2100      	movs	r1, #0
   d4726:	79c0      	ldrb	r0, [r0, #7]
   d4728:	f002 f87a 	bl	d6820 <pinMode>
    }
    pin = p;
    if (begun) {
   d472c:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d472e:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4730:	b153      	cbz	r3, d4748 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4732:	b2a4      	uxth	r4, r4
   d4734:	4620      	mov	r0, r4
   d4736:	2101      	movs	r1, #1
   d4738:	f002 f872 	bl	d6820 <pinMode>
        digitalWrite(p, LOW);
   d473c:	4620      	mov	r0, r4
   d473e:	2100      	movs	r1, #0
    }
}
   d4740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4744:	f002 b87d 	b.w	d6842 <digitalWrite>
   d4748:	bd38      	pop	{r3, r4, r5, pc}

000d474a <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d474a:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d474c:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d474e:	4604      	mov	r4, r0
   d4750:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4752:	7183      	strb	r3, [r0, #6]
   d4754:	7005      	strb	r5, [r0, #0]
   d4756:	7205      	strb	r5, [r0, #8]
   d4758:	60c5      	str	r5, [r0, #12]
   d475a:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d475c:	f7ff ffc0 	bl	d46e0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4760:	4620      	mov	r0, r4
   d4762:	4631      	mov	r1, r6
   d4764:	f7ff ffd9 	bl	d471a <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4768:	4620      	mov	r0, r4
   d476a:	bd70      	pop	{r4, r5, r6, pc}

000d476c <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d476c:	68c3      	ldr	r3, [r0, #12]
   d476e:	2b00      	cmp	r3, #0
   d4770:	f000 818b 	beq.w	d4a8a <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4778:	7983      	ldrb	r3, [r0, #6]
   d477a:	3b02      	subs	r3, #2
   d477c:	b2db      	uxtb	r3, r3
   d477e:	2b04      	cmp	r3, #4
   d4780:	bf9c      	itt	ls
   d4782:	4ac4      	ldrls	r2, [pc, #784]	; (d4a94 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4784:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4788:	b087      	sub	sp, #28
   d478a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d478c:	bf88      	it	hi
   d478e:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4790:	f7ff ff94 	bl	d46bc <micros>
   d4794:	692b      	ldr	r3, [r5, #16]
   d4796:	1ac0      	subs	r0, r0, r3
   d4798:	42a0      	cmp	r0, r4
   d479a:	d3f9      	bcc.n	d4790 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d479c:	4abe      	ldr	r2, [pc, #760]	; (d4a98 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d479e:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d47a0:	ca07      	ldmia	r2, {r0, r1, r2}
   d47a2:	ac06      	add	r4, sp, #24
   d47a4:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d47a8:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d47aa:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d47ac:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d47b0:	3304      	adds	r3, #4
   d47b2:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47b4:	b922      	cbnz	r2, d47c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47b6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d47ba:	2b00      	cmp	r3, #0
   d47bc:	f2c0 8155 	blt.w	d4a6a <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d47c0:	9c04      	ldr	r4, [sp, #16]
   d47c2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47c6:	b923      	cbnz	r3, d47d2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47c8:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d47cc:	2b00      	cmp	r3, #0
   d47ce:	f2c0 813c 	blt.w	d4a4a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d47d2:	9c05      	ldr	r4, [sp, #20]
   d47d4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47d8:	b91b      	cbnz	r3, d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d47da:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d47de:	2b00      	cmp	r3, #0
   d47e0:	db6e      	blt.n	d48c0 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47e2:	4bae      	ldr	r3, [pc, #696]	; (d4a9c <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d47e4:	79ea      	ldrb	r2, [r5, #7]
   d47e6:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d47e8:	4cad      	ldr	r4, [pc, #692]	; (d4aa0 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d47ea:	49ae      	ldr	r1, [pc, #696]	; (d4aa4 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d47ec:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47ee:	0112      	lsls	r2, r2, #4
   d47f0:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d47f2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47f6:	785b      	ldrb	r3, [r3, #1]
   d47f8:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d47fa:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d47fc:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47fe:	f003 031f 	and.w	r3, r3, #31
   d4802:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4806:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4808:	433a      	orrs	r2, r7
   d480a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d480c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d480e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4810:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4814:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4818:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d481a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d481c:	2800      	cmp	r0, #0
   d481e:	d044      	beq.n	d48aa <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4820:	46cc      	mov	ip, r9
   d4822:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4824:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4828:	f81c eb01 	ldrb.w	lr, [ip], #1
   d482c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d482e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4830:	6863      	ldr	r3, [r4, #4]
   d4832:	1a9b      	subs	r3, r3, r2
   d4834:	2b46      	cmp	r3, #70	; 0x46
   d4836:	d9fb      	bls.n	d4830 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4838:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d483c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4840:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4844:	ea43 0307 	orr.w	r3, r3, r7
   d4848:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d484c:	d02f      	beq.n	d48ae <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d484e:	6863      	ldr	r3, [r4, #4]
   d4850:	1a9b      	subs	r3, r3, r2
   d4852:	2b28      	cmp	r3, #40	; 0x28
   d4854:	d9fb      	bls.n	d484e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4856:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d485a:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d485c:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4860:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4864:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4868:	d1e2      	bne.n	d4830 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d486a:	ebc9 030c 	rsb	r3, r9, ip
   d486e:	88a8      	ldrh	r0, [r5, #4]
   d4870:	b29b      	uxth	r3, r3
   d4872:	4298      	cmp	r0, r3
   d4874:	d8d8      	bhi.n	d4828 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4876:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d487a:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d487e:	6863      	ldr	r3, [r4, #4]
   d4880:	1a9b      	subs	r3, r3, r2
   d4882:	2b46      	cmp	r3, #70	; 0x46
   d4884:	d9fb      	bls.n	d487e <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4886:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d488a:	ebca 0a03 	rsb	sl, sl, r3
   d488e:	4582      	cmp	sl, r0
   d4890:	f0c0 80d5 	bcc.w	d4a3e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4894:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4898:	f7ff ff12 	bl	d46c0 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d489c:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d489e:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d48a2:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d48a6:	2800      	cmp	r0, #0
   d48a8:	d1ba      	bne.n	d4820 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d48aa:	4602      	mov	r2, r0
   d48ac:	e7e7      	b.n	d487e <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d48ae:	6863      	ldr	r3, [r4, #4]
   d48b0:	1a9b      	subs	r3, r3, r2
   d48b2:	2b11      	cmp	r3, #17
   d48b4:	d8cf      	bhi.n	d4856 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d48b6:	6863      	ldr	r3, [r4, #4]
   d48b8:	1a9b      	subs	r3, r3, r2
   d48ba:	2b11      	cmp	r3, #17
   d48bc:	d9f7      	bls.n	d48ae <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d48be:	e7ca      	b.n	d4856 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48c0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48c4:	2b00      	cmp	r3, #0
   d48c6:	da8c      	bge.n	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48c8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48cc:	2b00      	cmp	r3, #0
   d48ce:	da88      	bge.n	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d48d0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d48d4:	2b00      	cmp	r3, #0
   d48d6:	da84      	bge.n	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d48d8:	9801      	ldr	r0, [sp, #4]
   d48da:	f000 fc93 	bl	d5204 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d48de:	2800      	cmp	r0, #0
   d48e0:	f43f af7f 	beq.w	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d48e4:	88ab      	ldrh	r3, [r5, #4]
   d48e6:	2b00      	cmp	r3, #0
   d48e8:	f000 80d0 	beq.w	d4a8c <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d48ec:	2700      	movs	r7, #0
   d48ee:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d48f0:	4e6d      	ldr	r6, [pc, #436]	; (d4aa8 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d48f2:	496e      	ldr	r1, [pc, #440]	; (d4aac <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d48f4:	e000      	b.n	d48f8 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d48f6:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d48f8:	68ea      	ldr	r2, [r5, #12]
   d48fa:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d48fc:	f103 0e01 	add.w	lr, r3, #1
   d4900:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4904:	bf14      	ite	ne
   d4906:	46b0      	movne	r8, r6
   d4908:	4688      	moveq	r8, r1
   d490a:	fa1f fe8e 	uxth.w	lr, lr
   d490e:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4912:	bf14      	ite	ne
   d4914:	46b1      	movne	r9, r6
   d4916:	4689      	moveq	r9, r1
   d4918:	f012 0f20 	tst.w	r2, #32
   d491c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4920:	bf18      	it	ne
   d4922:	46b2      	movne	sl, r6
   d4924:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4928:	bf08      	it	eq
   d492a:	468a      	moveq	sl, r1
   d492c:	f103 0802 	add.w	r8, r3, #2
   d4930:	f012 0f10 	tst.w	r2, #16
   d4934:	f103 0e03 	add.w	lr, r3, #3
   d4938:	bf14      	ite	ne
   d493a:	46b4      	movne	ip, r6
   d493c:	468c      	moveq	ip, r1
   d493e:	fa1f f888 	uxth.w	r8, r8
   d4942:	f012 0f08 	tst.w	r2, #8
   d4946:	fa1f fe8e 	uxth.w	lr, lr
   d494a:	f103 0904 	add.w	r9, r3, #4
   d494e:	fa1f f989 	uxth.w	r9, r9
   d4952:	bf14      	ite	ne
   d4954:	46b3      	movne	fp, r6
   d4956:	468b      	moveq	fp, r1
   d4958:	f012 0f04 	tst.w	r2, #4
   d495c:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4960:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4964:	bf14      	ite	ne
   d4966:	46b2      	movne	sl, r6
   d4968:	468a      	moveq	sl, r1
   d496a:	f103 0805 	add.w	r8, r3, #5
   d496e:	f012 0f02 	tst.w	r2, #2
   d4972:	f103 0c06 	add.w	ip, r3, #6
   d4976:	f103 0e07 	add.w	lr, r3, #7
   d497a:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d497e:	fa1f fe8e 	uxth.w	lr, lr
   d4982:	bf14      	ite	ne
   d4984:	46b1      	movne	r9, r6
   d4986:	4689      	moveq	r9, r1
   d4988:	fa1f f888 	uxth.w	r8, r8
   d498c:	f012 0f01 	tst.w	r2, #1
   d4990:	fa1f fc8c 	uxth.w	ip, ip
   d4994:	bf14      	ite	ne
   d4996:	4632      	movne	r2, r6
   d4998:	460a      	moveq	r2, r1
   d499a:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d499e:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d49a2:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d49a6:	3701      	adds	r7, #1
   d49a8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d49ac:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d49ae:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d49b2:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d49b4:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d49b6:	d89e      	bhi.n	d48f6 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d49b8:	f103 0209 	add.w	r2, r3, #9
   d49bc:	330a      	adds	r3, #10
   d49be:	b292      	uxth	r2, r2
   d49c0:	b29b      	uxth	r3, r3
   d49c2:	0052      	lsls	r2, r2, #1
   d49c4:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d49c6:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d49c8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d49cc:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d49ce:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d49d0:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d49d2:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d49d4:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d49d6:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d49da:	4e30      	ldr	r6, [pc, #192]	; (d4a9c <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d49dc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d49e0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d49e4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d49e8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d49ec:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d49f0:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d49f4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d49f8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d49fc:	79eb      	ldrb	r3, [r5, #7]
   d49fe:	6831      	ldr	r1, [r6, #0]
   d4a00:	011b      	lsls	r3, r3, #4
   d4a02:	18ce      	adds	r6, r1, r3
   d4a04:	5cc9      	ldrb	r1, [r1, r3]
   d4a06:	7873      	ldrb	r3, [r6, #1]
   d4a08:	f003 031f 	and.w	r3, r3, #31
   d4a0c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4a10:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4a12:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4a16:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4a1a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4a1e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4a20:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4a24:	2b00      	cmp	r3, #0
   d4a26:	d0fb      	beq.n	d4a20 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4a28:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4a2e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4a32:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4a36:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4a3a:	f000 fbeb 	bl	d5214 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4a3e:	f7ff fe3d 	bl	d46bc <micros>
   d4a42:	6128      	str	r0, [r5, #16]
}
   d4a44:	b007      	add	sp, #28
   d4a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a4a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a4e:	2b00      	cmp	r3, #0
   d4a50:	f6bf aebf 	bge.w	d47d2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a54:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a58:	2b00      	cmp	r3, #0
   d4a5a:	f6bf aeba 	bge.w	d47d2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4a5e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a62:	2b00      	cmp	r3, #0
   d4a64:	f6bf aeb5 	bge.w	d47d2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4a68:	e736      	b.n	d48d8 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a6a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a6e:	2b00      	cmp	r3, #0
   d4a70:	f6bf aea6 	bge.w	d47c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a74:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a78:	2b00      	cmp	r3, #0
   d4a7a:	f6bf aea1 	bge.w	d47c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4a7e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a82:	2b00      	cmp	r3, #0
   d4a84:	f6bf ae9c 	bge.w	d47c0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4a88:	e726      	b.n	d48d8 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4a8a:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4a8c:	2304      	movs	r3, #4
   d4a8e:	2202      	movs	r2, #2
   d4a90:	e799      	b.n	d49c6 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4a92:	bf00      	nop
   d4a94:	000d6d1c 	.word	0x000d6d1c
   d4a98:	000d6d10 	.word	0x000d6d10
   d4a9c:	2003e3c8 	.word	0x2003e3c8
   d4aa0:	e000edf0 	.word	0xe000edf0
   d4aa4:	e0001000 	.word	0xe0001000
   d4aa8:	ffff800d 	.word	0xffff800d
   d4aac:	ffff8006 	.word	0xffff8006

000d4ab0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4ab2:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   d4ab4:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   d4ab8:	428c      	cmp	r4, r1
   d4aba:	d927      	bls.n	d4b0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   d4abc:	7a04      	ldrb	r4, [r0, #8]
   d4abe:	b144      	cbz	r4, d4ad2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   d4ac0:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   d4ac4:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   d4ac8:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4acc:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   d4ace:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   d4ad0:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   d4ad2:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   d4ad4:	68c6      	ldr	r6, [r0, #12]
   d4ad6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4ada:	2f08      	cmp	r7, #8
   d4adc:	eb06 0401 	add.w	r4, r6, r1
   d4ae0:	d811      	bhi.n	d4b06 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   d4ae2:	2001      	movs	r0, #1
   d4ae4:	40b8      	lsls	r0, r7
   d4ae6:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   d4aea:	d108      	bne.n	d4afe <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   d4aec:	06c0      	lsls	r0, r0, #27
   d4aee:	d50a      	bpl.n	d4b06 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4af0:	2aff      	cmp	r2, #255	; 0xff
   d4af2:	bf08      	it	eq
   d4af4:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   d4af6:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   d4af8:	7065      	strb	r5, [r4, #1]
          *p = g;
   d4afa:	70a3      	strb	r3, [r4, #2]
   d4afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4afe:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   d4b00:	7062      	strb	r2, [r4, #1]
          *p = b;
   d4b02:	70a5      	strb	r5, [r4, #2]
   d4b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4b06:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   d4b08:	7063      	strb	r3, [r4, #1]
          *p = b;
   d4b0a:	70a5      	strb	r5, [r4, #2]
   d4b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b0e <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4b0e:	8843      	ldrh	r3, [r0, #2]
   d4b10:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4b12:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4b14:	d945      	bls.n	d4ba2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4b16:	7a05      	ldrb	r5, [r0, #8]
   d4b18:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4b1c:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4b20:	b2d6      	uxtb	r6, r2
   d4b22:	b145      	cbz	r5, d4b36 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d4b24:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4b26:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4b28:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4b2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4b2e:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4b32:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4b36:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4b3a:	68c7      	ldr	r7, [r0, #12]
   d4b3c:	f1bc 0f06 	cmp.w	ip, #6
   d4b40:	bf0c      	ite	eq
   d4b42:	2504      	moveq	r5, #4
   d4b44:	2503      	movne	r5, #3
   d4b46:	4369      	muls	r1, r5
   d4b48:	f1bc 0f08 	cmp.w	ip, #8
   d4b4c:	eb07 0501 	add.w	r5, r7, r1
   d4b50:	d824      	bhi.n	d4b9c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d4b52:	f04f 0e01 	mov.w	lr, #1
   d4b56:	fa0e fe0c 	lsl.w	lr, lr, ip
   d4b5a:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4b5e:	d10c      	bne.n	d4b7a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d4b60:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d4b64:	d10d      	bne.n	d4b82 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4b66:	f01e 0f10 	tst.w	lr, #16
   d4b6a:	d017      	beq.n	d4b9c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4b6c:	2bff      	cmp	r3, #255	; 0xff
   d4b6e:	bf08      	it	eq
   d4b70:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d4b72:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4b74:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4b76:	70ac      	strb	r4, [r5, #2]
        } break;
   d4b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4b7a:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4b7c:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4b7e:	70ae      	strb	r6, [r5, #2]
        } break;
   d4b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d4b82:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4b84:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4b86:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4b88:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4b8a:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4b8c:	b90b      	cbnz	r3, d4b92 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4b8e:	b2d2      	uxtb	r2, r2
   d4b90:	e002      	b.n	d4b98 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4b92:	435a      	muls	r2, r3
   d4b94:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d4b98:	70ea      	strb	r2, [r5, #3]
        } break;
   d4b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4b9c:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4b9e:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4ba0:	70ae      	strb	r6, [r5, #2]
   d4ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ba4 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d4ba4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d4ba8:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d4bac:	4770      	bx	lr

000d4bae <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
   d4bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(n >= numLEDs) {
   d4bb0:	8843      	ldrh	r3, [r0, #2]
   d4bb2:	428b      	cmp	r3, r1
   d4bb4:	d952      	bls.n	d4c5c <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0xae>
    // Out of bounds, return no color.
    return 0;
  }

  uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4bb6:	7985      	ldrb	r5, [r0, #6]
   d4bb8:	68c2      	ldr	r2, [r0, #12]
   d4bba:	2d06      	cmp	r5, #6
   d4bbc:	bf0c      	ite	eq
   d4bbe:	2304      	moveq	r3, #4
   d4bc0:	2303      	movne	r3, #3
   d4bc2:	4359      	muls	r1, r3
   d4bc4:	1856      	adds	r6, r2, r1
   d4bc6:	2d08      	cmp	r5, #8
   d4bc8:	5c54      	ldrb	r4, [r2, r1]
   d4bca:	7873      	ldrb	r3, [r6, #1]
   d4bcc:	78b1      	ldrb	r1, [r6, #2]
   d4bce:	d81e      	bhi.n	d4c0e <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x60>
   d4bd0:	2201      	movs	r2, #1
   d4bd2:	40aa      	lsls	r2, r5
   d4bd4:	f412 7fd2 	tst.w	r2, #420	; 0x1a4
   d4bd8:	d10a      	bne.n	d4bf0 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x42>
   d4bda:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4bde:	d10d      	bne.n	d4bfc <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x4e>
   d4be0:	06d2      	lsls	r2, r2, #27
   d4be2:	d514      	bpl.n	d4c0e <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x60>
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
      } break;
    case TM1829: { // TM1829 is special RBG order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
   d4be4:	0209      	lsls	r1, r1, #8
   d4be6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
   d4bea:	4323      	orrs	r3, r4
   d4bec:	9301      	str	r3, [sp, #4]
      } break;
   d4bee:	e013      	b.n	d4c18 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6a>
  switch(type) {
    case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
    case WS2812B_FAST:
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
   d4bf0:	0224      	lsls	r4, r4, #8
   d4bf2:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   d4bf6:	4319      	orrs	r1, r3
   d4bf8:	9101      	str	r1, [sp, #4]
      } break;
   d4bfa:	e00d      	b.n	d4c18 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6a>
    case TM1829: { // TM1829 is special RBG order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
      } break;
    case SK6812RGBW: { // SK6812RGBW is RGBW order, but returns packed WRGB color
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
   d4bfc:	041a      	lsls	r2, r3, #16
   d4bfe:	ea42 6304 	orr.w	r3, r2, r4, lsl #24
   d4c02:	78f2      	ldrb	r2, [r6, #3]
   d4c04:	4313      	orrs	r3, r2
   d4c06:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d4c0a:	9101      	str	r1, [sp, #4]
      } break;
   d4c0c:	e004      	b.n	d4c18 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x6a>
    case WS2811: // WS2811 is RGB order
    case TM1803: // TM1803 is RGB order
    default: {   // default is RGB order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   d4c0e:	021b      	lsls	r3, r3, #8
   d4c10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d4c14:	430b      	orrs	r3, r1
   d4c16:	9301      	str	r3, [sp, #4]
      } break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
   d4c18:	7a02      	ldrb	r2, [r0, #8]
   d4c1a:	b1ea      	cbz	r2, d4c58 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0xaa>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    if (type == SK6812RGBW) {
   d4c1c:	2d06      	cmp	r5, #6
      c_ptr[3] = (c_ptr[3] << 8)/brightness;
   d4c1e:	bf01      	itttt	eq
   d4c20:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
   d4c24:	021b      	lsleq	r3, r3, #8
   d4c26:	fb93 f3f2 	sdiveq	r3, r3, r2
   d4c2a:	f88d 3007 	strbeq.w	r3, [sp, #7]
    }
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
   d4c2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4c32:	021b      	lsls	r3, r3, #8
   d4c34:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c38:	f88d 3004 	strb.w	r3, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
   d4c3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4c40:	021b      	lsls	r3, r3, #8
   d4c42:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c46:	f88d 3005 	strb.w	r3, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
   d4c4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d4c4e:	021b      	lsls	r3, r3, #8
   d4c50:	fb93 f3f2 	sdiv	r3, r3, r2
   d4c54:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
   d4c58:	9801      	ldr	r0, [sp, #4]
   d4c5a:	e000      	b.n	d4c5e <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0xb0>

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) {
    // Out of bounds, return no color.
    return 0;
   d4c5c:	2000      	movs	r0, #0
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
  }
  return c; // Pixel # is out of bounds
}
   d4c5e:	b002      	add	sp, #8
   d4c60:	bd70      	pop	{r4, r5, r6, pc}

000d4c62 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4c62:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d4c64:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4c66:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d4c68:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4c6a:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4c6c:	d01e      	beq.n	d4cac <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d4c6e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4c70:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4c74:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4c76:	d00c      	beq.n	d4c92 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d4c78:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4c7a:	bf1f      	itttt	ne
   d4c7c:	0211      	lslne	r1, r2, #8
   d4c7e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   d4c82:	fb91 f3f3 	sdivne	r3, r1, r3
   d4c86:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d4c88:	bf04      	itt	eq
   d4c8a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d4c8e:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4c92:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4c94:	1b29      	subs	r1, r5, r4
   d4c96:	8886      	ldrh	r6, [r0, #4]
   d4c98:	b289      	uxth	r1, r1
   d4c9a:	428e      	cmp	r6, r1
   d4c9c:	d905      	bls.n	d4caa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d4c9e:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d4ca0:	4359      	muls	r1, r3
   d4ca2:	1209      	asrs	r1, r1, #8
   d4ca4:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4ca8:	e7f4      	b.n	d4c94 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d4caa:	7202      	strb	r2, [r0, #8]
   d4cac:	bd70      	pop	{r4, r5, r6, pc}

000d4cae <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4cae:	8882      	ldrh	r2, [r0, #4]
   d4cb0:	68c0      	ldr	r0, [r0, #12]
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	f001 bf87 	b.w	d6bc6 <memset>

000d4cb8 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	f000 f897 	bl	d4dec <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4cbe:	f000 f895 	bl	d4dec <HAL_Pin_Map>
   d4cc2:	4b01      	ldr	r3, [pc, #4]	; (d4cc8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4cc4:	6018      	str	r0, [r3, #0]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	2003e3c8 	.word	0x2003e3c8

000d4ccc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <os_thread_is_current+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	689b      	ldr	r3, [r3, #8]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030248 	.word	0x00030248

000d4cdc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <os_thread_yield+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	68db      	ldr	r3, [r3, #12]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030248 	.word	0x00030248

000d4cec <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <os_thread_join+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	691b      	ldr	r3, [r3, #16]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030248 	.word	0x00030248

000d4cfc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <os_thread_cleanup+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	695b      	ldr	r3, [r3, #20]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030248 	.word	0x00030248

000d4d0c <os_thread_scheduling>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <os_thread_scheduling+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	69db      	ldr	r3, [r3, #28]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030248 	.word	0x00030248

000d4d1c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <os_timer_create+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6a1b      	ldr	r3, [r3, #32]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030248 	.word	0x00030248

000d4d2c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <os_timer_destroy+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030248 	.word	0x00030248

000d4d3c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <os_timer_get_id+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030248 	.word	0x00030248

000d4d4c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <os_timer_change+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030248 	.word	0x00030248

000d4d5c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <os_mutex_create+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030248 	.word	0x00030248

000d4d6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <os_mutex_recursive_create+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030248 	.word	0x00030248

000d4d7c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <os_timer_set_id+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030248 	.word	0x00030248

000d4d8c <HAL_Core_Enter_Bootloader>:
DYNALIB_FN(2, hal_core, HAL_Core_Config, void(void))
DYNALIB_FN(3, hal_core, HAL_Core_Mode_Button_Pressed, bool(uint16_t))
DYNALIB_FN(4, hal_core, HAL_Core_Mode_Button_Reset, void(uint16_t))
DYNALIB_FN(5, hal_core, HAL_Core_System_Reset, void(void))
DYNALIB_FN(6, hal_core, HAL_Core_Factory_Reset, void(void))
DYNALIB_FN(7, hal_core, HAL_Core_Enter_Bootloader, void(bool))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_Core_Enter_Bootloader+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	69db      	ldr	r3, [r3, #28]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030234 	.word	0x00030234

000d4d9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_RNG_GetRandomNumber+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	685b      	ldr	r3, [r3, #4]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030218 	.word	0x00030218

000d4dac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_Delay_Microseconds+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	68db      	ldr	r3, [r3, #12]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030218 	.word	0x00030218

000d4dbc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	691b      	ldr	r3, [r3, #16]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030218 	.word	0x00030218

000d4dcc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	695b      	ldr	r3, [r3, #20]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030218 	.word	0x00030218

000d4ddc <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <hal_timer_millis+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030218 	.word	0x00030218

000d4dec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <HAL_Pin_Map+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	681b      	ldr	r3, [r3, #0]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003022c 	.word	0x0003022c

000d4dfc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <HAL_Pin_Mode+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	689b      	ldr	r3, [r3, #8]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003022c 	.word	0x0003022c

000d4e0c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <HAL_Get_Pin_Mode+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	68db      	ldr	r3, [r3, #12]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003022c 	.word	0x0003022c

000d4e1c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <HAL_GPIO_Write+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	691b      	ldr	r3, [r3, #16]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003022c 	.word	0x0003022c

000d4e2c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_I2C_Write_Data+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6a1b      	ldr	r3, [r3, #32]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030228 	.word	0x00030228

000d4e3c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_I2C_Available_Data+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030228 	.word	0x00030228

000d4e4c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_I2C_Read_Data+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030228 	.word	0x00030228

000d4e5c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_I2C_Peek_Data+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030228 	.word	0x00030228

000d4e6c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_I2C_Flush_Data+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030228 	.word	0x00030228

000d4e7c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_I2C_Is_Enabled+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030228 	.word	0x00030228

000d4e8c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_I2C_Init+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030228 	.word	0x00030228

000d4e9c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <if_index_to_name+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	695b      	ldr	r3, [r3, #20]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003026c 	.word	0x0003026c

000d4eac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <inet_inet_ntop+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	695b      	ldr	r3, [r3, #20]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030264 	.word	0x00030264

000d4ebc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <inet_htonl+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6a1b      	ldr	r3, [r3, #32]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030264 	.word	0x00030264

000d4ecc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <inet_htons+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030264 	.word	0x00030264

000d4edc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <netdb_freeaddrinfo+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	689b      	ldr	r3, [r3, #8]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030268 	.word	0x00030268

000d4eec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <netdb_getaddrinfo+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	68db      	ldr	r3, [r3, #12]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030268 	.word	0x00030268

000d4efc <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <sock_accept+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	681b      	ldr	r3, [r3, #0]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030238 	.word	0x00030238

000d4f0c <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <sock_bind+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	685b      	ldr	r3, [r3, #4]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030238 	.word	0x00030238

000d4f1c <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <sock_getpeername+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	68db      	ldr	r3, [r3, #12]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030238 	.word	0x00030238

000d4f2c <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <sock_setsockopt+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	699b      	ldr	r3, [r3, #24]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030238 	.word	0x00030238

000d4f3c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <sock_close+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	69db      	ldr	r3, [r3, #28]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030238 	.word	0x00030238

000d4f4c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <sock_connect+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6a1b      	ldr	r3, [r3, #32]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030238 	.word	0x00030238

000d4f5c <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <sock_listen+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030238 	.word	0x00030238

000d4f6c <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <sock_recv+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030238 	.word	0x00030238

000d4f7c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <sock_send+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030238 	.word	0x00030238

000d4f8c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <sock_socket+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030238 	.word	0x00030238

000d4f9c <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <sock_fcntl+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	00030238 	.word	0x00030238

000d4fac <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <HAL_SPI_Init+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	69db      	ldr	r3, [r3, #28]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	00030230 	.word	0x00030230

000d4fbc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <HAL_SPI_Is_Enabled+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6a1b      	ldr	r3, [r3, #32]
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030230 	.word	0x00030230

000d4fcc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <HAL_USART_Init+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	681b      	ldr	r3, [r3, #0]
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	0003023c 	.word	0x0003023c

000d4fdc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <HAL_USART_Write_Data+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	68db      	ldr	r3, [r3, #12]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	0003023c 	.word	0x0003023c

000d4fec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <HAL_USART_Available_Data+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	691b      	ldr	r3, [r3, #16]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	0003023c 	.word	0x0003023c

000d4ffc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <HAL_USART_Read_Data+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	695b      	ldr	r3, [r3, #20]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	0003023c 	.word	0x0003023c

000d500c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <HAL_USART_Peek_Data+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	699b      	ldr	r3, [r3, #24]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	0003023c 	.word	0x0003023c

000d501c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <HAL_USART_Flush_Data+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	69db      	ldr	r3, [r3, #28]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	0003023c 	.word	0x0003023c

000d502c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <HAL_USART_Is_Enabled+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	6a1b      	ldr	r3, [r3, #32]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	0003023c 	.word	0x0003023c

000d503c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <HAL_USART_Available_Data_For_Write+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	0003023c 	.word	0x0003023c

000d504c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <HAL_USB_USART_Init+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	681b      	ldr	r3, [r3, #0]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	0003024c 	.word	0x0003024c

000d505c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <HAL_USB_USART_Begin+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	685b      	ldr	r3, [r3, #4]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003024c 	.word	0x0003024c

000d506c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <HAL_USB_USART_Available_Data+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	691b      	ldr	r3, [r3, #16]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003024c 	.word	0x0003024c

000d507c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	695b      	ldr	r3, [r3, #20]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003024c 	.word	0x0003024c

000d508c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <HAL_USB_USART_Receive_Data+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	699b      	ldr	r3, [r3, #24]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003024c 	.word	0x0003024c

000d509c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <HAL_USB_USART_Send_Data+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	69db      	ldr	r3, [r3, #28]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003024c 	.word	0x0003024c

000d50ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <HAL_USB_USART_Flush_Data+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6a1b      	ldr	r3, [r3, #32]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003024c 	.word	0x0003024c

000d50bc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <HAL_USB_USART_Is_Connected+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003024c 	.word	0x0003024c

000d50cc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <panic_+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030260 	.word	0x00030260

000d50dc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <log_message+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030260 	.word	0x00030260

000d50ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <set_system_mode+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	685b      	ldr	r3, [r3, #4]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030220 	.word	0x00030220

000d50fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <system_delay_ms+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	695b      	ldr	r3, [r3, #20]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030220 	.word	0x00030220

000d510c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b03      	ldr	r3, [pc, #12]	; (d511c <system_ctrl_set_app_request_handler+0x10>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5116:	9301      	str	r3, [sp, #4]
   d5118:	bd08      	pop	{r3, pc}
   d511a:	0000      	.short	0x0000
   d511c:	00030220 	.word	0x00030220

000d5120 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b03      	ldr	r3, [pc, #12]	; (d5130 <system_ctrl_set_result+0x10>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d512a:	9301      	str	r3, [sp, #4]
   d512c:	bd08      	pop	{r3, pc}
   d512e:	0000      	.short	0x0000
   d5130:	00030220 	.word	0x00030220

000d5134 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <spark_process+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	00030244 	.word	0x00030244

000d5144 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	00030244 	.word	0x00030244

000d5154 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <network_config+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	681b      	ldr	r3, [r3, #0]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	00030240 	.word	0x00030240

000d5164 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <network_connect+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	685b      	ldr	r3, [r3, #4]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	00030240 	.word	0x00030240

000d5174 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <network_connecting+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	689b      	ldr	r3, [r3, #8]
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	00030240 	.word	0x00030240

000d5184 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <network_disconnect+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	68db      	ldr	r3, [r3, #12]
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	00030240 	.word	0x00030240

000d5194 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <network_ready+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	691b      	ldr	r3, [r3, #16]
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	00030240 	.word	0x00030240

000d51a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <network_on+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	695b      	ldr	r3, [r3, #20]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030240 	.word	0x00030240

000d51b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <network_off+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	699b      	ldr	r3, [r3, #24]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030240 	.word	0x00030240

000d51c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <network_listen+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	69db      	ldr	r3, [r3, #28]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	00030240 	.word	0x00030240

000d51d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <network_listening+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	6a1b      	ldr	r3, [r3, #32]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030240 	.word	0x00030240

000d51e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <network_set_listen_timeout+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030240 	.word	0x00030240

000d51f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <network_get_listen_timeout+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030240 	.word	0x00030240

000d5204 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <malloc+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	681b      	ldr	r3, [r3, #0]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	0003021c 	.word	0x0003021c

000d5214 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <free+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	685b      	ldr	r3, [r3, #4]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	0003021c 	.word	0x0003021c

000d5224 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <realloc+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	689b      	ldr	r3, [r3, #8]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003021c 	.word	0x0003021c

000d5234 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <vsnprintf+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003021c 	.word	0x0003021c

000d5244 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <__errno+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003021c 	.word	0x0003021c

000d5254 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5254:	2100      	movs	r1, #0
   d5256:	f7ff bf51 	b.w	d50fc <system_delay_ms>

000d525a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d525a:	2200      	movs	r2, #0
   d525c:	4611      	mov	r1, r2
   d525e:	6840      	ldr	r0, [r0, #4]
   d5260:	f7ff bfb8 	b.w	d51d4 <network_listening>

000d5264 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5264:	2200      	movs	r2, #0
   d5266:	4611      	mov	r1, r2
   d5268:	6840      	ldr	r0, [r0, #4]
   d526a:	f7ff bfc3 	b.w	d51f4 <network_get_listen_timeout>

000d526e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d526e:	2200      	movs	r2, #0
   d5270:	6840      	ldr	r0, [r0, #4]
   d5272:	f7ff bfb7 	b.w	d51e4 <network_set_listen_timeout>

000d5276 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5276:	2200      	movs	r2, #0
   d5278:	f081 0101 	eor.w	r1, r1, #1
   d527c:	6840      	ldr	r0, [r0, #4]
   d527e:	f7ff bfa1 	b.w	d51c4 <network_listen>

000d5282 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5282:	2300      	movs	r3, #0
   d5284:	461a      	mov	r2, r3
   d5286:	4619      	mov	r1, r3
   d5288:	6840      	ldr	r0, [r0, #4]
   d528a:	f7ff bf93 	b.w	d51b4 <network_off>

000d528e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d528e:	2300      	movs	r3, #0
   d5290:	461a      	mov	r2, r3
   d5292:	4619      	mov	r1, r3
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	f7ff bf85 	b.w	d51a4 <network_on>

000d529a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d529a:	2200      	movs	r2, #0
   d529c:	4611      	mov	r1, r2
   d529e:	6840      	ldr	r0, [r0, #4]
   d52a0:	f7ff bf78 	b.w	d5194 <network_ready>

000d52a4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d52a4:	2200      	movs	r2, #0
   d52a6:	4611      	mov	r1, r2
   d52a8:	6840      	ldr	r0, [r0, #4]
   d52aa:	f7ff bf63 	b.w	d5174 <network_connecting>

000d52ae <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52ae:	2200      	movs	r2, #0
   d52b0:	2102      	movs	r1, #2
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	f7ff bf66 	b.w	d5184 <network_disconnect>

000d52b8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52b8:	2300      	movs	r3, #0
   d52ba:	461a      	mov	r2, r3
   d52bc:	6840      	ldr	r0, [r0, #4]
   d52be:	f7ff bf51 	b.w	d5164 <network_connect>
	...

000d52c4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d52c4:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d52c6:	2203      	movs	r2, #3
   d52c8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d52ca:	4a02      	ldr	r2, [pc, #8]	; (d52d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d52cc:	601a      	str	r2, [r3, #0]
   d52ce:	4770      	bx	lr
   d52d0:	2003e3cc 	.word	0x2003e3cc
   d52d4:	000d6d38 	.word	0x000d6d38

000d52d8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d52d8:	4770      	bx	lr

000d52da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d52da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52dc:	4606      	mov	r6, r0
   d52de:	4615      	mov	r5, r2
   d52e0:	460c      	mov	r4, r1
   d52e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d52e4:	42bc      	cmp	r4, r7
   d52e6:	d006      	beq.n	d52f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d52e8:	6833      	ldr	r3, [r6, #0]
   d52ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   d52ee:	689b      	ldr	r3, [r3, #8]
   d52f0:	4630      	mov	r0, r6
   d52f2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d52f4:	e7f6      	b.n	d52e4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d52f6:	4628      	mov	r0, r5
   d52f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52fa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d52fa:	2200      	movs	r2, #0
   d52fc:	7c00      	ldrb	r0, [r0, #16]
   d52fe:	f7ff bd95 	b.w	d4e2c <HAL_I2C_Write_Data>

000d5302 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5302:	2100      	movs	r1, #0
   d5304:	7c00      	ldrb	r0, [r0, #16]
   d5306:	f7ff bd99 	b.w	d4e3c <HAL_I2C_Available_Data>

000d530a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d530a:	2100      	movs	r1, #0
   d530c:	7c00      	ldrb	r0, [r0, #16]
   d530e:	f7ff bd9d 	b.w	d4e4c <HAL_I2C_Read_Data>

000d5312 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5312:	2100      	movs	r1, #0
   d5314:	7c00      	ldrb	r0, [r0, #16]
   d5316:	f7ff bda1 	b.w	d4e5c <HAL_I2C_Peek_Data>

000d531a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d531a:	2100      	movs	r1, #0
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	f7ff bda5 	b.w	d4e6c <HAL_I2C_Flush_Data>

000d5322 <_ZN7TwoWireD0Ev>:
   d5322:	b510      	push	{r4, lr}
   d5324:	4604      	mov	r4, r0
   d5326:	f7fe feb8 	bl	d409a <_ZdlPv>
   d532a:	4620      	mov	r0, r4
   d532c:	bd10      	pop	{r4, pc}
	...

000d5330 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5330:	b510      	push	{r4, lr}
   d5332:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5338:	4608      	mov	r0, r1
   d533a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d533c:	2100      	movs	r1, #0
   d533e:	4b04      	ldr	r3, [pc, #16]	; (d5350 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5340:	7420      	strb	r0, [r4, #16]
   d5342:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5344:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5346:	f7ff fda1 	bl	d4e8c <HAL_I2C_Init>

}
   d534a:	4620      	mov	r0, r4
   d534c:	bd10      	pop	{r4, pc}
   d534e:	bf00      	nop
   d5350:	000d6d6c 	.word	0x000d6d6c

000d5354 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5354:	2100      	movs	r1, #0
   d5356:	7c00      	ldrb	r0, [r0, #16]
   d5358:	f7ff bd90 	b.w	d4e7c <HAL_I2C_Is_Enabled>

000d535c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d535c:	4770      	bx	lr

000d535e <_ZN9IPAddressD0Ev>:
   d535e:	b510      	push	{r4, lr}
   d5360:	4604      	mov	r4, r0
   d5362:	f7fe fe9a 	bl	d409a <_ZdlPv>
   d5366:	4620      	mov	r0, r4
   d5368:	bd10      	pop	{r4, pc}

000d536a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d536a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d536c:	7d03      	ldrb	r3, [r0, #20]
   d536e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5370:	b08d      	sub	sp, #52	; 0x34
   d5372:	460e      	mov	r6, r1
   d5374:	f100 0704 	add.w	r7, r0, #4
   d5378:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d537c:	d002      	beq.n	d5384 <_ZNK9IPAddress7printToER5Print+0x1a>
   d537e:	f100 0508 	add.w	r5, r0, #8
   d5382:	e018      	b.n	d53b6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5384:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5386:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5388:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d538c:	232f      	movs	r3, #47	; 0x2f
   d538e:	462a      	mov	r2, r5
   d5390:	200a      	movs	r0, #10
   d5392:	f7ff fd8b 	bl	d4eac <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5396:	4628      	mov	r0, r5
   d5398:	f001 fc92 	bl	d6cc0 <strlen>
   d539c:	6833      	ldr	r3, [r6, #0]
   d539e:	4602      	mov	r2, r0
   d53a0:	68db      	ldr	r3, [r3, #12]
   d53a2:	4629      	mov	r1, r5
   d53a4:	4630      	mov	r0, r6
   d53a6:	4798      	blx	r3
   d53a8:	e00f      	b.n	d53ca <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d53aa:	b124      	cbz	r4, d53b6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d53ac:	212e      	movs	r1, #46	; 0x2e
   d53ae:	4630      	mov	r0, r6
   d53b0:	f000 f9da 	bl	d5768 <_ZN5Print5printEc>
   d53b4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d53b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d53ba:	220a      	movs	r2, #10
   d53bc:	4630      	mov	r0, r6
   d53be:	f000 fa29 	bl	d5814 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53c2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53c4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53c6:	d1f0      	bne.n	d53aa <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53c8:	4620      	mov	r0, r4
    }
    return n;
}
   d53ca:	b00d      	add	sp, #52	; 0x34
   d53cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d53d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d53d0:	b510      	push	{r4, lr}
   d53d2:	4b05      	ldr	r3, [pc, #20]	; (d53e8 <_ZN9IPAddressC1Ev+0x18>)
   d53d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d53d6:	2211      	movs	r2, #17
   d53d8:	f840 3b04 	str.w	r3, [r0], #4
   d53dc:	2100      	movs	r1, #0
   d53de:	f001 fbf2 	bl	d6bc6 <memset>
{
    clear();
}
   d53e2:	4620      	mov	r0, r4
   d53e4:	bd10      	pop	{r4, pc}
   d53e6:	bf00      	nop
   d53e8:	000d6d94 	.word	0x000d6d94

000d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d53ec:	4603      	mov	r3, r0
   d53ee:	4a07      	ldr	r2, [pc, #28]	; (d540c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53f0:	b510      	push	{r4, lr}
   d53f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d53f6:	f101 0210 	add.w	r2, r1, #16
   d53fa:	f851 4b04 	ldr.w	r4, [r1], #4
   d53fe:	f843 4b04 	str.w	r4, [r3], #4
   d5402:	4291      	cmp	r1, r2
   d5404:	d1f9      	bne.n	d53fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5406:	780a      	ldrb	r2, [r1, #0]
   d5408:	701a      	strb	r2, [r3, #0]
}
   d540a:	bd10      	pop	{r4, pc}
   d540c:	000d6d94 	.word	0x000d6d94

000d5410 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5410:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5412:	2b04      	cmp	r3, #4
   d5414:	d101      	bne.n	d541a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5416:	6840      	ldr	r0, [r0, #4]
   d5418:	e008      	b.n	d542c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d541a:	2b06      	cmp	r3, #6
   d541c:	d10a      	bne.n	d5434 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d541e:	6843      	ldr	r3, [r0, #4]
   d5420:	b153      	cbz	r3, d5438 <_ZNK9IPAddresscvbEv+0x28>
   d5422:	6883      	ldr	r3, [r0, #8]
   d5424:	b143      	cbz	r3, d5438 <_ZNK9IPAddresscvbEv+0x28>
   d5426:	68c3      	ldr	r3, [r0, #12]
   d5428:	b133      	cbz	r3, d5438 <_ZNK9IPAddresscvbEv+0x28>
   d542a:	6900      	ldr	r0, [r0, #16]
   d542c:	3000      	adds	r0, #0
   d542e:	bf18      	it	ne
   d5430:	2001      	movne	r0, #1
   d5432:	4770      	bx	lr
   d5434:	2000      	movs	r0, #0
   d5436:	4770      	bx	lr
   d5438:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d543a:	4770      	bx	lr

000d543c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d543c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d543e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5442:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5446:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d544a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d544e:	2304      	movs	r3, #4
   d5450:	6041      	str	r1, [r0, #4]
   d5452:	7503      	strb	r3, [r0, #20]
   d5454:	bd10      	pop	{r4, pc}

000d5456 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5456:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5458:	780d      	ldrb	r5, [r1, #0]
   d545a:	788b      	ldrb	r3, [r1, #2]
   d545c:	784a      	ldrb	r2, [r1, #1]
   d545e:	78c9      	ldrb	r1, [r1, #3]
   d5460:	9100      	str	r1, [sp, #0]
   d5462:	4629      	mov	r1, r5
   d5464:	f7ff ffea 	bl	d543c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5468:	b003      	add	sp, #12
   d546a:	bd30      	pop	{r4, r5, pc}

000d546c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d546c:	4b01      	ldr	r3, [pc, #4]	; (d5474 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d546e:	4a02      	ldr	r2, [pc, #8]	; (d5478 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5470:	601a      	str	r2, [r3, #0]
   d5472:	4770      	bx	lr
   d5474:	2003e3d4 	.word	0x2003e3d4
   d5478:	000d6e55 	.word	0x000d6e55

000d547c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d547c:	2200      	movs	r2, #0
   d547e:	4611      	mov	r1, r2
   d5480:	6840      	ldr	r0, [r0, #4]
   d5482:	f7ff bea7 	b.w	d51d4 <network_listening>

000d5486 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5486:	2200      	movs	r2, #0
   d5488:	4611      	mov	r1, r2
   d548a:	6840      	ldr	r0, [r0, #4]
   d548c:	f7ff beb2 	b.w	d51f4 <network_get_listen_timeout>

000d5490 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5490:	2200      	movs	r2, #0
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	f7ff bea6 	b.w	d51e4 <network_set_listen_timeout>

000d5498 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5498:	2200      	movs	r2, #0
   d549a:	f081 0101 	eor.w	r1, r1, #1
   d549e:	6840      	ldr	r0, [r0, #4]
   d54a0:	f7ff be90 	b.w	d51c4 <network_listen>

000d54a4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d54a4:	2300      	movs	r3, #0
   d54a6:	461a      	mov	r2, r3
   d54a8:	4619      	mov	r1, r3
   d54aa:	6840      	ldr	r0, [r0, #4]
   d54ac:	f7ff be82 	b.w	d51b4 <network_off>

000d54b0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d54b0:	2300      	movs	r3, #0
   d54b2:	461a      	mov	r2, r3
   d54b4:	4619      	mov	r1, r3
   d54b6:	6840      	ldr	r0, [r0, #4]
   d54b8:	f7ff be74 	b.w	d51a4 <network_on>

000d54bc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54bc:	2200      	movs	r2, #0
   d54be:	4611      	mov	r1, r2
   d54c0:	6840      	ldr	r0, [r0, #4]
   d54c2:	f7ff be67 	b.w	d5194 <network_ready>

000d54c6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54c6:	2200      	movs	r2, #0
   d54c8:	4611      	mov	r1, r2
   d54ca:	6840      	ldr	r0, [r0, #4]
   d54cc:	f7ff be52 	b.w	d5174 <network_connecting>

000d54d0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54d0:	2200      	movs	r2, #0
   d54d2:	2102      	movs	r1, #2
   d54d4:	6840      	ldr	r0, [r0, #4]
   d54d6:	f7ff be55 	b.w	d5184 <network_disconnect>

000d54da <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54da:	2300      	movs	r3, #0
   d54dc:	461a      	mov	r2, r3
   d54de:	6840      	ldr	r0, [r0, #4]
   d54e0:	f7ff be40 	b.w	d5164 <network_connect>

000d54e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d54e4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54e6:	4605      	mov	r5, r0
   d54e8:	b178      	cbz	r0, d550a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54ea:	6804      	ldr	r4, [r0, #0]
   d54ec:	b144      	cbz	r4, d5500 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d54ee:	68a3      	ldr	r3, [r4, #8]
   d54f0:	b11b      	cbz	r3, d54fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54f2:	2203      	movs	r2, #3
   d54f4:	4621      	mov	r1, r4
   d54f6:	4620      	mov	r0, r4
   d54f8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54fa:	4620      	mov	r0, r4
   d54fc:	f7fe fdcd 	bl	d409a <_ZdlPv>
   d5500:	4628      	mov	r0, r5
      }
   d5502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5506:	f7fe bdc8 	b.w	d409a <_ZdlPv>
   d550a:	bd38      	pop	{r3, r4, r5, pc}

000d550c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d550c:	b110      	cbz	r0, d5514 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d550e:	6803      	ldr	r3, [r0, #0]
   d5510:	685b      	ldr	r3, [r3, #4]
   d5512:	4718      	bx	r3
   d5514:	4770      	bx	lr

000d5516 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5516:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5518:	6803      	ldr	r3, [r0, #0]
   d551a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d551c:	b1bb      	cbz	r3, d554e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d551e:	6858      	ldr	r0, [r3, #4]
   d5520:	f7ff fbd4 	bl	d4ccc <os_thread_is_current>
   d5524:	b978      	cbnz	r0, d5546 <_ZN6ThreadD1Ev+0x30>
   d5526:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5528:	7c5a      	ldrb	r2, [r3, #17]
   d552a:	b912      	cbnz	r2, d5532 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d552c:	6858      	ldr	r0, [r3, #4]
   d552e:	f7ff fbdd 	bl	d4cec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5532:	6823      	ldr	r3, [r4, #0]
   d5534:	6858      	ldr	r0, [r3, #4]
   d5536:	f7ff fbe1 	bl	d4cfc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d553a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d553c:	2300      	movs	r3, #0
   d553e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5540:	b128      	cbz	r0, d554e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5542:	f7ff ffcf 	bl	d54e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5546:	6820      	ldr	r0, [r4, #0]
   d5548:	b108      	cbz	r0, d554e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d554a:	f7ff ffcb 	bl	d54e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d554e:	4620      	mov	r0, r4
   d5550:	bd10      	pop	{r4, pc}
	...

000d5554 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5554:	b538      	push	{r3, r4, r5, lr}
   d5556:	4b0b      	ldr	r3, [pc, #44]	; (d5584 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5558:	6003      	str	r3, [r0, #0]
   d555a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d555c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5560:	b108      	cbz	r0, d5566 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5562:	f7fe fd9c 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5566:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d556a:	b12d      	cbz	r5, d5578 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d556c:	4628      	mov	r0, r5
   d556e:	f7ff ffd2 	bl	d5516 <_ZN6ThreadD1Ev>
   d5572:	4628      	mov	r0, r5
   d5574:	f7fe fd91 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5578:	68a0      	ldr	r0, [r4, #8]
   d557a:	b108      	cbz	r0, d5580 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d557c:	f7ff ffc6 	bl	d550c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5580:	4620      	mov	r0, r4
   d5582:	bd38      	pop	{r3, r4, r5, pc}
   d5584:	000d6e88 	.word	0x000d6e88

000d5588 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5588:	b538      	push	{r3, r4, r5, lr}
   d558a:	4c0d      	ldr	r4, [pc, #52]	; (d55c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d558c:	4b0d      	ldr	r3, [pc, #52]	; (d55c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d558e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5590:	2500      	movs	r5, #0
   d5592:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5594:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5598:	6063      	str	r3, [r4, #4]
   d559a:	60a5      	str	r5, [r4, #8]
   d559c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55a0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d55a4:	f7ff fbe2 	bl	d4d6c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d55a8:	4b07      	ldr	r3, [pc, #28]	; (d55c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d55aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d55ae:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d55b0:	4620      	mov	r0, r4
   d55b2:	4a06      	ldr	r2, [pc, #24]	; (d55cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d55b4:	4906      	ldr	r1, [pc, #24]	; (d55d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d55b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d55ba:	f001 b99d 	b.w	d68f8 <__aeabi_atexit>
   d55be:	bf00      	nop
   d55c0:	2003e3d8 	.word	0x2003e3d8
   d55c4:	000d6ebc 	.word	0x000d6ebc
   d55c8:	000d6e88 	.word	0x000d6e88
   d55cc:	2003e328 	.word	0x2003e328
   d55d0:	000d5555 	.word	0x000d5555

000d55d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d55d4:	2300      	movs	r3, #0
   d55d6:	461a      	mov	r2, r3
   d55d8:	6840      	ldr	r0, [r0, #4]
   d55da:	f7ff bdc3 	b.w	d5164 <network_connect>

000d55de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d55de:	2200      	movs	r2, #0
   d55e0:	2102      	movs	r1, #2
   d55e2:	6840      	ldr	r0, [r0, #4]
   d55e4:	f7ff bdce 	b.w	d5184 <network_disconnect>

000d55e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d55e8:	2200      	movs	r2, #0
   d55ea:	4611      	mov	r1, r2
   d55ec:	6840      	ldr	r0, [r0, #4]
   d55ee:	f7ff bdc1 	b.w	d5174 <network_connecting>

000d55f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d55f2:	2200      	movs	r2, #0
   d55f4:	4611      	mov	r1, r2
   d55f6:	6840      	ldr	r0, [r0, #4]
   d55f8:	f7ff bdcc 	b.w	d5194 <network_ready>

000d55fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d55fc:	2300      	movs	r3, #0
   d55fe:	461a      	mov	r2, r3
   d5600:	4619      	mov	r1, r3
   d5602:	6840      	ldr	r0, [r0, #4]
   d5604:	f7ff bdce 	b.w	d51a4 <network_on>

000d5608 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5608:	2300      	movs	r3, #0
   d560a:	461a      	mov	r2, r3
   d560c:	4619      	mov	r1, r3
   d560e:	6840      	ldr	r0, [r0, #4]
   d5610:	f7ff bdd0 	b.w	d51b4 <network_off>

000d5614 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5614:	2200      	movs	r2, #0
   d5616:	f081 0101 	eor.w	r1, r1, #1
   d561a:	6840      	ldr	r0, [r0, #4]
   d561c:	f7ff bdd2 	b.w	d51c4 <network_listen>

000d5620 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5620:	2200      	movs	r2, #0
   d5622:	6840      	ldr	r0, [r0, #4]
   d5624:	f7ff bdde 	b.w	d51e4 <network_set_listen_timeout>

000d5628 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5628:	2200      	movs	r2, #0
   d562a:	4611      	mov	r1, r2
   d562c:	6840      	ldr	r0, [r0, #4]
   d562e:	f7ff bde1 	b.w	d51f4 <network_get_listen_timeout>

000d5632 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5632:	2200      	movs	r2, #0
   d5634:	4611      	mov	r1, r2
   d5636:	6840      	ldr	r0, [r0, #4]
   d5638:	f7ff bdcc 	b.w	d51d4 <network_listening>

000d563c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d563c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5640:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5642:	b095      	sub	sp, #84	; 0x54
   d5644:	4616      	mov	r6, r2
   d5646:	460d      	mov	r5, r1
   d5648:	4607      	mov	r7, r0
    IPAddress addr;
   d564a:	f7ff fec1 	bl	d53d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d564e:	4621      	mov	r1, r4
   d5650:	2220      	movs	r2, #32
   d5652:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5654:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5656:	f001 fab6 	bl	d6bc6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d565a:	2340      	movs	r3, #64	; 0x40
   d565c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d565e:	4621      	mov	r1, r4
   d5660:	466b      	mov	r3, sp
   d5662:	aa0c      	add	r2, sp, #48	; 0x30
   d5664:	4630      	mov	r0, r6
   d5666:	f7ff fc41 	bl	d4eec <netdb_getaddrinfo>
    if (!r) {
   d566a:	4604      	mov	r4, r0
   d566c:	2800      	cmp	r0, #0
   d566e:	d144      	bne.n	d56fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5670:	4602      	mov	r2, r0
   d5672:	2101      	movs	r1, #1
   d5674:	6868      	ldr	r0, [r5, #4]
   d5676:	f7ff fd8d 	bl	d5194 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d567a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d567c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d567e:	4622      	mov	r2, r4
   d5680:	6868      	ldr	r0, [r5, #4]
   d5682:	f7ff fd87 	bl	d5194 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5686:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5688:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d568a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d568c:	2e00      	cmp	r6, #0
   d568e:	d034      	beq.n	d56fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5690:	2900      	cmp	r1, #0
   d5692:	d132      	bne.n	d56fa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5694:	6873      	ldr	r3, [r6, #4]
   d5696:	2b02      	cmp	r3, #2
   d5698:	d002      	beq.n	d56a0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d569a:	2b0a      	cmp	r3, #10
   d569c:	d009      	beq.n	d56b2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d569e:	e02a      	b.n	d56f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d56a0:	f1b8 0f00 	cmp.w	r8, #0
   d56a4:	d027      	beq.n	d56f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d56a6:	6971      	ldr	r1, [r6, #20]
   d56a8:	4638      	mov	r0, r7
   d56aa:	3104      	adds	r1, #4
   d56ac:	f7ff fed3 	bl	d5456 <_ZN9IPAddressaSEPKh>
   d56b0:	e020      	b.n	d56f4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d56b2:	f1b9 0f00 	cmp.w	r9, #0
   d56b6:	d01e      	beq.n	d56f6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d56b8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d56ba:	2211      	movs	r2, #17
   d56bc:	a801      	add	r0, sp, #4
   d56be:	f001 fa82 	bl	d6bc6 <memset>
                    a.v = 6;
   d56c2:	2306      	movs	r3, #6
   d56c4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d56c8:	ad01      	add	r5, sp, #4
   d56ca:	f104 0308 	add.w	r3, r4, #8
   d56ce:	3418      	adds	r4, #24
   d56d0:	6818      	ldr	r0, [r3, #0]
   d56d2:	6859      	ldr	r1, [r3, #4]
   d56d4:	462a      	mov	r2, r5
   d56d6:	c203      	stmia	r2!, {r0, r1}
   d56d8:	3308      	adds	r3, #8
   d56da:	42a3      	cmp	r3, r4
   d56dc:	4615      	mov	r5, r2
   d56de:	d1f7      	bne.n	d56d0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d56e0:	a901      	add	r1, sp, #4
   d56e2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d56e4:	ad07      	add	r5, sp, #28
   d56e6:	f7ff fe81 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d56ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56ec:	1d3c      	adds	r4, r7, #4
   d56ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56f0:	682b      	ldr	r3, [r5, #0]
   d56f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d56f4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56f6:	69f6      	ldr	r6, [r6, #28]
   d56f8:	e7c8      	b.n	d568c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d56fa:	9800      	ldr	r0, [sp, #0]
   d56fc:	f7ff fbee 	bl	d4edc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5700:	4638      	mov	r0, r7
   d5702:	b015      	add	sp, #84	; 0x54
   d5704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5708 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5708:	4b02      	ldr	r3, [pc, #8]	; (d5714 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d570a:	4a03      	ldr	r2, [pc, #12]	; (d5718 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d570c:	601a      	str	r2, [r3, #0]
   d570e:	2200      	movs	r2, #0
   d5710:	605a      	str	r2, [r3, #4]
   d5712:	4770      	bx	lr
   d5714:	2003e5a8 	.word	0x2003e5a8
   d5718:	000d6ebc 	.word	0x000d6ebc

000d571c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d571e:	4606      	mov	r6, r0
   d5720:	460d      	mov	r5, r1
   d5722:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5724:	2400      	movs	r4, #0
  while (size--) {
   d5726:	42bd      	cmp	r5, r7
   d5728:	d00c      	beq.n	d5744 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d572a:	6833      	ldr	r3, [r6, #0]
   d572c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5730:	689b      	ldr	r3, [r3, #8]
   d5732:	4630      	mov	r0, r6
   d5734:	4798      	blx	r3
     if (chunk>=0)
   d5736:	2800      	cmp	r0, #0
   d5738:	db01      	blt.n	d573e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d573a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d573c:	e7f3      	b.n	d5726 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d573e:	2c00      	cmp	r4, #0
   d5740:	bf08      	it	eq
   d5742:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5744:	4620      	mov	r0, r4
   d5746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5748 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5748:	b570      	push	{r4, r5, r6, lr}
   d574a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d574c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d574e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5750:	b149      	cbz	r1, d5766 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5752:	f001 fab5 	bl	d6cc0 <strlen>
   d5756:	682b      	ldr	r3, [r5, #0]
   d5758:	4602      	mov	r2, r0
   d575a:	4621      	mov	r1, r4
   d575c:	4628      	mov	r0, r5
   d575e:	68db      	ldr	r3, [r3, #12]
    }
   d5760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5764:	4718      	bx	r3
    }
   d5766:	bd70      	pop	{r4, r5, r6, pc}

000d5768 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5768:	6803      	ldr	r3, [r0, #0]
   d576a:	689b      	ldr	r3, [r3, #8]
   d576c:	4718      	bx	r3

000d576e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d576e:	680a      	ldr	r2, [r1, #0]
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   d5770:	460b      	mov	r3, r1
   return x.printTo(*this);
   d5772:	6812      	ldr	r2, [r2, #0]
   d5774:	4601      	mov	r1, r0
   d5776:	4618      	mov	r0, r3
   d5778:	4710      	bx	r2

000d577a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d577a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d577c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d577e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5780:	f7ff fff2 	bl	d5768 <_ZN5Print5printEc>
  n += print('\n');
   d5784:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5786:	4604      	mov	r4, r0
  n += print('\n');
   d5788:	4628      	mov	r0, r5
   d578a:	f7ff ffed 	bl	d5768 <_ZN5Print5printEc>
  return n;
}
   d578e:	4420      	add	r0, r4
   d5790:	bd38      	pop	{r3, r4, r5, pc}

000d5792 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5792:	b538      	push	{r3, r4, r5, lr}
   d5794:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5796:	f7ff ffd7 	bl	d5748 <_ZN5Print5writeEPKc>
   d579a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d579c:	4628      	mov	r0, r5
   d579e:	f7ff ffec 	bl	d577a <_ZN5Print7printlnEv>
  return n;
}
   d57a2:	4420      	add	r0, r4
   d57a4:	bd38      	pop	{r3, r4, r5, pc}

000d57a6 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d57a6:	b538      	push	{r3, r4, r5, lr}
   d57a8:	4605      	mov	r5, r0
   size_t n = print(x);
   d57aa:	f7ff ffe0 	bl	d576e <_ZN5Print5printERK9Printable>
   d57ae:	4604      	mov	r4, r0
   n += println();
   d57b0:	4628      	mov	r0, r5
   d57b2:	f7ff ffe2 	bl	d577a <_ZN5Print7printlnEv>
   return n;
 }
   d57b6:	4420      	add	r0, r4
   d57b8:	bd38      	pop	{r3, r4, r5, pc}

000d57ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d57ba:	b530      	push	{r4, r5, lr}
   d57bc:	b08b      	sub	sp, #44	; 0x2c
   d57be:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d57c0:	2100      	movs	r1, #0
   d57c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57c6:	2a01      	cmp	r2, #1
   d57c8:	bf98      	it	ls
   d57ca:	220a      	movls	r2, #10
   d57cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d57d0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d57d4:	fb05 3312 	mls	r3, r5, r2, r3
   d57d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57dc:	2b09      	cmp	r3, #9
   d57de:	bf94      	ite	ls
   d57e0:	3330      	addls	r3, #48	; 0x30
   d57e2:	3337      	addhi	r3, #55	; 0x37
   d57e4:	b2db      	uxtb	r3, r3
   d57e6:	4621      	mov	r1, r4
   d57e8:	f804 3901 	strb.w	r3, [r4], #-1
   d57ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d57ee:	2d00      	cmp	r5, #0
   d57f0:	d1ee      	bne.n	d57d0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d57f2:	f7ff ffa9 	bl	d5748 <_ZN5Print5writeEPKc>
}
   d57f6:	b00b      	add	sp, #44	; 0x2c
   d57f8:	bd30      	pop	{r4, r5, pc}

000d57fa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d57fa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d57fc:	b92a      	cbnz	r2, d580a <_ZN5Print5printEmi+0x10>
   d57fe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5800:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5804:	689b      	ldr	r3, [r3, #8]
   d5806:	b2c9      	uxtb	r1, r1
   d5808:	4718      	bx	r3
  else return printNumber(n, base);
   d580a:	b2d2      	uxtb	r2, r2
}
   d580c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5810:	f7ff bfd3 	b.w	d57ba <_ZN5Print11printNumberEmh>

000d5814 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5814:	f7ff bff1 	b.w	d57fa <_ZN5Print5printEmi>

000d5818 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5818:	b510      	push	{r4, lr}
  if (0 == max) {
   d581a:	4604      	mov	r4, r0
   d581c:	b130      	cbz	r0, d582c <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d581e:	f001 fa03 	bl	d6c28 <rand>
   d5822:	fb90 f3f4 	sdiv	r3, r0, r4
   d5826:	fb03 0014 	mls	r0, r3, r4, r0
   d582a:	bd10      	pop	{r4, pc}
}
   d582c:	bd10      	pop	{r4, pc}

000d582e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d582e:	b510      	push	{r4, lr}
   d5830:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5832:	f7fe fcef 	bl	d4214 <_ZNSt14_Function_baseD1Ev>
   d5836:	4620      	mov	r0, r4
   d5838:	bd10      	pop	{r4, pc}
	...

000d583c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d583c:	4803      	ldr	r0, [pc, #12]	; (d584c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d583e:	4a04      	ldr	r2, [pc, #16]	; (d5850 <_GLOBAL__sub_I_RGB+0x14>)
   d5840:	4904      	ldr	r1, [pc, #16]	; (d5854 <_GLOBAL__sub_I_RGB+0x18>)
   d5842:	2300      	movs	r3, #0
   d5844:	6083      	str	r3, [r0, #8]
   d5846:	f001 b857 	b.w	d68f8 <__aeabi_atexit>
   d584a:	bf00      	nop
   d584c:	2003e5b0 	.word	0x2003e5b0
   d5850:	2003e328 	.word	0x2003e328
   d5854:	000d582f 	.word	0x000d582f

000d5858 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5858:	4770      	bx	lr

000d585a <_ZN8SPIClassD0Ev>:
   d585a:	b510      	push	{r4, lr}
   d585c:	4604      	mov	r4, r0
   d585e:	f7fe fc1c 	bl	d409a <_ZdlPv>
   d5862:	4620      	mov	r0, r4
   d5864:	bd10      	pop	{r4, pc}
	...

000d5868 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5868:	b570      	push	{r4, r5, r6, lr}
   d586a:	4b08      	ldr	r3, [pc, #32]	; (d588c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d586c:	6003      	str	r3, [r0, #0]
   d586e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5870:	2500      	movs	r5, #0
   d5872:	460e      	mov	r6, r1
   d5874:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5878:	f7ff fa70 	bl	d4d5c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d587c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d587e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5880:	f7ff fb94 	bl	d4fac <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5884:	60a5      	str	r5, [r4, #8]
}
   d5886:	4620      	mov	r0, r4
   d5888:	bd70      	pop	{r4, r5, r6, pc}
   d588a:	bf00      	nop
   d588c:	000d6f08 	.word	0x000d6f08

000d5890 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5890:	7900      	ldrb	r0, [r0, #4]
   d5892:	f7ff bb93 	b.w	d4fbc <HAL_SPI_Is_Enabled>

000d5896 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d5896:	b510      	push	{r4, lr}
   d5898:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d589a:	f7ff fa97 	bl	d4dcc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d589e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d58a0:	6823      	ldr	r3, [r4, #0]
   d58a2:	4620      	mov	r0, r4
   d58a4:	695b      	ldr	r3, [r3, #20]
   d58a6:	4798      	blx	r3
    if (c >= 0) return c;
   d58a8:	2800      	cmp	r0, #0
   d58aa:	da08      	bge.n	d58be <_ZN6Stream9timedReadEv+0x28>
   d58ac:	f7ff fa8e 	bl	d4dcc <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d58b0:	68e3      	ldr	r3, [r4, #12]
   d58b2:	1ac0      	subs	r0, r0, r3
   d58b4:	68a3      	ldr	r3, [r4, #8]
   d58b6:	4298      	cmp	r0, r3
   d58b8:	d3f2      	bcc.n	d58a0 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d58ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d58be:	bd10      	pop	{r4, pc}

000d58c0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d58c0:	b538      	push	{r3, r4, r5, lr}
   d58c2:	460d      	mov	r5, r1
  String ret;
   d58c4:	4907      	ldr	r1, [pc, #28]	; (d58e4 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d58c6:	4604      	mov	r4, r0
  String ret;
   d58c8:	f000 f855 	bl	d5976 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d58cc:	4628      	mov	r0, r5
   d58ce:	f7ff ffe2 	bl	d5896 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   d58d2:	2800      	cmp	r0, #0
   d58d4:	db04      	blt.n	d58e0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d58d6:	b2c1      	uxtb	r1, r0
   d58d8:	4620      	mov	r0, r4
   d58da:	f000 f89b 	bl	d5a14 <_ZN6String6concatEc>
   d58de:	e7f5      	b.n	d58cc <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd38      	pop	{r3, r4, r5, pc}
   d58e4:	000d6db6 	.word	0x000d6db6

000d58e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58e8:	b510      	push	{r4, lr}
   d58ea:	4604      	mov	r4, r0
{
	free(buffer);
   d58ec:	6800      	ldr	r0, [r0, #0]
   d58ee:	f7ff fc91 	bl	d5214 <free>
}
   d58f2:	4620      	mov	r0, r4
   d58f4:	bd10      	pop	{r4, pc}

000d58f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58f6:	b510      	push	{r4, lr}
   d58f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58fa:	6800      	ldr	r0, [r0, #0]
   d58fc:	b108      	cbz	r0, d5902 <_ZN6String10invalidateEv+0xc>
   d58fe:	f7ff fc89 	bl	d5214 <free>
	buffer = NULL;
   d5902:	2300      	movs	r3, #0
   d5904:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5906:	60a3      	str	r3, [r4, #8]
   d5908:	6063      	str	r3, [r4, #4]
   d590a:	bd10      	pop	{r4, pc}

000d590c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d590c:	b538      	push	{r3, r4, r5, lr}
   d590e:	4604      	mov	r4, r0
   d5910:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5912:	6800      	ldr	r0, [r0, #0]
   d5914:	3101      	adds	r1, #1
   d5916:	f7ff fc85 	bl	d5224 <realloc>
	if (newbuffer) {
   d591a:	b110      	cbz	r0, d5922 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d591c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5920:	2001      	movs	r0, #1
	}
	return 0;
}
   d5922:	bd38      	pop	{r3, r4, r5, pc}

000d5924 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5924:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5926:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5928:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d592a:	b113      	cbz	r3, d5932 <_ZN6String7reserveEj+0xe>
   d592c:	6843      	ldr	r3, [r0, #4]
   d592e:	428b      	cmp	r3, r1
   d5930:	d207      	bcs.n	d5942 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5932:	4620      	mov	r0, r4
   d5934:	f7ff ffea 	bl	d590c <_ZN6String12changeBufferEj>
   d5938:	b120      	cbz	r0, d5944 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d593a:	68a3      	ldr	r3, [r4, #8]
   d593c:	b90b      	cbnz	r3, d5942 <_ZN6String7reserveEj+0x1e>
   d593e:	6822      	ldr	r2, [r4, #0]
   d5940:	7013      	strb	r3, [r2, #0]
   d5942:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5944:	bd10      	pop	{r4, pc}

000d5946 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5946:	b570      	push	{r4, r5, r6, lr}
   d5948:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d594a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d594c:	4604      	mov	r4, r0
   d594e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5950:	f7ff ffe8 	bl	d5924 <_ZN6String7reserveEj>
   d5954:	b918      	cbnz	r0, d595e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff ffcd 	bl	d58f6 <_ZN6String10invalidateEv>
		return *this;
   d595c:	e009      	b.n	d5972 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d595e:	462a      	mov	r2, r5
   d5960:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5962:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5964:	6820      	ldr	r0, [r4, #0]
   d5966:	f001 f923 	bl	d6bb0 <memcpy>
	buffer[len] = 0;
   d596a:	6822      	ldr	r2, [r4, #0]
   d596c:	68a3      	ldr	r3, [r4, #8]
   d596e:	2100      	movs	r1, #0
   d5970:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5972:	4620      	mov	r0, r4
   d5974:	bd70      	pop	{r4, r5, r6, pc}

000d5976 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5976:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5978:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d597a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d597c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d597e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5980:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5982:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5984:	460d      	mov	r5, r1
   d5986:	b139      	cbz	r1, d5998 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5988:	4608      	mov	r0, r1
   d598a:	f001 f999 	bl	d6cc0 <strlen>
   d598e:	4629      	mov	r1, r5
   d5990:	4602      	mov	r2, r0
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff ffd7 	bl	d5946 <_ZN6String4copyEPKcj>
}
   d5998:	4620      	mov	r0, r4
   d599a:	bd38      	pop	{r3, r4, r5, pc}

000d599c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d599c:	b538      	push	{r3, r4, r5, lr}
   d599e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d59a0:	460c      	mov	r4, r1
   d59a2:	b141      	cbz	r1, d59b6 <_ZN6StringaSEPKc+0x1a>
   d59a4:	4608      	mov	r0, r1
   d59a6:	f001 f98b 	bl	d6cc0 <strlen>
   d59aa:	4621      	mov	r1, r4
   d59ac:	4602      	mov	r2, r0
   d59ae:	4628      	mov	r0, r5
   d59b0:	f7ff ffc9 	bl	d5946 <_ZN6String4copyEPKcj>
   d59b4:	e001      	b.n	d59ba <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d59b6:	f7ff ff9e 	bl	d58f6 <_ZN6String10invalidateEv>

	return *this;
}
   d59ba:	4628      	mov	r0, r5
   d59bc:	bd38      	pop	{r3, r4, r5, pc}

000d59be <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d59be:	b510      	push	{r4, lr}
   d59c0:	4604      	mov	r4, r0
   d59c2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d59c4:	2300      	movs	r3, #0
   d59c6:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d59c8:	6063      	str	r3, [r4, #4]
	len = 0;
   d59ca:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d59cc:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d59ce:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   d59d0:	2301      	movs	r3, #1
   d59d2:	a901      	add	r1, sp, #4
   d59d4:	f000 fe6d 	bl	d66b2 <ultoa>
	*this = buf;
   d59d8:	a901      	add	r1, sp, #4
   d59da:	4620      	mov	r0, r4
   d59dc:	f7ff ffde 	bl	d599c <_ZN6StringaSEPKc>
}
   d59e0:	4620      	mov	r0, r4
   d59e2:	b00a      	add	sp, #40	; 0x28
   d59e4:	bd10      	pop	{r4, pc}

000d59e6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d59e6:	b570      	push	{r4, r5, r6, lr}
   d59e8:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d59ea:	460e      	mov	r6, r1
   d59ec:	b909      	cbnz	r1, d59f2 <_ZN6String6concatEPKcj+0xc>
   d59ee:	2000      	movs	r0, #0
   d59f0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d59f2:	b16a      	cbz	r2, d5a10 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d59f4:	6883      	ldr	r3, [r0, #8]
   d59f6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d59f8:	4629      	mov	r1, r5
   d59fa:	f7ff ff93 	bl	d5924 <_ZN6String7reserveEj>
   d59fe:	2800      	cmp	r0, #0
   d5a00:	d0f5      	beq.n	d59ee <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5a02:	6820      	ldr	r0, [r4, #0]
   d5a04:	68a3      	ldr	r3, [r4, #8]
   d5a06:	4631      	mov	r1, r6
   d5a08:	4418      	add	r0, r3
   d5a0a:	f001 f951 	bl	d6cb0 <strcpy>
	len = newlen;
   d5a0e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5a10:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5a12:	bd70      	pop	{r4, r5, r6, pc}

000d5a14 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5a14:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5a16:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5a18:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5a1c:	2201      	movs	r2, #1
   d5a1e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5a20:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5a24:	f7ff ffdf 	bl	d59e6 <_ZN6String6concatEPKcj>
}
   d5a28:	b003      	add	sp, #12
   d5a2a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a2e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5a2e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5a30:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5a32:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5a34:	b912      	cbnz	r2, d5a3c <_ZNK6String6equalsEPKc+0xe>
   d5a36:	b919      	cbnz	r1, d5a40 <_ZNK6String6equalsEPKc+0x12>
   d5a38:	2001      	movs	r0, #1
   d5a3a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5a3c:	b911      	cbnz	r1, d5a44 <_ZNK6String6equalsEPKc+0x16>
   d5a3e:	6803      	ldr	r3, [r0, #0]
   d5a40:	7818      	ldrb	r0, [r3, #0]
   d5a42:	e002      	b.n	d5a4a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5a44:	6800      	ldr	r0, [r0, #0]
   d5a46:	f001 f929 	bl	d6c9c <strcmp>
   d5a4a:	fab0 f080 	clz	r0, r0
   d5a4e:	0940      	lsrs	r0, r0, #5
}
   d5a50:	bd08      	pop	{r3, pc}
	...

000d5a54 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d5a58:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5a5a:	460e      	mov	r6, r1
   d5a5c:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5a5e:	4910      	ldr	r1, [pc, #64]	; (d5aa0 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d5a60:	bf88      	it	hi
   d5a62:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5a64:	4615      	mov	r5, r2
   d5a66:	4607      	mov	r7, r0
	if (left > right) {
   d5a68:	bf84      	itt	hi
   d5a6a:	4625      	movhi	r5, r4
   d5a6c:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5a6e:	f7ff ff82 	bl	d5976 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5a72:	68b1      	ldr	r1, [r6, #8]
   d5a74:	428d      	cmp	r5, r1
   d5a76:	d80f      	bhi.n	d5a98 <_ZNK6String9substringEjj+0x44>
   d5a78:	428c      	cmp	r4, r1
   d5a7a:	bf28      	it	cs
   d5a7c:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5a7e:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d5a80:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5a82:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d5a86:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d5a88:	6831      	ldr	r1, [r6, #0]
   d5a8a:	4638      	mov	r0, r7
   d5a8c:	4429      	add	r1, r5
   d5a8e:	f7ff ff85 	bl	d599c <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d5a92:	6833      	ldr	r3, [r6, #0]
   d5a94:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d5a98:	4638      	mov	r0, r7
   d5a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a9e:	bf00      	nop
   d5aa0:	000d6db6 	.word	0x000d6db6

000d5aa4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5aa4:	b40e      	push	{r1, r2, r3}
   d5aa6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d5aa8:	ac09      	add	r4, sp, #36	; 0x24
   d5aaa:	4605      	mov	r5, r0
   d5aac:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d5ab0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5ab2:	4623      	mov	r3, r4
   d5ab4:	463a      	mov	r2, r7
   d5ab6:	2105      	movs	r1, #5
   d5ab8:	a802      	add	r0, sp, #8
   d5aba:	f7ff fbbb 	bl	d5234 <vsnprintf>
    va_end(marker);

    String result;
   d5abe:	490c      	ldr	r1, [pc, #48]	; (d5af0 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5ac0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d5ac2:	4628      	mov	r0, r5
   d5ac4:	f7ff ff57 	bl	d5976 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d5ac8:	4631      	mov	r1, r6
   d5aca:	4628      	mov	r0, r5
   d5acc:	f7ff ff2a 	bl	d5924 <_ZN6String7reserveEj>
    if (result.buffer) {
   d5ad0:	6828      	ldr	r0, [r5, #0]
   d5ad2:	b130      	cbz	r0, d5ae2 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5ad4:	4623      	mov	r3, r4
   d5ad6:	463a      	mov	r2, r7
   d5ad8:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d5ada:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5adc:	f7ff fbaa 	bl	d5234 <vsnprintf>
        va_end(marker);
        result.len = n;
   d5ae0:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d5ae2:	4628      	mov	r0, r5
   d5ae4:	b004      	add	sp, #16
   d5ae6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5aea:	b003      	add	sp, #12
   d5aec:	4770      	bx	lr
   d5aee:	bf00      	nop
   d5af0:	000d6db6 	.word	0x000d6db6

000d5af4 <_ZN11SystemClass3dfuEb>:
void SystemClass::dfu(bool persist)
{
    // true  - DFU mode persist if firmware upgrade is not completed
    // false - Briefly enter DFU bootloader mode (works with latest bootloader only )
    //         Subsequent reset or power off-on will execute normal firmware
    HAL_Core_Enter_Bootloader(persist);
   d5af4:	f7ff b94a 	b.w	d4d8c <HAL_Core_Enter_Bootloader>

000d5af8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5af8:	4b04      	ldr	r3, [pc, #16]	; (d5b0c <_GLOBAL__sub_I_System+0x14>)
   d5afa:	2000      	movs	r0, #0
   d5afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b00:	7018      	strb	r0, [r3, #0]
   d5b02:	8058      	strh	r0, [r3, #2]
   d5b04:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b06:	f7ff baf1 	b.w	d50ec <set_system_mode>
   d5b0a:	bf00      	nop
   d5b0c:	2003e5c0 	.word	0x2003e5c0

000d5b10 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b12:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b14:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5b16:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5b1a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5b1c:	2201      	movs	r2, #1
   d5b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5b22:	4621      	mov	r1, r4
   d5b24:	47a8      	blx	r5
}
   d5b26:	b003      	add	sp, #12
   d5b28:	bd30      	pop	{r4, r5, pc}

000d5b2a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5b2a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5b2c:	6803      	ldr	r3, [r0, #0]
   d5b2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5b34:	46a4      	mov	ip, r4
}
   d5b36:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5b3a:	4760      	bx	ip

000d5b3c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b3e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5b40:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5b42:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5b46:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5b48:	4621      	mov	r1, r4
   d5b4a:	4613      	mov	r3, r2
   d5b4c:	2201      	movs	r2, #1
   d5b4e:	47a8      	blx	r5
}
   d5b50:	b003      	add	sp, #12
   d5b52:	bd30      	pop	{r4, r5, pc}

000d5b54 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5b54:	4770      	bx	lr

000d5b56 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5b56:	b538      	push	{r3, r4, r5, lr}
   d5b58:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5b5a:	681a      	ldr	r2, [r3, #0]
   d5b5c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5b5e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5b60:	da05      	bge.n	d5b6e <_ZN9TCPClient9connectedEv+0x18>
   d5b62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5b66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5b6a:	429a      	cmp	r2, r3
   d5b6c:	d001      	beq.n	d5b72 <_ZN9TCPClient9connectedEv+0x1c>
   d5b6e:	2501      	movs	r5, #1
   d5b70:	e00b      	b.n	d5b8a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5b72:	6803      	ldr	r3, [r0, #0]
   d5b74:	691b      	ldr	r3, [r3, #16]
   d5b76:	4798      	blx	r3
   d5b78:	2800      	cmp	r0, #0
   d5b7a:	bf14      	ite	ne
   d5b7c:	2501      	movne	r5, #1
   d5b7e:	2500      	moveq	r5, #0
        if (!rv) {
   d5b80:	d103      	bne.n	d5b8a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5b82:	6823      	ldr	r3, [r4, #0]
   d5b84:	4620      	mov	r0, r4
   d5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b88:	4798      	blx	r3
        }
    }
    return rv;
}
   d5b8a:	4628      	mov	r0, r5
   d5b8c:	bd38      	pop	{r3, r4, r5, pc}

000d5b8e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5b8e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5b90:	6818      	ldr	r0, [r3, #0]
}
   d5b92:	43c0      	mvns	r0, r0
   d5b94:	0fc0      	lsrs	r0, r0, #31
   d5b96:	4770      	bx	lr

000d5b98 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b98:	4770      	bx	lr

000d5b9a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5b9a:	2000      	movs	r0, #0
   d5b9c:	4770      	bx	lr

000d5b9e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b9e:	b510      	push	{r4, lr}
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	f7fe fa7a 	bl	d409a <_ZdlPv>
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	bd10      	pop	{r4, pc}

000d5baa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5baa:	f7fe ba76 	b.w	d409a <_ZdlPv>
	...

000d5bb0 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5bb4:	4698      	mov	r8, r3
    stop();
   d5bb6:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5bb8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5bbc:	460c      	mov	r4, r1
   d5bbe:	4606      	mov	r6, r0
   d5bc0:	4617      	mov	r7, r2
    stop();
   d5bc2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5bc4:	ab12      	add	r3, sp, #72	; 0x48
   d5bc6:	2500      	movs	r5, #0
   d5bc8:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5bcc:	462a      	mov	r2, r5
   d5bce:	4629      	mov	r1, r5
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f7ff f98b 	bl	d4eec <netdb_getaddrinfo>
   d5bd6:	2800      	cmp	r0, #0
   d5bd8:	db3a      	blt.n	d5c50 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5bda:	9b00      	ldr	r3, [sp, #0]
   d5bdc:	2b00      	cmp	r3, #0
   d5bde:	d039      	beq.n	d5c54 <_ZN9TCPClient7connectEPKctm+0xa4>
   d5be0:	695b      	ldr	r3, [r3, #20]
   d5be2:	2b00      	cmp	r3, #0
   d5be4:	d036      	beq.n	d5c54 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d5be6:	a806      	add	r0, sp, #24
   d5be8:	f7ff fbf2 	bl	d53d0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5bec:	9b00      	ldr	r3, [sp, #0]
   d5bee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5bf0:	7863      	ldrb	r3, [r4, #1]
   d5bf2:	2b02      	cmp	r3, #2
   d5bf4:	d101      	bne.n	d5bfa <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5bf6:	1d21      	adds	r1, r4, #4
   d5bf8:	e013      	b.n	d5c22 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5bfa:	2b0a      	cmp	r3, #10
   d5bfc:	d114      	bne.n	d5c28 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5bfe:	2211      	movs	r2, #17
   d5c00:	4629      	mov	r1, r5
   d5c02:	a801      	add	r0, sp, #4
   d5c04:	f000 ffdf 	bl	d6bc6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5c08:	68a3      	ldr	r3, [r4, #8]
   d5c0a:	bb33      	cbnz	r3, d5c5a <_ZN9TCPClient7connectEPKctm+0xaa>
   d5c0c:	68e3      	ldr	r3, [r4, #12]
   d5c0e:	bb23      	cbnz	r3, d5c5a <_ZN9TCPClient7connectEPKctm+0xaa>
   d5c10:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5c14:	6925      	ldr	r5, [r4, #16]
   d5c16:	f7ff f951 	bl	d4ebc <inet_htonl>
   d5c1a:	4285      	cmp	r5, r0
   d5c1c:	d11d      	bne.n	d5c5a <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5c1e:	f104 0114 	add.w	r1, r4, #20
   d5c22:	a806      	add	r0, sp, #24
   d5c24:	f7ff fc17 	bl	d5456 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5c28:	a806      	add	r0, sp, #24
   d5c2a:	f7ff fbf1 	bl	d5410 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5c2e:	b188      	cbz	r0, d5c54 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d5c30:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5c32:	ad07      	add	r5, sp, #28
   d5c34:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5c38:	4b18      	ldr	r3, [pc, #96]	; (d5c9c <_ZN9TCPClient7connectEPKctm+0xec>)
   d5c3a:	930c      	str	r3, [sp, #48]	; 0x30
   d5c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c3e:	ac0d      	add	r4, sp, #52	; 0x34
   d5c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c42:	682b      	ldr	r3, [r5, #0]
   d5c44:	7023      	strb	r3, [r4, #0]
   d5c46:	463a      	mov	r2, r7
   d5c48:	4643      	mov	r3, r8
   d5c4a:	a90c      	add	r1, sp, #48	; 0x30
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	47c8      	blx	r9
   d5c50:	4604      	mov	r4, r0
   d5c52:	e01c      	b.n	d5c8e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d5c54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5c58:	e019      	b.n	d5c8e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c5a:	f104 0308 	add.w	r3, r4, #8
   d5c5e:	ad01      	add	r5, sp, #4
   d5c60:	3418      	adds	r4, #24
   d5c62:	6818      	ldr	r0, [r3, #0]
   d5c64:	6859      	ldr	r1, [r3, #4]
   d5c66:	462a      	mov	r2, r5
   d5c68:	c203      	stmia	r2!, {r0, r1}
   d5c6a:	3308      	adds	r3, #8
   d5c6c:	42a3      	cmp	r3, r4
   d5c6e:	4615      	mov	r5, r2
   d5c70:	d1f7      	bne.n	d5c62 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d5c72:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5c74:	a901      	add	r1, sp, #4
   d5c76:	a80c      	add	r0, sp, #48	; 0x30
   d5c78:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5c7a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5c7e:	f7ff fbb5 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c84:	ac07      	add	r4, sp, #28
   d5c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c88:	682b      	ldr	r3, [r5, #0]
   d5c8a:	7023      	strb	r3, [r4, #0]
   d5c8c:	e7cc      	b.n	d5c28 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5c8e:	9800      	ldr	r0, [sp, #0]
   d5c90:	f7ff f924 	bl	d4edc <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d5c94:	4620      	mov	r0, r4
   d5c96:	b013      	add	sp, #76	; 0x4c
   d5c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c9c:	000d6d94 	.word	0x000d6d94

000d5ca0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5ca2:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5ca8:	9202      	str	r2, [sp, #8]
   d5caa:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5cac:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5cae:	4604      	mov	r4, r0
   d5cb0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5cb2:	d008      	beq.n	d5cc6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5cb8:	fbb3 f1f2 	udiv	r1, r3, r2
   d5cbc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5cbe:	fb02 3111 	mls	r1, r2, r1, r3
   d5cc2:	434a      	muls	r2, r1
   d5cc4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5cc6:	6960      	ldr	r0, [r4, #20]
   d5cc8:	2308      	movs	r3, #8
   d5cca:	9300      	str	r3, [sp, #0]
   d5ccc:	f241 0205 	movw	r2, #4101	; 0x1005
   d5cd0:	446b      	add	r3, sp
   d5cd2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5cd6:	6800      	ldr	r0, [r0, #0]
   d5cd8:	f7ff f928 	bl	d4f2c <sock_setsockopt>
    if (ret < 0) {
   d5cdc:	2800      	cmp	r0, #0
   d5cde:	db08      	blt.n	d5cf2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5ce0:	6960      	ldr	r0, [r4, #20]
   d5ce2:	2300      	movs	r3, #0
   d5ce4:	4632      	mov	r2, r6
   d5ce6:	4629      	mov	r1, r5
   d5ce8:	6800      	ldr	r0, [r0, #0]
   d5cea:	f7ff f947 	bl	d4f7c <sock_send>
    if (ret < 0) {
   d5cee:	2800      	cmp	r0, #0
   d5cf0:	da04      	bge.n	d5cfc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d5cf2:	f7ff faa7 	bl	d5244 <__errno>
   d5cf6:	6803      	ldr	r3, [r0, #0]
   d5cf8:	6063      	str	r3, [r4, #4]
   d5cfa:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5cfc:	b004      	add	sp, #16
   d5cfe:	bd70      	pop	{r4, r5, r6, pc}

000d5d00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d00:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5d02:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d04:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5d06:	689b      	ldr	r3, [r3, #8]
   d5d08:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d0a:	68a3      	ldr	r3, [r4, #8]
   d5d0c:	3b01      	subs	r3, #1
   d5d0e:	60a3      	str	r3, [r4, #8]
   d5d10:	b92b      	cbnz	r3, d5d1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5d12:	6823      	ldr	r3, [r4, #0]
   d5d14:	4620      	mov	r0, r4
   d5d16:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5d1c:	4718      	bx	r3
   d5d1e:	bd10      	pop	{r4, pc}

000d5d20 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5d20:	b570      	push	{r4, r5, r6, lr}
   d5d22:	4604      	mov	r4, r0
   d5d24:	694d      	ldr	r5, [r1, #20]
   d5d26:	4b05      	ldr	r3, [pc, #20]	; (d5d3c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5d28:	f844 3b04 	str.w	r3, [r4], #4
   d5d2c:	358c      	adds	r5, #140	; 0x8c
   d5d2e:	4606      	mov	r6, r0
   d5d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d34:	682b      	ldr	r3, [r5, #0]
   d5d36:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5d38:	4630      	mov	r0, r6
   d5d3a:	bd70      	pop	{r4, r5, r6, pc}
   d5d3c:	000d6d94 	.word	0x000d6d94

000d5d40 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5d40:	b510      	push	{r4, lr}
   d5d42:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d4c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5d4e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5d50:	d005      	beq.n	d5d5e <_ZN9TCPClient4peekEv+0x1e>
   d5d52:	6962      	ldr	r2, [r4, #20]
   d5d54:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5d58:	4413      	add	r3, r2
   d5d5a:	7918      	ldrb	r0, [r3, #4]
   d5d5c:	bd10      	pop	{r4, pc}
   d5d5e:	6803      	ldr	r3, [r0, #0]
   d5d60:	691b      	ldr	r3, [r3, #16]
   d5d62:	4798      	blx	r3
   d5d64:	2800      	cmp	r0, #0
   d5d66:	d1f4      	bne.n	d5d52 <_ZN9TCPClient4peekEv+0x12>
   d5d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5d6c:	bd10      	pop	{r4, pc}

000d5d6e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5d6e:	b510      	push	{r4, lr}
   d5d70:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d7a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5d7c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d7e:	d008      	beq.n	d5d92 <_ZN9TCPClient4readEv+0x24>
   d5d80:	6962      	ldr	r2, [r4, #20]
   d5d82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5d86:	1c59      	adds	r1, r3, #1
   d5d88:	4413      	add	r3, r2
   d5d8a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5d8e:	7918      	ldrb	r0, [r3, #4]
   d5d90:	bd10      	pop	{r4, pc}
   d5d92:	6803      	ldr	r3, [r0, #0]
   d5d94:	691b      	ldr	r3, [r3, #16]
   d5d96:	4798      	blx	r3
   d5d98:	2800      	cmp	r0, #0
   d5d9a:	d1f1      	bne.n	d5d80 <_ZN9TCPClient4readEv+0x12>
   d5d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5da0:	bd10      	pop	{r4, pc}

000d5da2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5da4:	6943      	ldr	r3, [r0, #20]
   d5da6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5da8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5dac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5db0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5db2:	4605      	mov	r5, r0
   d5db4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5db6:	d106      	bne.n	d5dc6 <_ZN9TCPClient4readEPhj+0x24>
   d5db8:	6803      	ldr	r3, [r0, #0]
   d5dba:	691b      	ldr	r3, [r3, #16]
   d5dbc:	4798      	blx	r3
   d5dbe:	b910      	cbnz	r0, d5dc6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5dc4:	e014      	b.n	d5df0 <_ZN9TCPClient4readEPhj+0x4e>
   d5dc6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5dc8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5dcc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5dd0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5dd2:	42bc      	cmp	r4, r7
   d5dd4:	bf28      	it	cs
   d5dd6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5dd8:	4419      	add	r1, r3
   d5dda:	4622      	mov	r2, r4
   d5ddc:	3104      	adds	r1, #4
   d5dde:	4630      	mov	r0, r6
   d5de0:	f000 fee6 	bl	d6bb0 <memcpy>
   d5de4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5de6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5dea:	4423      	add	r3, r4
   d5dec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5df0:	4620      	mov	r0, r4
   d5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5df4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5df4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5df6:	2300      	movs	r3, #0
   d5df8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5dfc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5dfe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d5e02:	4770      	bx	lr

000d5e04 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e08:	4698      	mov	r8, r3
    stop();
   d5e0a:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e0c:	460d      	mov	r5, r1
   d5e0e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e12:	4606      	mov	r6, r0
   d5e14:	4617      	mov	r7, r2
    stop();
   d5e16:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5e18:	7d2b      	ldrb	r3, [r5, #20]
   d5e1a:	6974      	ldr	r4, [r6, #20]
   d5e1c:	2b04      	cmp	r3, #4
   d5e1e:	bf0c      	ite	eq
   d5e20:	2002      	moveq	r0, #2
   d5e22:	200a      	movne	r0, #10
   d5e24:	2206      	movs	r2, #6
   d5e26:	2101      	movs	r1, #1
   d5e28:	f7ff f8b0 	bl	d4f8c <sock_socket>
   d5e2c:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d5e2e:	6973      	ldr	r3, [r6, #20]
   d5e30:	681c      	ldr	r4, [r3, #0]
   d5e32:	2c00      	cmp	r4, #0
   d5e34:	db5b      	blt.n	d5eee <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d5e36:	4630      	mov	r0, r6
   d5e38:	f7ff ffdc 	bl	d5df4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5e3c:	f1b8 0f00 	cmp.w	r8, #0
   d5e40:	d017      	beq.n	d5e72 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d5e42:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5e44:	a903      	add	r1, sp, #12
   d5e46:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5e4a:	9303      	str	r3, [sp, #12]
   d5e4c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5e50:	f7ff f824 	bl	d4e9c <if_index_to_name>
   d5e54:	2800      	cmp	r0, #0
   d5e56:	db49      	blt.n	d5eec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d5e58:	6970      	ldr	r0, [r6, #20]
   d5e5a:	2306      	movs	r3, #6
   d5e5c:	9300      	str	r3, [sp, #0]
   d5e5e:	f241 020b 	movw	r2, #4107	; 0x100b
   d5e62:	ab03      	add	r3, sp, #12
   d5e64:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5e68:	6800      	ldr	r0, [r0, #0]
   d5e6a:	f7ff f85f 	bl	d4f2c <sock_setsockopt>
   d5e6e:	2800      	cmp	r0, #0
   d5e70:	db3c      	blt.n	d5eec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5e72:	241c      	movs	r4, #28
   d5e74:	4622      	mov	r2, r4
   d5e76:	2100      	movs	r1, #0
   d5e78:	a803      	add	r0, sp, #12
   d5e7a:	f000 fea4 	bl	d6bc6 <memset>
    if (ip.version() == 4) {
   d5e7e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5e80:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5e84:	2b04      	cmp	r3, #4
   d5e86:	d10c      	bne.n	d5ea2 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5e88:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5e8a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5e8c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5e90:	f7ff f81c 	bl	d4ecc <inet_htons>
   d5e94:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5e98:	6868      	ldr	r0, [r5, #4]
   d5e9a:	f7ff f80f 	bl	d4ebc <inet_htonl>
   d5e9e:	9004      	str	r0, [sp, #16]
   d5ea0:	e013      	b.n	d5eca <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5ea2:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5ea4:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5ea6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5eaa:	f7ff f80f 	bl	d4ecc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5eae:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5eb0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5eb4:	1d2b      	adds	r3, r5, #4
   d5eb6:	f105 0714 	add.w	r7, r5, #20
   d5eba:	6818      	ldr	r0, [r3, #0]
   d5ebc:	6859      	ldr	r1, [r3, #4]
   d5ebe:	4622      	mov	r2, r4
   d5ec0:	c203      	stmia	r2!, {r0, r1}
   d5ec2:	3308      	adds	r3, #8
   d5ec4:	42bb      	cmp	r3, r7
   d5ec6:	4614      	mov	r4, r2
   d5ec8:	d1f7      	bne.n	d5eba <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d5eca:	6973      	ldr	r3, [r6, #20]
   d5ecc:	221c      	movs	r2, #28
   d5ece:	a903      	add	r1, sp, #12
   d5ed0:	6818      	ldr	r0, [r3, #0]
   d5ed2:	f7ff f83b 	bl	d4f4c <sock_connect>
   d5ed6:	2800      	cmp	r0, #0
   d5ed8:	db08      	blt.n	d5eec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d5eda:	1d2c      	adds	r4, r5, #4
   d5edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5ede:	6976      	ldr	r6, [r6, #20]
   d5ee0:	368c      	adds	r6, #140	; 0x8c
   d5ee2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5ee4:	6823      	ldr	r3, [r4, #0]
   d5ee6:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d5ee8:	2401      	movs	r4, #1
   d5eea:	e004      	b.n	d5ef6 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d5eec:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5eee:	6833      	ldr	r3, [r6, #0]
   d5ef0:	4630      	mov	r0, r6
   d5ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ef4:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	b00a      	add	sp, #40	; 0x28
   d5efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5efe <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5efe:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5f00:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5f02:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5f04:	6818      	ldr	r0, [r3, #0]
   d5f06:	2800      	cmp	r0, #0
   d5f08:	db01      	blt.n	d5f0e <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5f0a:	f7ff f817 	bl	d4f3c <sock_close>
   d5f0e:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5f14:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f16:	6960      	ldr	r0, [r4, #20]
   d5f18:	2211      	movs	r2, #17
   d5f1a:	2100      	movs	r1, #0
   d5f1c:	308c      	adds	r0, #140	; 0x8c
   d5f1e:	f000 fe52 	bl	d6bc6 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5f22:	4620      	mov	r0, r4
}
   d5f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5f28:	f7ff bf64 	b.w	d5df4 <_ZN9TCPClient12flush_bufferEv>

000d5f2c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5f2c:	b530      	push	{r4, r5, lr}
   d5f2e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5f30:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5f34:	b08b      	sub	sp, #44	; 0x2c
   d5f36:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5f38:	b11b      	cbz	r3, d5f42 <_ZN9TCPClient9availableEv+0x16>
   d5f3a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5f3e:	429a      	cmp	r2, r3
   d5f40:	d040      	beq.n	d5fc4 <_ZN9TCPClient9availableEv+0x98>
   d5f42:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5f44:	6818      	ldr	r0, [r3, #0]
   d5f46:	2800      	cmp	r0, #0
   d5f48:	db3f      	blt.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5f4a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5f4e:	2d7f      	cmp	r5, #127	; 0x7f
   d5f50:	d83b      	bhi.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5f52:	1d19      	adds	r1, r3, #4
   d5f54:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5f58:	2308      	movs	r3, #8
   d5f5a:	4429      	add	r1, r5
   d5f5c:	f7ff f806 	bl	d4f6c <sock_recv>
            if (ret > 0) {
   d5f60:	2800      	cmp	r0, #0
   d5f62:	dd0c      	ble.n	d5f7e <_ZN9TCPClient9availableEv+0x52>
   d5f64:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5f66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f6a:	b90a      	cbnz	r2, d5f70 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5f6c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5f70:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5f72:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5f76:	4418      	add	r0, r3
   d5f78:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5f7c:	e025      	b.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5f7e:	f7ff f961 	bl	d5244 <__errno>
   d5f82:	6803      	ldr	r3, [r0, #0]
   d5f84:	2b0b      	cmp	r3, #11
   d5f86:	d020      	beq.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
   d5f88:	f7ff f95c 	bl	d5244 <__errno>
   d5f8c:	6803      	ldr	r3, [r0, #0]
   d5f8e:	2b0b      	cmp	r3, #11
   d5f90:	d01b      	beq.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5f92:	2320      	movs	r3, #32
   d5f94:	2500      	movs	r5, #0
   d5f96:	9302      	str	r3, [sp, #8]
   d5f98:	9503      	str	r5, [sp, #12]
   d5f9a:	f7ff f953 	bl	d5244 <__errno>
   d5f9e:	6803      	ldr	r3, [r0, #0]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	4b0e      	ldr	r3, [pc, #56]	; (d5fdc <_ZN9TCPClient9availableEv+0xb0>)
   d5fa4:	9300      	str	r3, [sp, #0]
   d5fa6:	aa02      	add	r2, sp, #8
   d5fa8:	462b      	mov	r3, r5
   d5faa:	490d      	ldr	r1, [pc, #52]	; (d5fe0 <_ZN9TCPClient9availableEv+0xb4>)
   d5fac:	2032      	movs	r0, #50	; 0x32
   d5fae:	f7ff f895 	bl	d50dc <log_message>
                    sock_close(d_->sock);
   d5fb2:	6963      	ldr	r3, [r4, #20]
   d5fb4:	6818      	ldr	r0, [r3, #0]
   d5fb6:	f7fe ffc1 	bl	d4f3c <sock_close>
   d5fba:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5fc0:	601a      	str	r2, [r3, #0]
   d5fc2:	e002      	b.n	d5fca <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5fc4:	f7ff ff16 	bl	d5df4 <_ZN9TCPClient12flush_bufferEv>
   d5fc8:	e7bb      	b.n	d5f42 <_ZN9TCPClient9availableEv+0x16>
   d5fca:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5fcc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5fd0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d5fd4:	1a18      	subs	r0, r3, r0
}
   d5fd6:	b00b      	add	sp, #44	; 0x2c
   d5fd8:	bd30      	pop	{r4, r5, pc}
   d5fda:	bf00      	nop
   d5fdc:	000d6f7f 	.word	0x000d6f7f
   d5fe0:	000d6f78 	.word	0x000d6f78

000d5fe4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5fe4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5fe6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5fe8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5fea:	6001      	str	r1, [r0, #0]
   d5fec:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d5ff0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d5ff4:	3088      	adds	r0, #136	; 0x88
   d5ff6:	f7ff f9eb 	bl	d53d0 <_ZN9IPAddressC1Ev>
}
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	bd10      	pop	{r4, pc}
	...

000d6000 <_ZN9TCPClientC1Ei>:
   d6000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6004:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6006:	2300      	movs	r3, #0
   d6008:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d600a:	4a14      	ldr	r2, [pc, #80]	; (d605c <_ZN9TCPClientC1Ei+0x5c>)
   d600c:	6043      	str	r3, [r0, #4]
   d600e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6010:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6012:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6014:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6016:	20a0      	movs	r0, #160	; 0xa0
   d6018:	460e      	mov	r6, r1
   d601a:	f7fe f83c 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d601e:	4605      	mov	r5, r0
   d6020:	b110      	cbz	r0, d6028 <_ZN9TCPClientC1Ei+0x28>
   d6022:	4631      	mov	r1, r6
   d6024:	f7ff ffde 	bl	d5fe4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6028:	2014      	movs	r0, #20
   d602a:	f7fe f834 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d602e:	4603      	mov	r3, r0
   d6030:	b128      	cbz	r0, d603e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6032:	2201      	movs	r2, #1
   d6034:	6042      	str	r2, [r0, #4]
   d6036:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6038:	4a09      	ldr	r2, [pc, #36]	; (d6060 <_ZN9TCPClientC1Ei+0x60>)
   d603a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d603c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d603e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6040:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6042:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6044:	b128      	cbz	r0, d6052 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6046:	6843      	ldr	r3, [r0, #4]
   d6048:	3b01      	subs	r3, #1
   d604a:	6043      	str	r3, [r0, #4]
   d604c:	b90b      	cbnz	r3, d6052 <_ZN9TCPClientC1Ei+0x52>
   d604e:	f7ff fe57 	bl	d5d00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6052:	4620      	mov	r0, r4
   d6054:	f7ff fece 	bl	d5df4 <_ZN9TCPClient12flush_bufferEv>
}
   d6058:	4620      	mov	r0, r4
   d605a:	bd70      	pop	{r4, r5, r6, pc}
   d605c:	000d6f34 	.word	0x000d6f34
   d6060:	000d6f18 	.word	0x000d6f18

000d6064 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6064:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6066:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d606a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d606c:	f7ff ffc8 	bl	d6000 <_ZN9TCPClientC1Ei>
}
   d6070:	4620      	mov	r0, r4
   d6072:	bd10      	pop	{r4, pc}

000d6074 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6074:	b510      	push	{r4, lr}
   d6076:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6078:	6800      	ldr	r0, [r0, #0]
   d607a:	2800      	cmp	r0, #0
   d607c:	db01      	blt.n	d6082 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d607e:	f7fe ff5d 	bl	d4f3c <sock_close>
    }
}
   d6082:	4620      	mov	r0, r4
   d6084:	bd10      	pop	{r4, pc}

000d6086 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6086:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6088:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d608a:	4620      	mov	r0, r4
   d608c:	f7ff fff2 	bl	d6074 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6090:	b124      	cbz	r4, d609c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6092:	4620      	mov	r0, r4
   d6094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6098:	f7fd bfff 	b.w	d409a <_ZdlPv>
   d609c:	bd10      	pop	{r4, pc}

000d609e <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   d609e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60a0:	ac02      	add	r4, sp, #8
    return write(&b, sizeof(b), timeout);
   d60a2:	6803      	ldr	r3, [r0, #0]
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   d60a4:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, sizeof(b), timeout);
   d60a8:	699d      	ldr	r5, [r3, #24]
   d60aa:	4621      	mov	r1, r4
   d60ac:	4613      	mov	r3, r2
   d60ae:	2201      	movs	r2, #1
   d60b0:	47a8      	blx	r5
}
   d60b2:	b003      	add	sp, #12
   d60b4:	bd30      	pop	{r4, r5, pc}

000d60b6 <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   d60b6:	b513      	push	{r0, r1, r4, lr}
   d60b8:	ab02      	add	r3, sp, #8
    return write(&b, 1);
   d60ba:	6802      	ldr	r2, [r0, #0]
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   d60bc:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&b, 1);
   d60c0:	68d4      	ldr	r4, [r2, #12]
   d60c2:	4619      	mov	r1, r3
   d60c4:	2201      	movs	r2, #1
   d60c6:	47a0      	blx	r4
}
   d60c8:	b002      	add	sp, #8
   d60ca:	bd10      	pop	{r4, pc}

000d60cc <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   d60cc:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d60ce:	6803      	ldr	r3, [r0, #0]
   d60d0:	699c      	ldr	r4, [r3, #24]
   d60d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d60d6:	46a4      	mov	ip, r4
}
   d60d8:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPServer::write(uint8_t b) {
    return write(&b, 1);
}

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d60dc:	4760      	bx	ip

000d60de <_ZN9TCPServer5writeEPKhjm>:

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
    return write(&b, sizeof(b), timeout);
}

size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   d60de:	b510      	push	{r4, lr}
   d60e0:	4604      	mov	r4, r0
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d60e2:	2000      	movs	r0, #0
   d60e4:	61a0      	str	r0, [r4, #24]
    _client.clearWriteError();
    size_t ret = _client.write(buf, size, timeout);
   d60e6:	f104 0014 	add.w	r0, r4, #20
   d60ea:	f7ff fdd9 	bl	d5ca0 <_ZN9TCPClient5writeEPKhjm>
   d60ee:	69a3      	ldr	r3, [r4, #24]
   d60f0:	6063      	str	r3, [r4, #4]
    setWriteError(_client.getWriteError());
    return ret;
}
   d60f2:	bd10      	pop	{r4, pc}

000d60f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60f4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60f6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60f8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60fa:	689b      	ldr	r3, [r3, #8]
   d60fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60fe:	68a3      	ldr	r3, [r4, #8]
   d6100:	3b01      	subs	r3, #1
   d6102:	60a3      	str	r3, [r4, #8]
   d6104:	b92b      	cbnz	r3, d6112 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   d6106:	6823      	ldr	r3, [r4, #0]
   d6108:	4620      	mov	r0, r4
   d610a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6110:	4718      	bx	r3
   d6112:	bd10      	pop	{r4, pc}

000d6114 <_ZN15TCPServerClient8remoteIPEv>:
class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
    }

    virtual IPAddress remoteIP() override {
   d6114:	b570      	push	{r4, r5, r6, lr}
        IPAddress addr;
        struct sockaddr_storage saddr = {};
   d6116:	241c      	movs	r4, #28
class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
    }

    virtual IPAddress remoteIP() override {
   d6118:	b094      	sub	sp, #80	; 0x50
   d611a:	460d      	mov	r5, r1
   d611c:	4606      	mov	r6, r0
        IPAddress addr;
   d611e:	f7ff f957 	bl	d53d0 <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   d6122:	4622      	mov	r2, r4
   d6124:	2100      	movs	r1, #0
   d6126:	a80d      	add	r0, sp, #52	; 0x34
   d6128:	f000 fd4d 	bl	d6bc6 <memset>
        socklen_t len = sizeof(saddr);
   d612c:	aa14      	add	r2, sp, #80	; 0x50
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   d612e:	696b      	ldr	r3, [r5, #20]
   d6130:	f842 4d4c 	str.w	r4, [r2, #-76]!
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   d6134:	a90d      	add	r1, sp, #52	; 0x34
   d6136:	6818      	ldr	r0, [r3, #0]
   d6138:	f7fe fef0 	bl	d4f1c <sock_getpeername>
   d613c:	4601      	mov	r1, r0
   d613e:	bb68      	cbnz	r0, d619c <_ZN15TCPServerClient8remoteIPEv+0x88>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6140:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   d6144:	2b02      	cmp	r3, #2
   d6146:	d101      	bne.n	d614c <_ZN15TCPServerClient8remoteIPEv+0x38>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6148:	a90e      	add	r1, sp, #56	; 0x38
   d614a:	e024      	b.n	d6196 <_ZN15TCPServerClient8remoteIPEv+0x82>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d614c:	2b0a      	cmp	r3, #10
   d614e:	d125      	bne.n	d619c <_ZN15TCPServerClient8remoteIPEv+0x88>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6150:	ac02      	add	r4, sp, #8
   d6152:	2211      	movs	r2, #17
   d6154:	4620      	mov	r0, r4
   d6156:	f000 fd36 	bl	d6bc6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d615a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d615c:	b943      	cbnz	r3, d6170 <_ZN15TCPServerClient8remoteIPEv+0x5c>
   d615e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6160:	b933      	cbnz	r3, d6170 <_ZN15TCPServerClient8remoteIPEv+0x5c>
   d6162:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6166:	9d11      	ldr	r5, [sp, #68]	; 0x44
   d6168:	f7fe fea8 	bl	d4ebc <inet_htonl>
   d616c:	4285      	cmp	r5, r0
   d616e:	d011      	beq.n	d6194 <_ZN15TCPServerClient8remoteIPEv+0x80>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6170:	ab0f      	add	r3, sp, #60	; 0x3c
   d6172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6174:	ad08      	add	r5, sp, #32
   d6176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   d617a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d617c:	4621      	mov	r1, r4
   d617e:	a807      	add	r0, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6180:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   d6184:	f7ff f932 	bl	d53ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d618a:	1d34      	adds	r4, r6, #4
   d618c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d618e:	682b      	ldr	r3, [r5, #0]
   d6190:	7023      	strb	r3, [r4, #0]
   d6192:	e003      	b.n	d619c <_ZN15TCPServerClient8remoteIPEv+0x88>
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6194:	a912      	add	r1, sp, #72	; 0x48
   d6196:	4630      	mov	r0, r6
   d6198:	f7ff f95d 	bl	d5456 <_ZN9IPAddressaSEPKh>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, addr, nullptr);
        }
        return addr;
    }
   d619c:	4630      	mov	r0, r6
   d619e:	b014      	add	sp, #80	; 0x50
   d61a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d61a4 <_ZN15TCPServerClientD1Ev>:

using namespace spark;

static TCPClient* s_invalid_client = nullptr;

class TCPServerClient : public TCPClient {
   d61a4:	b510      	push	{r4, lr}
   d61a6:	4b03      	ldr	r3, [pc, #12]	; (d61b4 <_ZN15TCPServerClientD1Ev+0x10>)
   d61a8:	6003      	str	r3, [r0, #0]
   d61aa:	4604      	mov	r4, r0
   d61ac:	f7fe f812 	bl	d41d4 <_ZN9TCPClientD1Ev>
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}
   d61b4:	000d7000 	.word	0x000d7000

000d61b8 <_ZN15TCPServerClientD0Ev>:
   d61b8:	b510      	push	{r4, lr}
   d61ba:	4604      	mov	r4, r0
   d61bc:	f7ff fff2 	bl	d61a4 <_ZN15TCPServerClientD1Ev>
   d61c0:	4620      	mov	r0, r4
   d61c2:	f7fd ff6a 	bl	d409a <_ZdlPv>
   d61c6:	4620      	mov	r0, r4
   d61c8:	bd10      	pop	{r4, pc}
	...

000d61cc <_ZN9TCPServerC1Etm>:
        }
        return addr;
    }
};

TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   d61cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d61ce:	2500      	movs	r5, #0
        : _port(port),
          _nif(nif),
          _sock(-1),
          _client(-1) {
   d61d0:	4b11      	ldr	r3, [pc, #68]	; (d6218 <_ZN9TCPServerC1Etm+0x4c>)
   d61d2:	6003      	str	r3, [r0, #0]
   d61d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d61d8:	60c2      	str	r2, [r0, #12]
   d61da:	6045      	str	r5, [r0, #4]
   d61dc:	8101      	strh	r1, [r0, #8]
   d61de:	6106      	str	r6, [r0, #16]
   d61e0:	4631      	mov	r1, r6
        }
        return addr;
    }
};

TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   d61e2:	4604      	mov	r4, r0
        : _port(port),
          _nif(nif),
          _sock(-1),
          _client(-1) {
   d61e4:	3014      	adds	r0, #20
   d61e6:	f7ff ff0b 	bl	d6000 <_ZN9TCPClientC1Ei>
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d61ea:	4629      	mov	r1, r5
   d61ec:	4628      	mov	r0, r5
   d61ee:	f7fe fd8d 	bl	d4d0c <os_thread_scheduling>
    SINGLE_THREADED_BLOCK() {
        if (!s_invalid_client) {
   d61f2:	4b0a      	ldr	r3, [pc, #40]	; (d621c <_ZN9TCPServerC1Etm+0x50>)
   d61f4:	681a      	ldr	r2, [r3, #0]
   d61f6:	461d      	mov	r5, r3
   d61f8:	b942      	cbnz	r2, d620c <_ZN9TCPServerC1Etm+0x40>
            s_invalid_client = new TCPClient(-1);
   d61fa:	201c      	movs	r0, #28
   d61fc:	f7fd ff4b 	bl	d4096 <_Znwj>
   d6200:	4607      	mov	r7, r0
   d6202:	b110      	cbz	r0, d620a <_ZN9TCPServerC1Etm+0x3e>
   d6204:	4631      	mov	r1, r6
   d6206:	f7ff fefb 	bl	d6000 <_ZN9TCPClientC1Ei>
   d620a:	602f      	str	r7, [r5, #0]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d620c:	2100      	movs	r1, #0
   d620e:	2001      	movs	r0, #1
   d6210:	f7fe fd7c 	bl	d4d0c <os_thread_scheduling>
        }
    }
}
   d6214:	4620      	mov	r0, r4
   d6216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6218:	000d704c 	.word	0x000d704c
   d621c:	2003e5c8 	.word	0x2003e5c8

000d6220 <_ZN9TCPServer4stopEv>:
    done.dismiss();

    return true;
}

void TCPServer::stop() {
   d6220:	b510      	push	{r4, lr}
   d6222:	4604      	mov	r4, r0
    _client.stop();
   d6224:	3014      	adds	r0, #20
   d6226:	f7ff fe6a 	bl	d5efe <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   d622a:	6920      	ldr	r0, [r4, #16]
   d622c:	f7fe fe86 	bl	d4f3c <sock_close>
    _sock = -1;
   d6230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6234:	6123      	str	r3, [r4, #16]
   d6236:	bd10      	pop	{r4, pc}

000d6238 <_ZN9TCPServer5beginEv>:
            s_invalid_client = new TCPClient(-1);
        }
    }
}

bool TCPServer::begin() {
   d6238:	b570      	push	{r4, r5, r6, lr}
   d623a:	4604      	mov	r4, r0
   d623c:	b08c      	sub	sp, #48	; 0x30
    stop();
   d623e:	f7ff ffef 	bl	d6220 <_ZN9TCPServer4stopEv>

    if (socket_handle_valid(_sock)) {
   d6242:	6923      	ldr	r3, [r4, #16]
   d6244:	2b00      	cmp	r3, #0
   d6246:	da5a      	bge.n	d62fe <_ZN9TCPServer5beginEv+0xc6>
    NAMED_SCOPE_GUARD(done, {
        stop();
    });

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6248:	251c      	movs	r5, #28
   d624a:	462a      	mov	r2, r5
   d624c:	2100      	movs	r1, #0
   d624e:	a805      	add	r0, sp, #20
   d6250:	f000 fcb9 	bl	d6bc6 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6254:	f88d 5014 	strb.w	r5, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(_port);
   d6258:	8920      	ldrh	r0, [r4, #8]
    });

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d625a:	250a      	movs	r5, #10
   d625c:	f88d 5015 	strb.w	r5, [sp, #21]
    saddr.sin6_port = htons(_port);
   d6260:	f7fe fe34 	bl	d4ecc <inet_htons>
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   d6264:	2206      	movs	r2, #6

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(_port);
   d6266:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   d626a:	2101      	movs	r1, #1
   d626c:	4628      	mov	r0, r5
   d626e:	f7fe fe8d 	bl	d4f8c <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   d6272:	2800      	cmp	r0, #0
    saddr.sin_port = htons(_port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   d6274:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   d6276:	db30      	blt.n	d62da <_ZN9TCPServer5beginEv+0xa2>

    const int one = 1;
   d6278:	ab0c      	add	r3, sp, #48	; 0x30
   d627a:	2201      	movs	r2, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   d627c:	2604      	movs	r6, #4

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
    CHECK_TRUE(_sock >= 0, false);

    const int one = 1;
   d627e:	f843 2d28 	str.w	r2, [r3, #-40]!
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   d6282:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6286:	9600      	str	r6, [sp, #0]
   d6288:	4632      	mov	r2, r6
   d628a:	f7fe fe4f 	bl	d4f2c <sock_setsockopt>
   d628e:	4605      	mov	r5, r0
   d6290:	bb18      	cbnz	r0, d62da <_ZN9TCPServer5beginEv+0xa2>

    int flags = sock_fcntl(_sock, F_GETFL, 0);
   d6292:	4602      	mov	r2, r0
   d6294:	2103      	movs	r1, #3
   d6296:	6920      	ldr	r0, [r4, #16]
   d6298:	f7fe fe80 	bl	d4f9c <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   d629c:	1e02      	subs	r2, r0, #0
   d629e:	db1c      	blt.n	d62da <_ZN9TCPServer5beginEv+0xa2>
    flags |= O_NONBLOCK;
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   d62a0:	f042 0201 	orr.w	r2, r2, #1
   d62a4:	4631      	mov	r1, r6
   d62a6:	6920      	ldr	r0, [r4, #16]
   d62a8:	f7fe fe78 	bl	d4f9c <sock_fcntl>
   d62ac:	2800      	cmp	r0, #0
   d62ae:	db14      	blt.n	d62da <_ZN9TCPServer5beginEv+0xa2>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
   d62b0:	68e0      	ldr	r0, [r4, #12]
   d62b2:	b1b8      	cbz	r0, d62e4 <_ZN9TCPServer5beginEv+0xac>
        struct ifreq ifr = {};
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   d62b4:	a903      	add	r1, sp, #12
   d62b6:	b2c0      	uxtb	r0, r0
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
        struct ifreq ifr = {};
   d62b8:	9503      	str	r5, [sp, #12]
   d62ba:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   d62be:	f7fe fded 	bl	d4e9c <if_index_to_name>
   d62c2:	b950      	cbnz	r0, d62da <_ZN9TCPServer5beginEv+0xa2>
            return false;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d62c4:	2306      	movs	r3, #6
   d62c6:	9300      	str	r3, [sp, #0]
   d62c8:	f241 020b 	movw	r2, #4107	; 0x100b
   d62cc:	ab03      	add	r3, sp, #12
   d62ce:	f640 71ff 	movw	r1, #4095	; 0xfff
   d62d2:	6920      	ldr	r0, [r4, #16]
   d62d4:	f7fe fe2a 	bl	d4f2c <sock_setsockopt>
   d62d8:	b120      	cbz	r0, d62e4 <_ZN9TCPServer5beginEv+0xac>

    if (socket_handle_valid(_sock)) {
        return true;
    }

    NAMED_SCOPE_GUARD(done, {
   d62da:	4620      	mov	r0, r4
#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (_nif != 0) {
        struct ifreq ifr = {};
        if (if_index_to_name(_nif, ifr.ifr_name)) {
            return false;
   d62dc:	2500      	movs	r5, #0

    if (socket_handle_valid(_sock)) {
        return true;
    }

    NAMED_SCOPE_GUARD(done, {
   d62de:	f7ff ff9f 	bl	d6220 <_ZN9TCPServer4stopEv>
   d62e2:	e00d      	b.n	d6300 <_ZN9TCPServer5beginEv+0xc8>
            return false;
        }
    }
#endif // HAL_PLATFORM_IFAPI

    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   d62e4:	221c      	movs	r2, #28
   d62e6:	a905      	add	r1, sp, #20
   d62e8:	6920      	ldr	r0, [r4, #16]
   d62ea:	f7fe fe0f 	bl	d4f0c <sock_bind>
    CHECK_TRUE(!r, false);
   d62ee:	2800      	cmp	r0, #0
   d62f0:	d1f3      	bne.n	d62da <_ZN9TCPServer5beginEv+0xa2>

    r = sock_listen(_sock, 5);
   d62f2:	2105      	movs	r1, #5
   d62f4:	6920      	ldr	r0, [r4, #16]
   d62f6:	f7fe fe31 	bl	d4f5c <sock_listen>
    CHECK_TRUE(!r, false);
   d62fa:	2800      	cmp	r0, #0
   d62fc:	d1ed      	bne.n	d62da <_ZN9TCPServer5beginEv+0xa2>

bool TCPServer::begin() {
    stop();

    if (socket_handle_valid(_sock)) {
        return true;
   d62fe:	2501      	movs	r5, #1
    CHECK_TRUE(!r, false);

    done.dismiss();

    return true;
}
   d6300:	4628      	mov	r0, r5
   d6302:	b00c      	add	sp, #48	; 0x30
   d6304:	bd70      	pop	{r4, r5, r6, pc}

000d6306 <_ZN9TCPClientaSERKS_>:

#define TCPCLIENT_BUF_MAX_SIZE  128
/* 30 seconds */
#define SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT (30000)

class TCPClient : public Client {
   d6306:	b538      	push	{r3, r4, r5, lr}
   d6308:	684b      	ldr	r3, [r1, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d630a:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d630c:	688b      	ldr	r3, [r1, #8]
   d630e:	6083      	str	r3, [r0, #8]
   d6310:	68cb      	ldr	r3, [r1, #12]
   d6312:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6314:	690b      	ldr	r3, [r1, #16]
   d6316:	6103      	str	r3, [r0, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6318:	694b      	ldr	r3, [r1, #20]
   d631a:	6143      	str	r3, [r0, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d631c:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   d631e:	6983      	ldr	r3, [r0, #24]
   d6320:	429d      	cmp	r5, r3
   d6322:	4604      	mov	r4, r0
   d6324:	d00c      	beq.n	d6340 <_ZN9TCPClientaSERKS_+0x3a>
	  {
	    if (__tmp != 0)
   d6326:	b115      	cbz	r5, d632e <_ZN9TCPClientaSERKS_+0x28>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6328:	686b      	ldr	r3, [r5, #4]
   d632a:	3301      	adds	r3, #1
   d632c:	606b      	str	r3, [r5, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d632e:	69a0      	ldr	r0, [r4, #24]
   d6330:	b128      	cbz	r0, d633e <_ZN9TCPClientaSERKS_+0x38>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6332:	6843      	ldr	r3, [r0, #4]
   d6334:	3b01      	subs	r3, #1
   d6336:	6043      	str	r3, [r0, #4]
   d6338:	b90b      	cbnz	r3, d633e <_ZN9TCPClientaSERKS_+0x38>
   d633a:	f7ff fedb 	bl	d60f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d633e:	61a5      	str	r5, [r4, #24]
   d6340:	4620      	mov	r0, r4
   d6342:	bd38      	pop	{r3, r4, r5, pc}

000d6344 <_ZN9TCPClientC1ERKS_>:
   d6344:	4b0c      	ldr	r3, [pc, #48]	; (d6378 <_ZN9TCPClientC1ERKS_+0x34>)
   d6346:	6003      	str	r3, [r0, #0]
   d6348:	684b      	ldr	r3, [r1, #4]
   d634a:	6043      	str	r3, [r0, #4]
   d634c:	4b0b      	ldr	r3, [pc, #44]	; (d637c <_ZN9TCPClientC1ERKS_+0x38>)
   d634e:	6003      	str	r3, [r0, #0]
   d6350:	688b      	ldr	r3, [r1, #8]
   d6352:	6083      	str	r3, [r0, #8]
   d6354:	68cb      	ldr	r3, [r1, #12]
   d6356:	60c3      	str	r3, [r0, #12]
   d6358:	4b09      	ldr	r3, [pc, #36]	; (d6380 <_ZN9TCPClientC1ERKS_+0x3c>)
   d635a:	6003      	str	r3, [r0, #0]
   d635c:	690b      	ldr	r3, [r1, #16]
   d635e:	6103      	str	r3, [r0, #16]
   d6360:	4b08      	ldr	r3, [pc, #32]	; (d6384 <_ZN9TCPClientC1ERKS_+0x40>)
   d6362:	6003      	str	r3, [r0, #0]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6364:	694b      	ldr	r3, [r1, #20]
   d6366:	6143      	str	r3, [r0, #20]
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6368:	698b      	ldr	r3, [r1, #24]
   d636a:	6183      	str	r3, [r0, #24]
      {
	if (_M_pi != 0)
   d636c:	b113      	cbz	r3, d6374 <_ZN9TCPClientC1ERKS_+0x30>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d636e:	685a      	ldr	r2, [r3, #4]
   d6370:	3201      	adds	r2, #1
   d6372:	605a      	str	r2, [r3, #4]
   d6374:	4770      	bx	lr
   d6376:	bf00      	nop
   d6378:	000d6ef0 	.word	0x000d6ef0
   d637c:	000d6f98 	.word	0x000d6f98
   d6380:	000d6fc0 	.word	0x000d6fc0
   d6384:	000d6f34 	.word	0x000d6f34

000d6388 <_ZN9TCPServer9availableEv>:
    _client.stop();
    sock_close(_sock);
    _sock = -1;
}

TCPClient TCPServer::available() {
   d6388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   d638c:	690b      	ldr	r3, [r1, #16]
   d638e:	2b00      	cmp	r3, #0
    _client.stop();
    sock_close(_sock);
    _sock = -1;
}

TCPClient TCPServer::available() {
   d6390:	b096      	sub	sp, #88	; 0x58
   d6392:	4607      	mov	r7, r0
   d6394:	460c      	mov	r4, r1
    if (_sock < 0) {
   d6396:	da03      	bge.n	d63a0 <_ZN9TCPServer9availableEv+0x18>
        begin();
   d6398:	680b      	ldr	r3, [r1, #0]
   d639a:	4608      	mov	r0, r1
   d639c:	691b      	ldr	r3, [r3, #16]
   d639e:	4798      	blx	r3
    }

    if (_sock < 0) {
   d63a0:	6925      	ldr	r5, [r4, #16]
   d63a2:	2d00      	cmp	r5, #0
   d63a4:	f104 0614 	add.w	r6, r4, #20
   d63a8:	da05      	bge.n	d63b6 <_ZN9TCPServer9availableEv+0x2e>
        _client = *s_invalid_client;
   d63aa:	4b24      	ldr	r3, [pc, #144]	; (d643c <_ZN9TCPServer9availableEv+0xb4>)
   d63ac:	4630      	mov	r0, r6
   d63ae:	6819      	ldr	r1, [r3, #0]
   d63b0:	f7ff ffa9 	bl	d6306 <_ZN9TCPClientaSERKS_>
   d63b4:	e036      	b.n	d6424 <_ZN9TCPServer9availableEv+0x9c>
        return _client;
    }

    struct sockaddr_storage saddr = {};
   d63b6:	f04f 081c 	mov.w	r8, #28
   d63ba:	4642      	mov	r2, r8
   d63bc:	2100      	movs	r1, #0
   d63be:	a808      	add	r0, sp, #32
   d63c0:	f000 fc01 	bl	d6bc6 <memset>
    socklen_t slen = sizeof(saddr);
   d63c4:	aa16      	add	r2, sp, #88	; 0x58
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   d63c6:	a908      	add	r1, sp, #32
        _client = *s_invalid_client;
        return _client;
    }

    struct sockaddr_storage saddr = {};
    socklen_t slen = sizeof(saddr);
   d63c8:	f842 8d54 	str.w	r8, [r2, #-84]!
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   d63cc:	4628      	mov	r0, r5
   d63ce:	f7fe fd95 	bl	d4efc <sock_accept>
    if (s < 0) {
   d63d2:	1e01      	subs	r1, r0, #0
   d63d4:	da0f      	bge.n	d63f6 <_ZN9TCPServer9availableEv+0x6e>
        _client = *s_invalid_client;
   d63d6:	4b19      	ldr	r3, [pc, #100]	; (d643c <_ZN9TCPServer9availableEv+0xb4>)
   d63d8:	4630      	mov	r0, r6
   d63da:	6819      	ldr	r1, [r3, #0]
   d63dc:	f7ff ff93 	bl	d6306 <_ZN9TCPClientaSERKS_>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d63e0:	f7fe ff30 	bl	d5244 <__errno>
   d63e4:	6803      	ldr	r3, [r0, #0]
   d63e6:	2b0b      	cmp	r3, #11
   d63e8:	d01c      	beq.n	d6424 <_ZN9TCPServer9availableEv+0x9c>
   d63ea:	f7fe ff2b 	bl	d5244 <__errno>
   d63ee:	6803      	ldr	r3, [r0, #0]
   d63f0:	2b0b      	cmp	r3, #11
   d63f2:	d11f      	bne.n	d6434 <_ZN9TCPServer9availableEv+0xac>
   d63f4:	e016      	b.n	d6424 <_ZN9TCPServer9availableEv+0x9c>

static TCPClient* s_invalid_client = nullptr;

class TCPServerClient : public TCPClient {
public:
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   d63f6:	a80f      	add	r0, sp, #60	; 0x3c
   d63f8:	f7ff fe02 	bl	d6000 <_ZN9TCPClientC1Ei>
   d63fc:	ad03      	add	r5, sp, #12
   d63fe:	4b10      	ldr	r3, [pc, #64]	; (d6440 <_ZN9TCPServer9availableEv+0xb8>)
   d6400:	930f      	str	r3, [sp, #60]	; 0x3c
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
        }
    } else {
        TCPServerClient client = TCPServerClient(s);
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   d6402:	a90f      	add	r1, sp, #60	; 0x3c
   d6404:	a802      	add	r0, sp, #8
   d6406:	9c14      	ldr	r4, [sp, #80]	; 0x50
   d6408:	f7ff fe84 	bl	d6114 <_ZN15TCPServerClient8remoteIPEv>
   d640c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d640e:	348c      	adds	r4, #140	; 0x8c
   d6410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6412:	682b      	ldr	r3, [r5, #0]
   d6414:	7023      	strb	r3, [r4, #0]
        _client = client;
   d6416:	a90f      	add	r1, sp, #60	; 0x3c
   d6418:	4630      	mov	r0, r6
   d641a:	f7ff ff74 	bl	d6306 <_ZN9TCPClientaSERKS_>
        _client = *s_invalid_client;
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
        }
    } else {
        TCPServerClient client = TCPServerClient(s);
   d641e:	a80f      	add	r0, sp, #60	; 0x3c
   d6420:	f7ff fec0 	bl	d61a4 <_ZN15TCPServerClientD1Ev>
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
        _client = client;
    }

    return _client;
   d6424:	4631      	mov	r1, r6
   d6426:	4638      	mov	r0, r7
   d6428:	f7ff ff8c 	bl	d6344 <_ZN9TCPClientC1ERKS_>
}
   d642c:	4638      	mov	r0, r7
   d642e:	b016      	add	sp, #88	; 0x58
   d6430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    socklen_t slen = sizeof(saddr);
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
    if (s < 0) {
        _client = *s_invalid_client;
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
            stop();
   d6434:	4620      	mov	r0, r4
   d6436:	f7ff fef3 	bl	d6220 <_ZN9TCPServer4stopEv>
   d643a:	e7f3      	b.n	d6424 <_ZN9TCPServer9availableEv+0x9c>
   d643c:	2003e5c8 	.word	0x2003e5c8
   d6440:	000d7000 	.word	0x000d7000

000d6444 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6444:	4b02      	ldr	r3, [pc, #8]	; (d6450 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	4b02      	ldr	r3, [pc, #8]	; (d6454 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d644a:	601a      	str	r2, [r3, #0]
   d644c:	4770      	bx	lr
   d644e:	bf00      	nop
   d6450:	2003e2c0 	.word	0x2003e2c0
   d6454:	2003e5cc 	.word	0x2003e5cc

000d6458 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6458:	4770      	bx	lr

000d645a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d645a:	7441      	strb	r1, [r0, #17]
   d645c:	4770      	bx	lr

000d645e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d645e:	7c00      	ldrb	r0, [r0, #16]
   d6460:	f7fe bdec 	b.w	d503c <HAL_USART_Available_Data_For_Write>

000d6464 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6464:	7c00      	ldrb	r0, [r0, #16]
   d6466:	f7fe bdc1 	b.w	d4fec <HAL_USART_Available_Data>

000d646a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d646a:	7c00      	ldrb	r0, [r0, #16]
   d646c:	f7fe bdce 	b.w	d500c <HAL_USART_Peek_Data>

000d6470 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6470:	7c00      	ldrb	r0, [r0, #16]
   d6472:	f7fe bdc3 	b.w	d4ffc <HAL_USART_Read_Data>

000d6476 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6476:	7c00      	ldrb	r0, [r0, #16]
   d6478:	f7fe bdd0 	b.w	d501c <HAL_USART_Flush_Data>

000d647c <_ZN11USARTSerialD0Ev>:
   d647c:	b510      	push	{r4, lr}
   d647e:	4604      	mov	r4, r0
   d6480:	f7fd fe0b 	bl	d409a <_ZdlPv>
   d6484:	4620      	mov	r0, r4
   d6486:	bd10      	pop	{r4, pc}

000d6488 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6488:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d648a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d648c:	4604      	mov	r4, r0
   d648e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6490:	b925      	cbnz	r5, d649c <_ZN11USARTSerial5writeEh+0x14>
   d6492:	7c00      	ldrb	r0, [r0, #16]
   d6494:	f7fe fdd2 	bl	d503c <HAL_USART_Available_Data_For_Write>
   d6498:	2800      	cmp	r0, #0
   d649a:	dd05      	ble.n	d64a8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d649c:	4631      	mov	r1, r6
   d649e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d64a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d64a4:	f7fe bd9a 	b.w	d4fdc <HAL_USART_Write_Data>
  }
  return 0;
}
   d64a8:	4628      	mov	r0, r5
   d64aa:	bd70      	pop	{r4, r5, r6, pc}

000d64ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d64ac:	b510      	push	{r4, lr}
   d64ae:	4604      	mov	r4, r0
   d64b0:	4608      	mov	r0, r1
   d64b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64b4:	2200      	movs	r2, #0
   d64b6:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d64b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64bc:	60a2      	str	r2, [r4, #8]
   d64be:	4a05      	ldr	r2, [pc, #20]	; (d64d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d64c0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d64c2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d64c4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d64c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d64c8:	461a      	mov	r2, r3
   d64ca:	f7fe fd7f 	bl	d4fcc <HAL_USART_Init>
}
   d64ce:	4620      	mov	r0, r4
   d64d0:	bd10      	pop	{r4, pc}
   d64d2:	bf00      	nop
   d64d4:	000d709c 	.word	0x000d709c

000d64d8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d64d8:	7c00      	ldrb	r0, [r0, #16]
   d64da:	f7fe bda7 	b.w	d502c <HAL_USART_Is_Enabled>
	...

000d64e0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d64e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d64e2:	4d0c      	ldr	r5, [pc, #48]	; (d6514 <_Z22__fetch_global_Serial1v+0x34>)
   d64e4:	6829      	ldr	r1, [r5, #0]
   d64e6:	f011 0401 	ands.w	r4, r1, #1
   d64ea:	d111      	bne.n	d6510 <_Z22__fetch_global_Serial1v+0x30>
   d64ec:	4628      	mov	r0, r5
   d64ee:	f7fd fde3 	bl	d40b8 <__cxa_guard_acquire>
   d64f2:	b168      	cbz	r0, d6510 <_Z22__fetch_global_Serial1v+0x30>
   d64f4:	4a08      	ldr	r2, [pc, #32]	; (d6518 <_Z22__fetch_global_Serial1v+0x38>)
   d64f6:	4b09      	ldr	r3, [pc, #36]	; (d651c <_Z22__fetch_global_Serial1v+0x3c>)
   d64f8:	4809      	ldr	r0, [pc, #36]	; (d6520 <_Z22__fetch_global_Serial1v+0x40>)
   d64fa:	4621      	mov	r1, r4
   d64fc:	f7ff ffd6 	bl	d64ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6500:	4628      	mov	r0, r5
   d6502:	f7fd fdde 	bl	d40c2 <__cxa_guard_release>
   d6506:	4a07      	ldr	r2, [pc, #28]	; (d6524 <_Z22__fetch_global_Serial1v+0x44>)
   d6508:	4907      	ldr	r1, [pc, #28]	; (d6528 <_Z22__fetch_global_Serial1v+0x48>)
   d650a:	4805      	ldr	r0, [pc, #20]	; (d6520 <_Z22__fetch_global_Serial1v+0x40>)
   d650c:	f000 f9f4 	bl	d68f8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6510:	4803      	ldr	r0, [pc, #12]	; (d6520 <_Z22__fetch_global_Serial1v+0x40>)
   d6512:	bd38      	pop	{r3, r4, r5, pc}
   d6514:	2003e668 	.word	0x2003e668
   d6518:	2003e66c 	.word	0x2003e66c
   d651c:	2003e5e4 	.word	0x2003e5e4
   d6520:	2003e5d0 	.word	0x2003e5d0
   d6524:	2003e328 	.word	0x2003e328
   d6528:	000d6459 	.word	0x000d6459

000d652c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d652c:	7441      	strb	r1, [r0, #17]
   d652e:	4770      	bx	lr

000d6530 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6530:	4770      	bx	lr

000d6532 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6532:	2100      	movs	r1, #0
   d6534:	7c00      	ldrb	r0, [r0, #16]
   d6536:	f7fe bda9 	b.w	d508c <HAL_USB_USART_Receive_Data>

000d653a <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d653a:	2101      	movs	r1, #1
   d653c:	7c00      	ldrb	r0, [r0, #16]
   d653e:	f7fe bda5 	b.w	d508c <HAL_USB_USART_Receive_Data>

000d6542 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d6542:	7c00      	ldrb	r0, [r0, #16]
   d6544:	f7fe bd9a 	b.w	d507c <HAL_USB_USART_Available_Data_For_Write>

000d6548 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d6548:	7c00      	ldrb	r0, [r0, #16]
   d654a:	f7fe bd8f 	b.w	d506c <HAL_USB_USART_Available_Data>

000d654e <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d654e:	b538      	push	{r3, r4, r5, lr}
   d6550:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6552:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6554:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6556:	f7fe fd91 	bl	d507c <HAL_USB_USART_Available_Data_For_Write>
   d655a:	2800      	cmp	r0, #0
   d655c:	dc01      	bgt.n	d6562 <_ZN9USBSerial5writeEh+0x14>
   d655e:	7c60      	ldrb	r0, [r4, #17]
   d6560:	b120      	cbz	r0, d656c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6562:	4629      	mov	r1, r5
   d6564:	7c20      	ldrb	r0, [r4, #16]
   d6566:	f7fe fd99 	bl	d509c <HAL_USB_USART_Send_Data>
    return 1;
   d656a:	2001      	movs	r0, #1
  }
  return 0;
}
   d656c:	bd38      	pop	{r3, r4, r5, pc}

000d656e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d656e:	7c00      	ldrb	r0, [r0, #16]
   d6570:	f7fe bd9c 	b.w	d50ac <HAL_USB_USART_Flush_Data>

000d6574 <_ZN9USBSerialD0Ev>:
   d6574:	b510      	push	{r4, lr}
   d6576:	4604      	mov	r4, r0
   d6578:	f7fd fd8f 	bl	d409a <_ZdlPv>
   d657c:	4620      	mov	r0, r4
   d657e:	bd10      	pop	{r4, pc}

000d6580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6580:	b510      	push	{r4, lr}
   d6582:	4604      	mov	r4, r0
   d6584:	2300      	movs	r3, #0
   d6586:	6063      	str	r3, [r4, #4]
   d6588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d658c:	60a3      	str	r3, [r4, #8]
   d658e:	4b05      	ldr	r3, [pc, #20]	; (d65a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6590:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6592:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6594:	4608      	mov	r0, r1
{
  _serial = serial;
   d6596:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6598:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d659a:	4611      	mov	r1, r2
   d659c:	f7fe fd56 	bl	d504c <HAL_USB_USART_Init>
}
   d65a0:	4620      	mov	r0, r4
   d65a2:	bd10      	pop	{r4, pc}
   d65a4:	000d70cc 	.word	0x000d70cc

000d65a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d65a8:	2200      	movs	r2, #0
   d65aa:	7c00      	ldrb	r0, [r0, #16]
   d65ac:	f7fe bd56 	b.w	d505c <HAL_USB_USART_Begin>

000d65b0 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d65b0:	7c00      	ldrb	r0, [r0, #16]
   d65b2:	f7fe bd83 	b.w	d50bc <HAL_USB_USART_Is_Connected>

000d65b6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65b6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d65b8:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d65bc:	2100      	movs	r1, #0
   d65be:	f000 fb02 	bl	d6bc6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d65c2:	4620      	mov	r0, r4
   d65c4:	bd10      	pop	{r4, pc}
	...

000d65c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d65c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65ca:	4d0e      	ldr	r5, [pc, #56]	; (d6604 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d65cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d65ce:	a801      	add	r0, sp, #4
   d65d0:	f7ff fff1 	bl	d65b6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d65d4:	6829      	ldr	r1, [r5, #0]
   d65d6:	f011 0401 	ands.w	r4, r1, #1
   d65da:	d110      	bne.n	d65fe <_Z16_fetch_usbserialv+0x36>
   d65dc:	4628      	mov	r0, r5
   d65de:	f7fd fd6b 	bl	d40b8 <__cxa_guard_acquire>
   d65e2:	b160      	cbz	r0, d65fe <_Z16_fetch_usbserialv+0x36>
   d65e4:	aa01      	add	r2, sp, #4
   d65e6:	4621      	mov	r1, r4
   d65e8:	4807      	ldr	r0, [pc, #28]	; (d6608 <_Z16_fetch_usbserialv+0x40>)
   d65ea:	f7ff ffc9 	bl	d6580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d65ee:	4628      	mov	r0, r5
   d65f0:	f7fd fd67 	bl	d40c2 <__cxa_guard_release>
   d65f4:	4a05      	ldr	r2, [pc, #20]	; (d660c <_Z16_fetch_usbserialv+0x44>)
   d65f6:	4906      	ldr	r1, [pc, #24]	; (d6610 <_Z16_fetch_usbserialv+0x48>)
   d65f8:	4803      	ldr	r0, [pc, #12]	; (d6608 <_Z16_fetch_usbserialv+0x40>)
   d65fa:	f000 f97d 	bl	d68f8 <__aeabi_atexit>
	return _usbserial;
}
   d65fe:	4802      	ldr	r0, [pc, #8]	; (d6608 <_Z16_fetch_usbserialv+0x40>)
   d6600:	b007      	add	sp, #28
   d6602:	bd30      	pop	{r4, r5, pc}
   d6604:	2003e6f0 	.word	0x2003e6f0
   d6608:	2003e6f4 	.word	0x2003e6f4
   d660c:	2003e328 	.word	0x2003e328
   d6610:	000d6531 	.word	0x000d6531

000d6614 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6614:	2200      	movs	r2, #0
   d6616:	4611      	mov	r1, r2
   d6618:	6840      	ldr	r0, [r0, #4]
   d661a:	f7fe bdbb 	b.w	d5194 <network_ready>

000d661e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d661e:	2200      	movs	r2, #0
   d6620:	4611      	mov	r1, r2
   d6622:	6840      	ldr	r0, [r0, #4]
   d6624:	f7fe bdd6 	b.w	d51d4 <network_listening>

000d6628 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6628:	2200      	movs	r2, #0
   d662a:	4611      	mov	r1, r2
   d662c:	6840      	ldr	r0, [r0, #4]
   d662e:	f7fe bde1 	b.w	d51f4 <network_get_listen_timeout>

000d6632 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6632:	2200      	movs	r2, #0
   d6634:	6840      	ldr	r0, [r0, #4]
   d6636:	f7fe bdd5 	b.w	d51e4 <network_set_listen_timeout>

000d663a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d663a:	2200      	movs	r2, #0
   d663c:	f081 0101 	eor.w	r1, r1, #1
   d6640:	6840      	ldr	r0, [r0, #4]
   d6642:	f7fe bdbf 	b.w	d51c4 <network_listen>

000d6646 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6646:	2300      	movs	r3, #0
   d6648:	461a      	mov	r2, r3
   d664a:	4619      	mov	r1, r3
   d664c:	6840      	ldr	r0, [r0, #4]
   d664e:	f7fe bdb1 	b.w	d51b4 <network_off>

000d6652 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6652:	2300      	movs	r3, #0
   d6654:	461a      	mov	r2, r3
   d6656:	4619      	mov	r1, r3
   d6658:	6840      	ldr	r0, [r0, #4]
   d665a:	f7fe bda3 	b.w	d51a4 <network_on>

000d665e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d665e:	2200      	movs	r2, #0
   d6660:	4611      	mov	r1, r2
   d6662:	6840      	ldr	r0, [r0, #4]
   d6664:	f7fe bd86 	b.w	d5174 <network_connecting>

000d6668 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6668:	2200      	movs	r2, #0
   d666a:	2102      	movs	r1, #2
   d666c:	6840      	ldr	r0, [r0, #4]
   d666e:	f7fe bd89 	b.w	d5184 <network_disconnect>

000d6672 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6672:	2300      	movs	r3, #0
   d6674:	461a      	mov	r2, r3
   d6676:	6840      	ldr	r0, [r0, #4]
   d6678:	f7fe bd74 	b.w	d5164 <network_connect>

000d667c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d667c:	4b02      	ldr	r3, [pc, #8]	; (d6688 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d667e:	2204      	movs	r2, #4
   d6680:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6682:	4a02      	ldr	r2, [pc, #8]	; (d668c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6684:	601a      	str	r2, [r3, #0]
   d6686:	4770      	bx	lr
   d6688:	2003e708 	.word	0x2003e708
   d668c:	000d70fc 	.word	0x000d70fc

000d6690 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6690:	b510      	push	{r4, lr}
   d6692:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6694:	f000 fb14 	bl	d6cc0 <strlen>
   d6698:	3801      	subs	r0, #1
   d669a:	1823      	adds	r3, r4, r0
   d669c:	4620      	mov	r0, r4
	while(i<j){
   d669e:	4298      	cmp	r0, r3
   d66a0:	d206      	bcs.n	d66b0 <_Z11str_reversePc+0x20>
		c = *i;
   d66a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d66a4:	7819      	ldrb	r1, [r3, #0]
   d66a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d66aa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d66ae:	e7f6      	b.n	d669e <_Z11str_reversePc+0xe>
   d66b0:	bd10      	pop	{r4, pc}

000d66b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66b2:	b570      	push	{r4, r5, r6, lr}
   d66b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d66b6:	1e91      	subs	r1, r2, #2
   d66b8:	2922      	cmp	r1, #34	; 0x22
   d66ba:	d820      	bhi.n	d66fe <ultoa+0x4c>
   d66bc:	4625      	mov	r5, r4
   d66be:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d66c0:	b910      	cbnz	r0, d66c8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d66c2:	4423      	add	r3, r4
            *ptr++ = '0';
   d66c4:	2230      	movs	r2, #48	; 0x30
   d66c6:	e00e      	b.n	d66e6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d66c8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d66cc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d66d0:	b2c1      	uxtb	r1, r0
   d66d2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d66d6:	2809      	cmp	r0, #9
                *ptr += '0';
   d66d8:	bf94      	ite	ls
   d66da:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d66dc:	3157      	addhi	r1, #87	; 0x57
   d66de:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d66e2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d66e4:	e7eb      	b.n	d66be <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d66e6:	4299      	cmp	r1, r3
   d66e8:	d202      	bcs.n	d66f0 <ultoa+0x3e>
            *ptr++ = '0';
   d66ea:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d66ee:	e7fa      	b.n	d66e6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d66f0:	2300      	movs	r3, #0
	str_reverse(buffer);
   d66f2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d66f4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d66f6:	f7ff ffcb 	bl	d6690 <_Z11str_reversePc>
	return buffer;
   d66fa:	4620      	mov	r0, r4
   d66fc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d66fe:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6700:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6704 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6704:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6706:	4b0c      	ldr	r3, [pc, #48]	; (d6738 <serialEventRun+0x34>)
   d6708:	b133      	cbz	r3, d6718 <serialEventRun+0x14>
   d670a:	f7ff ff5d 	bl	d65c8 <_Z16_fetch_usbserialv>
   d670e:	6803      	ldr	r3, [r0, #0]
   d6710:	691b      	ldr	r3, [r3, #16]
   d6712:	4798      	blx	r3
   d6714:	2800      	cmp	r0, #0
   d6716:	dc09      	bgt.n	d672c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6718:	4b08      	ldr	r3, [pc, #32]	; (d673c <serialEventRun+0x38>)
   d671a:	b163      	cbz	r3, d6736 <serialEventRun+0x32>
   d671c:	f7ff fee0 	bl	d64e0 <_Z22__fetch_global_Serial1v>
   d6720:	6803      	ldr	r3, [r0, #0]
   d6722:	691b      	ldr	r3, [r3, #16]
   d6724:	4798      	blx	r3
   d6726:	2800      	cmp	r0, #0
   d6728:	dc03      	bgt.n	d6732 <serialEventRun+0x2e>
   d672a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d672c:	f3af 8000 	nop.w
   d6730:	e7f2      	b.n	d6718 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6732:	f3af 8000 	nop.w
   d6736:	bd08      	pop	{r3, pc}
	...

000d6740 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6740:	b508      	push	{r3, lr}
	serialEventRun();
   d6742:	f7ff ffdf 	bl	d6704 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6746:	f7fe fb41 	bl	d4dcc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d674a:	4b01      	ldr	r3, [pc, #4]	; (d6750 <_post_loop+0x10>)
   d674c:	6018      	str	r0, [r3, #0]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	2003e714 	.word	0x2003e714

000d6754 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6754:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6756:	2300      	movs	r3, #0
   d6758:	9300      	str	r3, [sp, #0]
   d675a:	461a      	mov	r2, r3
   d675c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6760:	f7fe fcde 	bl	d5120 <system_ctrl_set_result>
}
   d6764:	b003      	add	sp, #12
   d6766:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d676c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d676c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d676e:	8843      	ldrh	r3, [r0, #2]
   d6770:	2b0a      	cmp	r3, #10
   d6772:	d008      	beq.n	d6786 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6774:	2b50      	cmp	r3, #80	; 0x50
   d6776:	d109      	bne.n	d678c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6778:	4b09      	ldr	r3, [pc, #36]	; (d67a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d677a:	681b      	ldr	r3, [r3, #0]
   d677c:	b13b      	cbz	r3, d678e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d677e:	b003      	add	sp, #12
   d6780:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6784:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6786:	f7ff ffe5 	bl	d6754 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d678a:	e006      	b.n	d679a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d678c:	2300      	movs	r3, #0
   d678e:	9300      	str	r3, [sp, #0]
   d6790:	461a      	mov	r2, r3
   d6792:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6796:	f7fe fcc3 	bl	d5120 <system_ctrl_set_result>
        break;
    }
}
   d679a:	b003      	add	sp, #12
   d679c:	f85d fb04 	ldr.w	pc, [sp], #4
   d67a0:	2003e710 	.word	0x2003e710

000d67a4 <module_user_init_hook>:

void module_user_init_hook()
{
   d67a4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d67a6:	f7fe faf9 	bl	d4d9c <HAL_RNG_GetRandomNumber>
   d67aa:	4604      	mov	r4, r0
    srand(seed);
   d67ac:	f000 fa14 	bl	d6bd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d67b0:	4b07      	ldr	r3, [pc, #28]	; (d67d0 <module_user_init_hook+0x2c>)
   d67b2:	b113      	cbz	r3, d67ba <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d67b4:	4620      	mov	r0, r4
   d67b6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d67ba:	2100      	movs	r1, #0
   d67bc:	4804      	ldr	r0, [pc, #16]	; (d67d0 <module_user_init_hook+0x2c>)
   d67be:	f7fe fcc1 	bl	d5144 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67c2:	2100      	movs	r1, #0
   d67c4:	4803      	ldr	r0, [pc, #12]	; (d67d4 <module_user_init_hook+0x30>)
}
   d67c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d67ca:	f7fe bc9f 	b.w	d510c <system_ctrl_set_app_request_handler>
   d67ce:	bf00      	nop
   d67d0:	00000000 	.word	0x00000000
   d67d4:	000d676d 	.word	0x000d676d

000d67d8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d67d8:	b510      	push	{r4, lr}
   d67da:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d67dc:	480f      	ldr	r0, [pc, #60]	; (d681c <pinAvailable+0x44>)
   d67de:	f7ff f857 	bl	d5890 <_ZN8SPIClass9isEnabledEv>
   d67e2:	b128      	cbz	r0, d67f0 <pinAvailable+0x18>
   d67e4:	f1a4 030b 	sub.w	r3, r4, #11
   d67e8:	2b02      	cmp	r3, #2
   d67ea:	d801      	bhi.n	d67f0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d67ec:	2000      	movs	r0, #0
   d67ee:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d67f0:	f000 f840 	bl	d6874 <_Z19__fetch_global_Wirev>
   d67f4:	f7fe fdae 	bl	d5354 <_ZN7TwoWire9isEnabledEv>
   d67f8:	b108      	cbz	r0, d67fe <pinAvailable+0x26>
   d67fa:	2c01      	cmp	r4, #1
   d67fc:	d9f6      	bls.n	d67ec <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d67fe:	f7ff fe6f 	bl	d64e0 <_Z22__fetch_global_Serial1v>
   d6802:	f7ff fe69 	bl	d64d8 <_ZN11USARTSerial9isEnabledEv>
   d6806:	b118      	cbz	r0, d6810 <pinAvailable+0x38>
   d6808:	f1a4 0309 	sub.w	r3, r4, #9
   d680c:	2b01      	cmp	r3, #1
   d680e:	d9ed      	bls.n	d67ec <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6810:	2c23      	cmp	r4, #35	; 0x23
   d6812:	bf8c      	ite	hi
   d6814:	2000      	movhi	r0, #0
   d6816:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6818:	bd10      	pop	{r4, pc}
   d681a:	bf00      	nop
   d681c:	2003e730 	.word	0x2003e730

000d6820 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6820:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6822:	b538      	push	{r3, r4, r5, lr}
   d6824:	4604      	mov	r4, r0
   d6826:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6828:	d80a      	bhi.n	d6840 <pinMode+0x20>
   d682a:	29ff      	cmp	r1, #255	; 0xff
   d682c:	d008      	beq.n	d6840 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d682e:	f7ff ffd3 	bl	d67d8 <pinAvailable>
   d6832:	b128      	cbz	r0, d6840 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6834:	4629      	mov	r1, r5
   d6836:	4620      	mov	r0, r4
}
   d6838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d683c:	f7fe bade 	b.w	d4dfc <HAL_Pin_Mode>
   d6840:	bd38      	pop	{r3, r4, r5, pc}

000d6842 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6842:	b538      	push	{r3, r4, r5, lr}
   d6844:	4604      	mov	r4, r0
   d6846:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6848:	f7fe fae0 	bl	d4e0c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d684c:	28ff      	cmp	r0, #255	; 0xff
   d684e:	d010      	beq.n	d6872 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6850:	2806      	cmp	r0, #6
   d6852:	d804      	bhi.n	d685e <digitalWrite+0x1c>
   d6854:	234d      	movs	r3, #77	; 0x4d
   d6856:	fa23 f000 	lsr.w	r0, r3, r0
   d685a:	07c3      	lsls	r3, r0, #31
   d685c:	d409      	bmi.n	d6872 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d685e:	4620      	mov	r0, r4
   d6860:	f7ff ffba 	bl	d67d8 <pinAvailable>
   d6864:	b128      	cbz	r0, d6872 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6866:	4629      	mov	r1, r5
   d6868:	4620      	mov	r0, r4
}
   d686a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d686e:	f7fe bad5 	b.w	d4e1c <HAL_GPIO_Write>
   d6872:	bd38      	pop	{r3, r4, r5, pc}

000d6874 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6874:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6876:	4d0b      	ldr	r5, [pc, #44]	; (d68a4 <_Z19__fetch_global_Wirev+0x30>)
   d6878:	6829      	ldr	r1, [r5, #0]
   d687a:	f011 0401 	ands.w	r4, r1, #1
   d687e:	d10f      	bne.n	d68a0 <_Z19__fetch_global_Wirev+0x2c>
   d6880:	4628      	mov	r0, r5
   d6882:	f7fd fc19 	bl	d40b8 <__cxa_guard_acquire>
   d6886:	b158      	cbz	r0, d68a0 <_Z19__fetch_global_Wirev+0x2c>
   d6888:	4621      	mov	r1, r4
   d688a:	4807      	ldr	r0, [pc, #28]	; (d68a8 <_Z19__fetch_global_Wirev+0x34>)
   d688c:	f7fe fd50 	bl	d5330 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6890:	4628      	mov	r0, r5
   d6892:	f7fd fc16 	bl	d40c2 <__cxa_guard_release>
   d6896:	4a05      	ldr	r2, [pc, #20]	; (d68ac <_Z19__fetch_global_Wirev+0x38>)
   d6898:	4905      	ldr	r1, [pc, #20]	; (d68b0 <_Z19__fetch_global_Wirev+0x3c>)
   d689a:	4803      	ldr	r0, [pc, #12]	; (d68a8 <_Z19__fetch_global_Wirev+0x34>)
   d689c:	f000 f82c 	bl	d68f8 <__aeabi_atexit>
	return wire;
}
   d68a0:	4801      	ldr	r0, [pc, #4]	; (d68a8 <_Z19__fetch_global_Wirev+0x34>)
   d68a2:	bd38      	pop	{r3, r4, r5, pc}
   d68a4:	2003e718 	.word	0x2003e718
   d68a8:	2003e71c 	.word	0x2003e71c
   d68ac:	2003e328 	.word	0x2003e328
   d68b0:	000d52d9 	.word	0x000d52d9

000d68b4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68b4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68b6:	4c0c      	ldr	r4, [pc, #48]	; (d68e8 <_GLOBAL__sub_I_SPI+0x34>)
   d68b8:	4e0c      	ldr	r6, [pc, #48]	; (d68ec <_GLOBAL__sub_I_SPI+0x38>)
   d68ba:	4d0d      	ldr	r5, [pc, #52]	; (d68f0 <_GLOBAL__sub_I_SPI+0x3c>)
   d68bc:	2100      	movs	r1, #0
   d68be:	4620      	mov	r0, r4
   d68c0:	f7fe ffd2 	bl	d5868 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d68c4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68c6:	4c0b      	ldr	r4, [pc, #44]	; (d68f4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d68c8:	4632      	mov	r2, r6
   d68ca:	4629      	mov	r1, r5
   d68cc:	f000 f814 	bl	d68f8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d68d0:	2101      	movs	r1, #1
   d68d2:	4620      	mov	r0, r4
   d68d4:	f7fe ffc8 	bl	d5868 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d68d8:	4632      	mov	r2, r6
   d68da:	4629      	mov	r1, r5
   d68dc:	4620      	mov	r0, r4
   d68de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d68e2:	f000 b809 	b.w	d68f8 <__aeabi_atexit>
   d68e6:	bf00      	nop
   d68e8:	2003e730 	.word	0x2003e730
   d68ec:	2003e328 	.word	0x2003e328
   d68f0:	000d5859 	.word	0x000d5859
   d68f4:	2003e740 	.word	0x2003e740

000d68f8 <__aeabi_atexit>:
   d68f8:	460b      	mov	r3, r1
   d68fa:	4601      	mov	r1, r0
   d68fc:	4618      	mov	r0, r3
   d68fe:	f000 b949 	b.w	d6b94 <__cxa_atexit>
	...

000d6904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6904:	4b24      	ldr	r3, [pc, #144]	; (d6998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6906:	681a      	ldr	r2, [r3, #0]
   d6908:	07d0      	lsls	r0, r2, #31
   d690a:	bf5c      	itt	pl
   d690c:	2201      	movpl	r2, #1
   d690e:	601a      	strpl	r2, [r3, #0]
   d6910:	4b22      	ldr	r3, [pc, #136]	; (d699c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6912:	681a      	ldr	r2, [r3, #0]
   d6914:	07d1      	lsls	r1, r2, #31
   d6916:	bf5c      	itt	pl
   d6918:	2201      	movpl	r2, #1
   d691a:	601a      	strpl	r2, [r3, #0]
   d691c:	4b20      	ldr	r3, [pc, #128]	; (d69a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d691e:	681a      	ldr	r2, [r3, #0]
   d6920:	07d2      	lsls	r2, r2, #31
   d6922:	bf5c      	itt	pl
   d6924:	2201      	movpl	r2, #1
   d6926:	601a      	strpl	r2, [r3, #0]
   d6928:	4b1e      	ldr	r3, [pc, #120]	; (d69a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d692a:	681a      	ldr	r2, [r3, #0]
   d692c:	07d0      	lsls	r0, r2, #31
   d692e:	bf5c      	itt	pl
   d6930:	2201      	movpl	r2, #1
   d6932:	601a      	strpl	r2, [r3, #0]
   d6934:	4b1c      	ldr	r3, [pc, #112]	; (d69a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6936:	681a      	ldr	r2, [r3, #0]
   d6938:	07d1      	lsls	r1, r2, #31
   d693a:	bf5c      	itt	pl
   d693c:	2201      	movpl	r2, #1
   d693e:	601a      	strpl	r2, [r3, #0]
   d6940:	4b1a      	ldr	r3, [pc, #104]	; (d69ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6942:	681a      	ldr	r2, [r3, #0]
   d6944:	07d2      	lsls	r2, r2, #31
   d6946:	bf5c      	itt	pl
   d6948:	2201      	movpl	r2, #1
   d694a:	601a      	strpl	r2, [r3, #0]
   d694c:	4b18      	ldr	r3, [pc, #96]	; (d69b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d694e:	681a      	ldr	r2, [r3, #0]
   d6950:	07d0      	lsls	r0, r2, #31
   d6952:	bf5c      	itt	pl
   d6954:	2201      	movpl	r2, #1
   d6956:	601a      	strpl	r2, [r3, #0]
   d6958:	4b16      	ldr	r3, [pc, #88]	; (d69b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d695a:	681a      	ldr	r2, [r3, #0]
   d695c:	07d1      	lsls	r1, r2, #31
   d695e:	bf5c      	itt	pl
   d6960:	2201      	movpl	r2, #1
   d6962:	601a      	strpl	r2, [r3, #0]
   d6964:	4b14      	ldr	r3, [pc, #80]	; (d69b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6966:	681a      	ldr	r2, [r3, #0]
   d6968:	07d2      	lsls	r2, r2, #31
   d696a:	bf5c      	itt	pl
   d696c:	2201      	movpl	r2, #1
   d696e:	601a      	strpl	r2, [r3, #0]
   d6970:	4b12      	ldr	r3, [pc, #72]	; (d69bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6972:	681a      	ldr	r2, [r3, #0]
   d6974:	07d0      	lsls	r0, r2, #31
   d6976:	bf5c      	itt	pl
   d6978:	2201      	movpl	r2, #1
   d697a:	601a      	strpl	r2, [r3, #0]
   d697c:	4b10      	ldr	r3, [pc, #64]	; (d69c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d697e:	681a      	ldr	r2, [r3, #0]
   d6980:	07d1      	lsls	r1, r2, #31
   d6982:	bf5c      	itt	pl
   d6984:	2201      	movpl	r2, #1
   d6986:	601a      	strpl	r2, [r3, #0]
   d6988:	4b0e      	ldr	r3, [pc, #56]	; (d69c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d698a:	681a      	ldr	r2, [r3, #0]
   d698c:	07d2      	lsls	r2, r2, #31
   d698e:	bf5c      	itt	pl
   d6990:	2201      	movpl	r2, #1
   d6992:	601a      	strpl	r2, [r3, #0]
   d6994:	4770      	bx	lr
   d6996:	bf00      	nop
   d6998:	2003e77c 	.word	0x2003e77c
   d699c:	2003e778 	.word	0x2003e778
   d69a0:	2003e774 	.word	0x2003e774
   d69a4:	2003e770 	.word	0x2003e770
   d69a8:	2003e76c 	.word	0x2003e76c
   d69ac:	2003e768 	.word	0x2003e768
   d69b0:	2003e764 	.word	0x2003e764
   d69b4:	2003e760 	.word	0x2003e760
   d69b8:	2003e75c 	.word	0x2003e75c
   d69bc:	2003e758 	.word	0x2003e758
   d69c0:	2003e754 	.word	0x2003e754
   d69c4:	2003e750 	.word	0x2003e750

000d69c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d69c8:	4b18      	ldr	r3, [pc, #96]	; (d6a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d69ca:	681a      	ldr	r2, [r3, #0]
   d69cc:	07d1      	lsls	r1, r2, #31
   d69ce:	bf5c      	itt	pl
   d69d0:	2201      	movpl	r2, #1
   d69d2:	601a      	strpl	r2, [r3, #0]
   d69d4:	4b16      	ldr	r3, [pc, #88]	; (d6a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d69d6:	681a      	ldr	r2, [r3, #0]
   d69d8:	07d2      	lsls	r2, r2, #31
   d69da:	bf5c      	itt	pl
   d69dc:	2201      	movpl	r2, #1
   d69de:	601a      	strpl	r2, [r3, #0]
   d69e0:	4b14      	ldr	r3, [pc, #80]	; (d6a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d69e2:	681a      	ldr	r2, [r3, #0]
   d69e4:	07d0      	lsls	r0, r2, #31
   d69e6:	bf5c      	itt	pl
   d69e8:	2201      	movpl	r2, #1
   d69ea:	601a      	strpl	r2, [r3, #0]
   d69ec:	4b12      	ldr	r3, [pc, #72]	; (d6a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d69ee:	681a      	ldr	r2, [r3, #0]
   d69f0:	07d1      	lsls	r1, r2, #31
   d69f2:	bf5c      	itt	pl
   d69f4:	2201      	movpl	r2, #1
   d69f6:	601a      	strpl	r2, [r3, #0]
   d69f8:	4b10      	ldr	r3, [pc, #64]	; (d6a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d69fa:	681a      	ldr	r2, [r3, #0]
   d69fc:	07d2      	lsls	r2, r2, #31
   d69fe:	bf5c      	itt	pl
   d6a00:	2201      	movpl	r2, #1
   d6a02:	601a      	strpl	r2, [r3, #0]
   d6a04:	4b0e      	ldr	r3, [pc, #56]	; (d6a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a06:	681a      	ldr	r2, [r3, #0]
   d6a08:	07d0      	lsls	r0, r2, #31
   d6a0a:	bf5c      	itt	pl
   d6a0c:	2201      	movpl	r2, #1
   d6a0e:	601a      	strpl	r2, [r3, #0]
   d6a10:	4b0c      	ldr	r3, [pc, #48]	; (d6a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	07d1      	lsls	r1, r2, #31
   d6a16:	bf5c      	itt	pl
   d6a18:	2201      	movpl	r2, #1
   d6a1a:	601a      	strpl	r2, [r3, #0]
   d6a1c:	4b0a      	ldr	r3, [pc, #40]	; (d6a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d2      	lsls	r2, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4770      	bx	lr
   d6a2a:	bf00      	nop
   d6a2c:	2003e79c 	.word	0x2003e79c
   d6a30:	2003e798 	.word	0x2003e798
   d6a34:	2003e794 	.word	0x2003e794
   d6a38:	2003e790 	.word	0x2003e790
   d6a3c:	2003e78c 	.word	0x2003e78c
   d6a40:	2003e788 	.word	0x2003e788
   d6a44:	2003e784 	.word	0x2003e784
   d6a48:	2003e780 	.word	0x2003e780

000d6a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a4c:	4b18      	ldr	r3, [pc, #96]	; (d6ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a4e:	681a      	ldr	r2, [r3, #0]
   d6a50:	07d1      	lsls	r1, r2, #31
   d6a52:	bf5c      	itt	pl
   d6a54:	2201      	movpl	r2, #1
   d6a56:	601a      	strpl	r2, [r3, #0]
   d6a58:	4b16      	ldr	r3, [pc, #88]	; (d6ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	07d2      	lsls	r2, r2, #31
   d6a5e:	bf5c      	itt	pl
   d6a60:	2201      	movpl	r2, #1
   d6a62:	601a      	strpl	r2, [r3, #0]
   d6a64:	4b14      	ldr	r3, [pc, #80]	; (d6ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a66:	681a      	ldr	r2, [r3, #0]
   d6a68:	07d0      	lsls	r0, r2, #31
   d6a6a:	bf5c      	itt	pl
   d6a6c:	2201      	movpl	r2, #1
   d6a6e:	601a      	strpl	r2, [r3, #0]
   d6a70:	4b12      	ldr	r3, [pc, #72]	; (d6abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d1      	lsls	r1, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b10      	ldr	r3, [pc, #64]	; (d6ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d2      	lsls	r2, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b0e      	ldr	r3, [pc, #56]	; (d6ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d0      	lsls	r0, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b0c      	ldr	r3, [pc, #48]	; (d6ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d1      	lsls	r1, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b0a      	ldr	r3, [pc, #40]	; (d6acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d2      	lsls	r2, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4770      	bx	lr
   d6aae:	bf00      	nop
   d6ab0:	2003e7bc 	.word	0x2003e7bc
   d6ab4:	2003e7b8 	.word	0x2003e7b8
   d6ab8:	2003e7b4 	.word	0x2003e7b4
   d6abc:	2003e7b0 	.word	0x2003e7b0
   d6ac0:	2003e7ac 	.word	0x2003e7ac
   d6ac4:	2003e7a8 	.word	0x2003e7a8
   d6ac8:	2003e7a4 	.word	0x2003e7a4
   d6acc:	2003e7a0 	.word	0x2003e7a0

000d6ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6ad0:	4b24      	ldr	r3, [pc, #144]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d0      	lsls	r0, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b22      	ldr	r3, [pc, #136]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d1      	lsls	r1, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b20      	ldr	r3, [pc, #128]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d2      	lsls	r2, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b1e      	ldr	r3, [pc, #120]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d0      	lsls	r0, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4b1c      	ldr	r3, [pc, #112]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d1      	lsls	r1, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b1a      	ldr	r3, [pc, #104]	; (d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d2      	lsls	r2, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b18      	ldr	r3, [pc, #96]	; (d6b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d0      	lsls	r0, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b16      	ldr	r3, [pc, #88]	; (d6b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d1      	lsls	r1, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b14      	ldr	r3, [pc, #80]	; (d6b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d2      	lsls	r2, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b12      	ldr	r3, [pc, #72]	; (d6b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d0      	lsls	r0, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b10      	ldr	r3, [pc, #64]	; (d6b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d1      	lsls	r1, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b0e      	ldr	r3, [pc, #56]	; (d6b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d2      	lsls	r2, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4770      	bx	lr
   d6b62:	bf00      	nop
   d6b64:	2003e7ec 	.word	0x2003e7ec
   d6b68:	2003e7e8 	.word	0x2003e7e8
   d6b6c:	2003e7e4 	.word	0x2003e7e4
   d6b70:	2003e7e0 	.word	0x2003e7e0
   d6b74:	2003e7dc 	.word	0x2003e7dc
   d6b78:	2003e7d8 	.word	0x2003e7d8
   d6b7c:	2003e7d4 	.word	0x2003e7d4
   d6b80:	2003e7d0 	.word	0x2003e7d0
   d6b84:	2003e7cc 	.word	0x2003e7cc
   d6b88:	2003e7c8 	.word	0x2003e7c8
   d6b8c:	2003e7c4 	.word	0x2003e7c4
   d6b90:	2003e7c0 	.word	0x2003e7c0

000d6b94 <__cxa_atexit>:
   d6b94:	b510      	push	{r4, lr}
   d6b96:	4c05      	ldr	r4, [pc, #20]	; (d6bac <__cxa_atexit+0x18>)
   d6b98:	4613      	mov	r3, r2
   d6b9a:	b12c      	cbz	r4, d6ba8 <__cxa_atexit+0x14>
   d6b9c:	460a      	mov	r2, r1
   d6b9e:	4601      	mov	r1, r0
   d6ba0:	2002      	movs	r0, #2
   d6ba2:	f3af 8000 	nop.w
   d6ba6:	bd10      	pop	{r4, pc}
   d6ba8:	4620      	mov	r0, r4
   d6baa:	bd10      	pop	{r4, pc}
   d6bac:	00000000 	.word	0x00000000

000d6bb0 <memcpy>:
   d6bb0:	b510      	push	{r4, lr}
   d6bb2:	1e43      	subs	r3, r0, #1
   d6bb4:	440a      	add	r2, r1
   d6bb6:	4291      	cmp	r1, r2
   d6bb8:	d004      	beq.n	d6bc4 <memcpy+0x14>
   d6bba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6bc2:	e7f8      	b.n	d6bb6 <memcpy+0x6>
   d6bc4:	bd10      	pop	{r4, pc}

000d6bc6 <memset>:
   d6bc6:	4402      	add	r2, r0
   d6bc8:	4603      	mov	r3, r0
   d6bca:	4293      	cmp	r3, r2
   d6bcc:	d002      	beq.n	d6bd4 <memset+0xe>
   d6bce:	f803 1b01 	strb.w	r1, [r3], #1
   d6bd2:	e7fa      	b.n	d6bca <memset+0x4>
   d6bd4:	4770      	bx	lr
	...

000d6bd8 <srand>:
   d6bd8:	b538      	push	{r3, r4, r5, lr}
   d6bda:	4b12      	ldr	r3, [pc, #72]	; (d6c24 <srand+0x4c>)
   d6bdc:	681c      	ldr	r4, [r3, #0]
   d6bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6be0:	4605      	mov	r5, r0
   d6be2:	b9d3      	cbnz	r3, d6c1a <srand+0x42>
   d6be4:	2018      	movs	r0, #24
   d6be6:	f7fe fb0d 	bl	d5204 <malloc>
   d6bea:	f243 330e 	movw	r3, #13070	; 0x330e
   d6bee:	63a0      	str	r0, [r4, #56]	; 0x38
   d6bf0:	8003      	strh	r3, [r0, #0]
   d6bf2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6bf6:	8043      	strh	r3, [r0, #2]
   d6bf8:	f241 2334 	movw	r3, #4660	; 0x1234
   d6bfc:	8083      	strh	r3, [r0, #4]
   d6bfe:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c02:	80c3      	strh	r3, [r0, #6]
   d6c04:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c08:	8103      	strh	r3, [r0, #8]
   d6c0a:	2305      	movs	r3, #5
   d6c0c:	8143      	strh	r3, [r0, #10]
   d6c0e:	230b      	movs	r3, #11
   d6c10:	8183      	strh	r3, [r0, #12]
   d6c12:	2201      	movs	r2, #1
   d6c14:	2300      	movs	r3, #0
   d6c16:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c1c:	2200      	movs	r2, #0
   d6c1e:	611d      	str	r5, [r3, #16]
   d6c20:	615a      	str	r2, [r3, #20]
   d6c22:	bd38      	pop	{r3, r4, r5, pc}
   d6c24:	2003e324 	.word	0x2003e324

000d6c28 <rand>:
   d6c28:	4b19      	ldr	r3, [pc, #100]	; (d6c90 <rand+0x68>)
   d6c2a:	b510      	push	{r4, lr}
   d6c2c:	681c      	ldr	r4, [r3, #0]
   d6c2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c30:	b9d3      	cbnz	r3, d6c68 <rand+0x40>
   d6c32:	2018      	movs	r0, #24
   d6c34:	f7fe fae6 	bl	d5204 <malloc>
   d6c38:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c3c:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c3e:	8003      	strh	r3, [r0, #0]
   d6c40:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c44:	8043      	strh	r3, [r0, #2]
   d6c46:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c4a:	8083      	strh	r3, [r0, #4]
   d6c4c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c50:	80c3      	strh	r3, [r0, #6]
   d6c52:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c56:	8103      	strh	r3, [r0, #8]
   d6c58:	2305      	movs	r3, #5
   d6c5a:	8143      	strh	r3, [r0, #10]
   d6c5c:	230b      	movs	r3, #11
   d6c5e:	8183      	strh	r3, [r0, #12]
   d6c60:	2201      	movs	r2, #1
   d6c62:	2300      	movs	r3, #0
   d6c64:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6c6a:	4c0a      	ldr	r4, [pc, #40]	; (d6c94 <rand+0x6c>)
   d6c6c:	690b      	ldr	r3, [r1, #16]
   d6c6e:	6948      	ldr	r0, [r1, #20]
   d6c70:	4a09      	ldr	r2, [pc, #36]	; (d6c98 <rand+0x70>)
   d6c72:	435c      	muls	r4, r3
   d6c74:	fb02 4000 	mla	r0, r2, r0, r4
   d6c78:	fba3 2302 	umull	r2, r3, r3, r2
   d6c7c:	3201      	adds	r2, #1
   d6c7e:	4403      	add	r3, r0
   d6c80:	f143 0300 	adc.w	r3, r3, #0
   d6c84:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d6c88:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6c8c:	bd10      	pop	{r4, pc}
   d6c8e:	bf00      	nop
   d6c90:	2003e324 	.word	0x2003e324
   d6c94:	5851f42d 	.word	0x5851f42d
   d6c98:	4c957f2d 	.word	0x4c957f2d

000d6c9c <strcmp>:
   d6c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6ca4:	2a01      	cmp	r2, #1
   d6ca6:	bf28      	it	cs
   d6ca8:	429a      	cmpcs	r2, r3
   d6caa:	d0f7      	beq.n	d6c9c <strcmp>
   d6cac:	1ad0      	subs	r0, r2, r3
   d6cae:	4770      	bx	lr

000d6cb0 <strcpy>:
   d6cb0:	4603      	mov	r3, r0
   d6cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6cb6:	f803 2b01 	strb.w	r2, [r3], #1
   d6cba:	2a00      	cmp	r2, #0
   d6cbc:	d1f9      	bne.n	d6cb2 <strcpy+0x2>
   d6cbe:	4770      	bx	lr

000d6cc0 <strlen>:
   d6cc0:	4603      	mov	r3, r0
   d6cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6cc6:	2a00      	cmp	r2, #0
   d6cc8:	d1fb      	bne.n	d6cc2 <strlen+0x2>
   d6cca:	1a18      	subs	r0, r3, r0
   d6ccc:	3801      	subs	r0, #1
   d6cce:	4770      	bx	lr

000d6cd0 <dynalib_user>:
   d6cd0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6ce0:	0000 0000                                   ....

000d6ce4 <_ZTV5Timer>:
	...
   d6cec:	4229 000d 427d 000d 416d 000d 610a 6b63     )B..}B..mA...ack
   d6cfc:	203a 6425 2820 7325 0a29 4400 5546 5000     : %d (%s)..DFU.P
   d6d0c:	5441 0000 c000 4001 1000 4002 2000 4002     AT.....@...@. .@

000d6d1c <CSWTCH.68>:
   d6d1c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d6d2c:	0050 0000                                   P...

000d6d30 <_ZTVN5spark13EthernetClassE>:
	...
   d6d38:	52b9 000d 52af 000d 52a5 000d 529b 000d     .R...R...R...R..
   d6d48:	528f 000d 5283 000d 5277 000d 526f 000d     .R...R..wR..oR..
   d6d58:	5265 000d 525b 000d 563d 000d               eR..[R..=V..

000d6d64 <_ZTV7TwoWire>:
	...
   d6d6c:	52d9 000d 5323 000d 52fb 000d 52db 000d     .R..#S...R...R..
   d6d7c:	5303 000d 530b 000d 5313 000d 531b 000d     .S...S...S...S..

000d6d8c <_ZTV9IPAddress>:
	...
   d6d94:	536b 000d 535d 000d 535f 000d 0066 6e6c     kS..]S.._S..f.ln
   d6da4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6db4:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d6dc4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d6dd4:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d6de4:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d6df4:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d6e04:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d6e14:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d6e24:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d6e34:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d6e44:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d6e54:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d6e64:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6e74:	6170 696e 0063 6c61 006c 0000               panic.all...

000d6e80 <_ZTVN5spark9MeshClassE>:
	...
   d6e88:	54db 000d 54d1 000d 54c7 000d 54bd 000d     .T...T...T...T..
   d6e98:	54b1 000d 54a5 000d 5499 000d 5491 000d     .T...T...T...T..
   d6ea8:	5487 000d 547d 000d 563d 000d               .T..}T..=V..

000d6eb4 <_ZTVN5spark12NetworkClassE>:
	...
   d6ebc:	55d5 000d 55df 000d 55e9 000d 55f3 000d     .U...U...U...U..
   d6ecc:	55fd 000d 5609 000d 5615 000d 5621 000d     .U...V...V..!V..
   d6edc:	5629 000d 5633 000d 563d 000d               )V..3V..=V..

000d6ee8 <_ZTV5Print>:
	...
   d6ef8:	40a5 000d 571d 000d                         .@...W..

000d6f00 <_ZTV8SPIClass>:
	...
   d6f08:	5859 000d 585b 000d                         YX..[X..

000d6f10 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6f18:	5b99 000d 5b9f 000d 6087 000d 5bab 000d     .[...[...`...[..
   d6f28:	5b9b 000d                                   .[..

000d6f2c <_ZTV9TCPClient>:
	...
   d6f34:	41d5 000d 4299 000d 5b11 000d 5b2b 000d     .A...B...[..+[..
   d6f44:	5f2d 000d 5d6f 000d 5d41 000d 5b55 000d     -_..o]..A]..U[..
   d6f54:	5e05 000d 5bb1 000d 5da3 000d 5eff 000d     .^...[...]...^..
   d6f64:	5b57 000d 5b8f 000d 5b3d 000d 5ca1 000d     W[...[..=[...\..
   d6f74:	5d21 000d 6977 6972 676e 7200 6365 2076     !]..wiring.recv 
   d6f84:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6f90 <_ZTV6Stream>:
	...
   d6fa0:	40a5 000d 571d 000d 40a5 000d 40a5 000d     .@...W...@...@..
   d6fb0:	40a5 000d 40a5 000d                         .@...@..

000d6fb8 <_ZTV6Client>:
	...
   d6fc8:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d6fd8:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d6fe8:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..

000d6ff8 <_ZTV15TCPServerClient>:
	...
   d7000:	61a5 000d 61b9 000d 5b11 000d 5b2b 000d     .a...a...[..+[..
   d7010:	5f2d 000d 5d6f 000d 5d41 000d 5b55 000d     -_..o]..A]..U[..
   d7020:	5e05 000d 5bb1 000d 5da3 000d 5eff 000d     .^...[...]...^..
   d7030:	5b57 000d 5b8f 000d 5b3d 000d 5ca1 000d     W[...[..=[...\..
   d7040:	6115 000d                                   .a..

000d7044 <_ZTV9TCPServer>:
	...
   d704c:	41f5 000d 42ab 000d 60b7 000d 60cd 000d     .A...B...`...`..
   d705c:	6239 000d 609f 000d 60df 000d 005a 2b25     9b...`...`..Z.%+
   d706c:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d707c:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d708c:	6974 656d 0000 0000                         time....

000d7094 <_ZTV11USARTSerial>:
	...
   d709c:	6459 000d 647d 000d 6489 000d 571d 000d     Yd..}d...d...W..
   d70ac:	6465 000d 6471 000d 646b 000d 6477 000d     ed..qd..kd..wd..
   d70bc:	645b 000d 645f 000d                         [d.._d..

000d70c4 <_ZTV9USBSerial>:
	...
   d70cc:	6531 000d 6575 000d 654f 000d 571d 000d     1e..ue..Oe...W..
   d70dc:	6549 000d 6533 000d 653b 000d 656f 000d     Ie..3e..;e..oe..
   d70ec:	6543 000d 652d 000d                         Ce..-e..

000d70f4 <_ZTVN5spark9WiFiClassE>:
	...
   d70fc:	6673 000d 6669 000d 665f 000d 6615 000d     sf..if.._f...f..
   d710c:	6653 000d 6647 000d 663b 000d 6633 000d     Sf..Gf..;f..3f..
   d711c:	6629 000d 661f 000d 563d 000d               )f...f..=V..

000d7128 <__sf_fake_stdin>:
	...

000d7148 <__sf_fake_stdout>:
	...

000d7168 <__sf_fake_stderr>:
	...
   d7188:	0043                                        C.

000d718a <link_const_variable_data_end>:
	...

000d718c <link_constructors_location>:
   d718c:	000d45a1 	.word	0x000d45a1
   d7190:	000d4cb9 	.word	0x000d4cb9
   d7194:	000d52c5 	.word	0x000d52c5
   d7198:	000d546d 	.word	0x000d546d
   d719c:	000d5589 	.word	0x000d5589
   d71a0:	000d5709 	.word	0x000d5709
   d71a4:	000d583d 	.word	0x000d583d
   d71a8:	000d5af9 	.word	0x000d5af9
   d71ac:	000d6445 	.word	0x000d6445
   d71b0:	000d667d 	.word	0x000d667d
   d71b4:	000d68b5 	.word	0x000d68b5
   d71b8:	000d6905 	.word	0x000d6905
   d71bc:	000d69c9 	.word	0x000d69c9
   d71c0:	000d6a4d 	.word	0x000d6a4d
   d71c4:	000d6ad1 	.word	0x000d6ad1

000d71c8 <link_constructors_end>:
	...
